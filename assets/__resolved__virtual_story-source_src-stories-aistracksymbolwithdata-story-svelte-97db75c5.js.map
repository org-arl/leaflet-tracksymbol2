{"version":3,"file":"__resolved__virtual_story-source_src-stories-aistracksymbolwithdata-story-svelte-97db75c5.js","sources":["../../../../../../../../__resolved__virtual:story-source:src-stories-aistracksymbolwithdata-story-svelte"],"sourcesContent":["export default \"<script lang=\\\"ts\\\">\\n    import type {Hst} from '@histoire/plugin-svelte';\\n    import {onMount} from 'svelte';\\n    import L, {LayerGroup, Map as LeafletMap} from 'leaflet';\\n    import {AISTrackSymbol} from '../';\\n    import type {Dimension, PositionReport, ShipStaticData} from '../';\\n\\n    interface _PositionReport {\\n        MessageID?: number;\\n        RepeatIndicator?: number;\\n        UserID?: number;\\n        Valid?: boolean;\\n        NavigationStatus?: number;\\n        RateOfTurn?: number;\\n        Sog?: number;\\n        PositionAccuracy?: boolean;\\n        Longitude: number;\\n        Latitude: number;\\n        Cog?: number;\\n        TrueHeading?: number;\\n        Timestamp?: number;\\n        SpecialManoeuvreIndicator?: number;\\n        Spare?: number;\\n        Raim?: boolean;\\n        CommunicationState?: number;\\n    }\\n\\n    interface _ShipStaticData {\\n        MessageID?: number;\\n        RepeatIndicator?: number;\\n        UserID?: number;\\n        Valid?: boolean;\\n        AisVersion?: number;\\n        ImoNumber?: number;\\n        CallSign?: string;\\n        Name?: string;\\n        Type?: number;\\n        Dimension?: Dimension;\\n        FixType?: number;\\n        MaximumStaticDraught?: number;\\n        Destination?: string;\\n        Dte?: boolean;\\n        Spare?: boolean;\\n    }\\n\\n    interface Entry {\\n        userId: number;\\n        positionReport?: _PositionReport;\\n        shipStaticData?: _ShipStaticData;\\n    }\\n\\n    interface Entries {\\n        entries?: Entry[];\\n    }\\n\\n    export let Hst: Hst;\\n\\n    let mapElement: HTMLDivElement;\\n    let map: LeafletMap;\\n    let center = [1.251, 103.826];\\n    let layerGroup: LayerGroup;\\n    let entries: Entries = {};\\n\\n    onMount(() => {\\n        if (!mapElement) {\\n            return;\\n        }\\n        map = L.map(mapElement, {\\n            center: center,\\n            zoom: 13,\\n        });\\n        L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\\n            attribution: '&copy; <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors',\\n        })\\n            .addTo(map);\\n\\n        layerGroup = new LayerGroup();\\n        layerGroup\\n            .addTo(map);\\n    });\\n\\n    $: {\\n        if (layerGroup != null) {\\n            layerGroup.clearLayers();\\n            if ((entries !== null) && (entries !== undefined)\\n                && (entries.entries !== null) && (entries.entries !== undefined)) {\\n                entries.entries.forEach(entry => {\\n                    if (!entry.positionReport) {\\n                        return;\\n                    }\\n                    let tooltip = entry.userId.toString();\\n                    const positionReport: PositionReport = {\\n                        userId: entry.positionReport.UserID,\\n                        latitude: entry.positionReport.Latitude,\\n                        longitude: entry.positionReport.Longitude,\\n                        trueHeading: entry.positionReport.TrueHeading,\\n                        cog: entry.positionReport.Cog,\\n                        sog: entry.positionReport.Sog,\\n                        navigationalStatus: entry.positionReport.NavigationStatus,\\n                        specialManoeuvreIndicator: entry.positionReport.SpecialManoeuvreIndicator,\\n                    };\\n                    let shipStaticData: ShipStaticData | null = null;\\n                    if (entry.shipStaticData) {\\n                        shipStaticData = {\\n                            imoNumber: entry.shipStaticData.ImoNumber,\\n                            callSign: entry.shipStaticData.CallSign,\\n                            name: entry.shipStaticData.Name,\\n                            type: entry.shipStaticData.Type,\\n                            dimension: entry.shipStaticData.Dimension,\\n                            fixType: entry.shipStaticData.FixType,\\n                            maximumStaticDraught: entry.shipStaticData.MaximumStaticDraught,\\n                            destination: entry.shipStaticData.Destination,\\n                            dte: entry.shipStaticData.Dte,\\n                        };\\n                        if (entry.shipStaticData.Name) {\\n                            tooltip = entry.shipStaticData.Name;\\n                        }\\n                    }\\n                    const ts = new AISTrackSymbol(positionReport, {\\n                        shipStaticData: shipStaticData,\\n                    });\\n                    ts.bindTooltip(tooltip);\\n                    ts.addTo(layerGroup);\\n                });\\n            }\\n        }\\n    }\\n</script>\\n\\n<style global>\\n    html,\\n    body,\\n    div#app,\\n    div#app > div,\\n    div#app > div > div,\\n    div#map {\\n        width: 100%;\\n        height: 100%;\\n        margin: 0;\\n        padding: 0;\\n    }\\n</style>\\n\\n<Hst.Story title=\\\"AIStrackSymbol (with data)\\\" group=\\\"layers\\\">\\n    <div bind:this={mapElement} id=\\\"map\\\">\\n    </div>\\n\\n    <svelte:fragment slot=\\\"controls\\\">\\n        <Hst.Json bind:value={entries} title=\\\"AIS data (JSON)\\\"/>\\n    </svelte:fragment>\\n</Hst.Story>\\n\""],"names":[],"mappings":"AAAA,MAAe}