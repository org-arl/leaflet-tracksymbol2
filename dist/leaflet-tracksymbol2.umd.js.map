{"version":3,"file":"leaflet-tracksymbol2.umd.js","sources":["../node_modules/.pnpm/@flatten-js+core@1.3.5/node_modules/@flatten-js/core/dist/main.esm.js","../src/trackSymbol.ts","../src/ais/aisTrackSymbol.ts","../src/index.ts"],"sourcesContent":["/**\r\n * Global constant CCW defines counter clockwise direction of arc\r\n * @type {boolean}\r\n */\r\nconst CCW = true;\r\n\r\n/**\r\n * Global constant CW defines clockwise direction of arc\r\n * @type {boolean}\r\n */\r\nconst CW = false;\r\n\r\n/**\r\n * Defines orientation for face of the polygon: clockwise, counter clockwise\r\n * or not orientable in the case of self-intersection\r\n * @type {{CW: number, CCW: number, NOT_ORIENTABLE: number}}\r\n */\r\nconst ORIENTATION = {CCW:-1, CW:1, NOT_ORIENTABLE: 0};\r\n\r\nconst PIx2 = 2 * Math.PI;\r\n\r\nconst INSIDE = 1;\r\nconst OUTSIDE = 0;\r\nconst BOUNDARY = 2;\r\nconst CONTAINS = 3;\r\nconst INTERLACE = 4;\r\n\r\nconst OVERLAP_SAME = 1;\r\nconst OVERLAP_OPPOSITE = 2;\r\n\r\nconst NOT_VERTEX = 0;\r\nconst START_VERTEX = 1;\r\nconst END_VERTEX = 2;\r\n\r\nvar Constants = /*#__PURE__*/Object.freeze({\r\n    CCW: CCW,\r\n    CW: CW,\r\n    ORIENTATION: ORIENTATION,\r\n    PIx2: PIx2,\r\n    INSIDE: INSIDE,\r\n    OUTSIDE: OUTSIDE,\r\n    BOUNDARY: BOUNDARY,\r\n    CONTAINS: CONTAINS,\r\n    INTERLACE: INTERLACE,\r\n    OVERLAP_SAME: OVERLAP_SAME,\r\n    OVERLAP_OPPOSITE: OVERLAP_OPPOSITE,\r\n    NOT_VERTEX: NOT_VERTEX,\r\n    START_VERTEX: START_VERTEX,\r\n    END_VERTEX: END_VERTEX\r\n});\r\n\r\n/**\r\n * Created by Alex Bol on 2/18/2017.\r\n */\r\n\r\n/**\r\n * Floating point comparison tolerance.\r\n * Default value is 0.000001 (10e-6)\r\n * @type {number}\r\n */\r\nlet DP_TOL = 0.000001;\r\n\r\n/**\r\n * Set new floating point comparison tolerance\r\n * @param {number} tolerance\r\n */\r\nfunction setTolerance(tolerance) {DP_TOL = tolerance;}\r\n\r\n/**\r\n * Get floating point comparison tolerance\r\n * @returns {number}\r\n */\r\nfunction getTolerance() {return DP_TOL;}\r\n\r\nconst DECIMALS = 3;\r\n\r\n/**\r\n * Returns *true* if value comparable to zero\r\n * @param {number} x\r\n * @param {number} y\r\n * @return {boolean}\r\n */\r\nfunction EQ_0(x) {\r\n    return (x < DP_TOL && x > -DP_TOL);\r\n}\r\n\r\n/**\r\n * Returns *true* if two values are equal up to DP_TOL\r\n * @param {number} x\r\n * @param {number} y\r\n * @return {boolean}\r\n */\r\nfunction EQ(x, y) {\r\n    return (x - y < DP_TOL && x - y > -DP_TOL);\r\n}\r\n\r\n/**\r\n * Returns *true* if first argument greater than second argument up to DP_TOL\r\n * @param {number} x\r\n * @param {number} y\r\n * @return {boolean}\r\n */\r\nfunction GT(x, y) {\r\n    return (x - y > DP_TOL);\r\n}\r\n\r\n/**\r\n * Returns *true* if first argument greater than or equal to second argument up to DP_TOL\r\n * @param {number} x\r\n * @param {number} y\r\n * @returns {boolean}\r\n */\r\nfunction GE(x, y) {\r\n    return (x - y > -DP_TOL);\r\n}\r\n\r\n/**\r\n * Returns *true* if first argument less than second argument up to DP_TOL\r\n * @param {number} x\r\n * @param {number} y\r\n * @return {boolean}\r\n */\r\nfunction LT(x, y) {\r\n    return (x - y < -DP_TOL)\r\n}\r\n\r\n/**\r\n * Returns *true* if first argument less than or equal to second argument up to DP_TOL\r\n * @param {number} x\r\n * @param {number} y\r\n * @return {boolean}\r\n */\r\nfunction LE(x, y) {\r\n    return (x - y < DP_TOL);\r\n}\r\n\r\nvar Utils = /*#__PURE__*/Object.freeze({\r\n    setTolerance: setTolerance,\r\n    getTolerance: getTolerance,\r\n    DECIMALS: DECIMALS,\r\n    EQ_0: EQ_0,\r\n    EQ: EQ,\r\n    GT: GT,\r\n    GE: GE,\r\n    LT: LT,\r\n    LE: LE\r\n});\r\n\r\n/**\r\n * Created by Alex Bol on 2/19/2017.\r\n */\r\n\r\n/**\r\n * Class of system errors\r\n */\r\nclass Errors {\r\n    /**\r\n     * Throw error ILLEGAL_PARAMETERS when cannot instantiate from given parameter\r\n     * @returns {ReferenceError}\r\n     */\r\n    static get ILLEGAL_PARAMETERS() {\r\n        return new ReferenceError('Illegal Parameters');\r\n    }\r\n\r\n    /**\r\n     * Throw error ZERO_DIVISION to catch situation of zero division\r\n     * @returns {Error}\r\n     */\r\n    static get ZERO_DIVISION() {\r\n        return new Error('Zero division');\r\n    }\r\n\r\n    /**\r\n     * Error to throw from BooleanOperations module in case when fixBoundaryConflicts not capable to fix it\r\n     * @returns {Error}\r\n     */\r\n    static get UNRESOLVED_BOUNDARY_CONFLICT() {\r\n        return new Error('Unresolved boundary conflict in boolean operation');\r\n    }\r\n\r\n    /**\r\n     * Error to throw from LinkedList:testInfiniteLoop static method\r\n     * in case when circular loop detected in linked list\r\n     * @returns {Error}\r\n     */\r\n    static get INFINITE_LOOP() {\r\n        return new Error('Infinite loop');\r\n    }\r\n}\r\n\r\nvar errors = /*#__PURE__*/Object.freeze({\r\n    default: Errors\r\n});\r\n\r\nlet Flatten = {\r\n    Utils: Utils,\r\n    Errors: Errors,\r\n    Matrix: undefined,\r\n    Planar_set: undefined,\r\n    Point: undefined,\r\n    Vector: undefined,\r\n    Line: undefined,\r\n    Circle: undefined,\r\n    Segment: undefined,\r\n    Arc: undefined,\r\n    Box: undefined,\r\n    Edge: undefined,\r\n    Face: undefined,\r\n    Ray: undefined,\r\n    Ray_shooting: undefined,\r\n    Multiline: undefined,\r\n    Polygon: undefined,\r\n    Distance: undefined,\r\n    Inversion: undefined\r\n};\r\n\r\nfor (let c in Constants) {Flatten[c] = Constants[c];}\r\n\r\nObject.defineProperty(Flatten, 'DP_TOL', {\r\n    get:function(){return getTolerance()}, \r\n    set:function(value){setTolerance(value);}\r\n});\r\n\r\n/**\r\n * Class implements bidirectional non-circular linked list. <br/>\r\n * LinkedListElement - object of any type that has properties next and prev.\r\n */\r\nclass LinkedList {\r\n    constructor(first, last) {\r\n        this.first = first;\r\n        this.last = last || this.first;\r\n    }\r\n\r\n    /**\r\n     * Throw an error if circular loop detected in the linked list\r\n     * @param {LinkedListElement} first element to start iteration\r\n     * @throws {Flatten.Errors.INFINITE_LOOP}\r\n     */\r\n    static testInfiniteLoop(first) {\r\n        let edge = first;\r\n        let controlEdge = first;\r\n        do {\r\n            if (edge != first && edge === controlEdge) {\r\n                throw Flatten.Errors.INFINITE_LOOP;  // new Error(\"Infinite loop\")\r\n            }\r\n            edge = edge.next;\r\n            controlEdge = controlEdge.next.next;\r\n        } while (edge != first)\r\n    }\r\n\r\n    /**\r\n     * Return number of elements in the list\r\n     * @returns {number}\r\n     */\r\n    get size() {\r\n        let counter = 0;\r\n        for (let edge of this) {\r\n            counter++;\r\n        }\r\n        return counter;\r\n    }\r\n\r\n    /**\r\n     * Return array of elements from start to end,\r\n     * If start or end not defined, take first as start, last as end\r\n     * @returns {Array}\r\n     */\r\n    toArray(start=undefined, end=undefined) {\r\n        let elements = [];\r\n        let from = start || this.first;\r\n        let to = end || this.last;\r\n        let element = from;\r\n        if (element === undefined) return elements;\r\n        do {\r\n            elements.push(element);\r\n            element = element.next;\r\n        } while (element !== to.next);\r\n        return elements;\r\n    }\r\n\r\n\r\n    /**\r\n     * Append new element to the end of the list\r\n     * @param {LinkedListElement} element\r\n     * @returns {LinkedList}\r\n     */\r\n    append(element) {\r\n        if (this.isEmpty()) {\r\n            this.first = element;\r\n        } else {\r\n            element.prev = this.last;\r\n            this.last.next = element;\r\n        }\r\n\r\n        // update edge to be last\r\n        this.last = element;\r\n\r\n        // nullify non-circular links\r\n        this.last.next = undefined;\r\n        this.first.prev = undefined;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Insert new element to the list after elementBefore\r\n     * @param {LinkedListElement} newElement\r\n     * @param {LinkedListElement} elementBefore\r\n     * @returns {LinkedList}\r\n     */\r\n    insert(newElement, elementBefore) {\r\n        if (this.isEmpty()) {\r\n            this.first = newElement;\r\n            this.last = newElement;\r\n        }\r\n        else if (elementBefore === null || elementBefore === undefined) {\r\n            newElement.next = this.first;\r\n            this.first.prev = newElement;\r\n            this.first = newElement;\r\n        }\r\n        else {\r\n            /* set links to new element */\r\n            let elementAfter = elementBefore.next;\r\n            elementBefore.next = newElement;\r\n            if (elementAfter) elementAfter.prev = newElement;\r\n\r\n            /* set links from new element */\r\n            newElement.prev = elementBefore;\r\n            newElement.next = elementAfter;\r\n\r\n            /* extend list if new element added after the last element */\r\n            if (this.last === elementBefore)\r\n                this.last = newElement;\r\n        }\r\n        // nullify non-circular links\r\n        this.last.next = undefined;\r\n        this.first.prev = undefined;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove element from the list\r\n     * @param {LinkedListElement} element\r\n     * @returns {LinkedList}\r\n     */\r\n    remove(element) {\r\n        // special case if last edge removed\r\n        if (element === this.first && element === this.last) {\r\n            this.first = undefined;\r\n            this.last = undefined;\r\n        } else {\r\n            // update linked list\r\n            if (element.prev) element.prev.next = element.next;\r\n            if (element.next) element.next.prev = element.prev;\r\n            // update first if need\r\n            if (element === this.first) {\r\n                this.first = element.next;\r\n            }\r\n            // update last if need\r\n            if (element === this.last) {\r\n                this.last = element.prev;\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Return true if list is empty\r\n     * @returns {boolean}\r\n     */\r\n    isEmpty() {\r\n        return this.first === undefined;\r\n    }\r\n\r\n    [Symbol.iterator]() {\r\n        let value = undefined;\r\n        return {\r\n            next: () => {\r\n                value = value ? value.next : this.first;\r\n                return {value: value, done: value === undefined};\r\n            }\r\n        };\r\n    };\r\n}\r\n\r\n/*\r\n    Smart intersections describe intersection points that refers to the edges they intersect\r\n    This function are supposed for internal usage by morphing and relation methods between\r\n */\r\n\r\nfunction addToIntPoints(edge, pt, int_points)\r\n{\r\n    let id = int_points.length;\r\n    let shapes = edge.shape.split(pt);\r\n\r\n    // if (shapes.length < 2) return;\r\n    if (shapes.length === 0) return;     // Point does not belong to edge ?\r\n\r\n    let len = 0;\r\n    if (shapes[0] === null) {   // point incident to edge start vertex\r\n        len = 0;\r\n    }\r\n    else if (shapes[1] === null) {   // point incident to edge end vertex\r\n        len = edge.shape.length;\r\n    }\r\n    else {                             // Edge was split into to edges\r\n        len = shapes[0].length;\r\n    }\r\n\r\n    let is_vertex = NOT_VERTEX;\r\n    if (EQ(len, 0)) {\r\n        is_vertex |= START_VERTEX;\r\n    }\r\n    if (EQ(len, edge.shape.length)) {\r\n        is_vertex |= END_VERTEX;\r\n    }\r\n    // Fix intersection point which is end point of the last edge\r\n    let arc_length = (is_vertex & END_VERTEX) && edge.next.arc_length === 0 ? 0 : edge.arc_length + len;\r\n\r\n    int_points.push({\r\n        id: id,\r\n        pt: pt,\r\n        arc_length: arc_length,\r\n        edge_before: edge,\r\n        edge_after: undefined,\r\n        face: edge.face,\r\n        is_vertex: is_vertex\r\n    });\r\n}\r\n\r\nfunction sortIntersections(intersections)\r\n{\r\n    // if (intersections.int_points1.length === 0) return;\r\n\r\n    // augment intersections with new sorted arrays\r\n    // intersections.int_points1_sorted = intersections.int_points1.slice().sort(compareFn);\r\n    // intersections.int_points2_sorted = intersections.int_points2.slice().sort(compareFn);\r\n    intersections.int_points1_sorted = getSortedArray(intersections.int_points1);\r\n    intersections.int_points2_sorted = getSortedArray(intersections.int_points2);\r\n}\r\n\r\nfunction getSortedArray(int_points)\r\n{\r\n    let faceMap = new Map;\r\n    let id = 0;\r\n    // Create integer id's for faces\r\n    for (let ip of int_points) {\r\n        if (!faceMap.has(ip.face)) {\r\n            faceMap.set(ip.face, id);\r\n            id++;\r\n        }\r\n    }\r\n    // Augment intersection points with face id's\r\n    for (let ip of int_points) {\r\n        ip.faceId = faceMap.get(ip.face);\r\n    }\r\n    // Clone and sort\r\n    let int_points_sorted = int_points.slice().sort(compareFn);\r\n    return int_points_sorted;\r\n}\r\n\r\nfunction compareFn(ip1, ip2)\r\n{\r\n    // compare face id's\r\n    if (ip1.faceId < ip2.faceId) {\r\n        return -1;\r\n    }\r\n    if (ip1.faceId > ip2.faceId) {\r\n        return 1;\r\n    }\r\n    // same face - compare arc_length\r\n    if (ip1.arc_length < ip2.arc_length) {\r\n        return -1;\r\n    }\r\n    if (ip1.arc_length > ip2.arc_length) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nfunction getSortedArrayOnLine(line, int_points) {\r\n    return int_points.slice().sort( (int_point1, int_point2) => {\r\n        if (line.coord(int_point1.pt) < line.coord(int_point2.pt)) {\r\n            return -1;\r\n        }\r\n        if (line.coord(int_point1.pt) > line.coord(int_point2.pt)) {\r\n            return 1;\r\n        }\r\n        return 0;\r\n    })\r\n}\r\n\r\nfunction filterDuplicatedIntersections(intersections)\r\n{\r\n    if (intersections.int_points1.length < 2) return;\r\n\r\n    let do_squeeze = false;\r\n\r\n    let int_point_ref1;\r\n    let int_point_ref2;\r\n    let int_point_cur1;\r\n    let int_point_cur2;\r\n    for (let i = 0; i < intersections.int_points1_sorted.length; i++) {\r\n\r\n        if (intersections.int_points1_sorted[i].id === -1)\r\n            continue;\r\n\r\n        int_point_ref1 = intersections.int_points1_sorted[i];\r\n        int_point_ref2 = intersections.int_points2[int_point_ref1.id];\r\n\r\n        for (let j=i+1; j < intersections.int_points1_sorted.length; j++) {\r\n            int_point_cur1 = intersections.int_points1_sorted[j];\r\n            if (!EQ(int_point_cur1.arc_length, int_point_ref1.arc_length)) {\r\n                break;\r\n            }\r\n            if (int_point_cur1.id === -1)\r\n                continue;\r\n            int_point_cur2 = intersections.int_points2[int_point_cur1.id];\r\n            if (int_point_cur2.id === -1)\r\n                continue;\r\n            if (int_point_cur1.edge_before === int_point_ref1.edge_before &&\r\n                int_point_cur1.edge_after === int_point_ref1.edge_after &&\r\n                int_point_cur2.edge_before === int_point_ref2.edge_before &&\r\n                int_point_cur2.edge_after === int_point_ref2.edge_after) {\r\n                int_point_cur1.id = -1;\r\n                /* to be deleted */\r\n                int_point_cur2.id = -1;\r\n                /* to be deleted */\r\n                do_squeeze = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    int_point_ref2 = intersections.int_points2_sorted[0];\r\n    int_point_ref1 = intersections.int_points1[int_point_ref2.id];\r\n    for (let i = 1; i < intersections.int_points2_sorted.length; i++) {\r\n        let int_point_cur2 = intersections.int_points2_sorted[i];\r\n\r\n        if (int_point_cur2.id == -1) continue;\r\n        /* already deleted */\r\n\r\n        if (int_point_ref2.id == -1 || /* can't be reference if already deleted */\r\n            !(EQ(int_point_cur2.arc_length, int_point_ref2.arc_length))) {\r\n            int_point_ref2 = int_point_cur2;\r\n            int_point_ref1 = intersections.int_points1[int_point_ref2.id];\r\n            continue;\r\n        }\r\n\r\n        let int_point_cur1 = intersections.int_points1[int_point_cur2.id];\r\n        if (int_point_cur1.edge_before === int_point_ref1.edge_before &&\r\n            int_point_cur1.edge_after === int_point_ref1.edge_after &&\r\n            int_point_cur2.edge_before === int_point_ref2.edge_before &&\r\n            int_point_cur2.edge_after === int_point_ref2.edge_after) {\r\n            int_point_cur1.id = -1;\r\n            /* to be deleted */\r\n            int_point_cur2.id = -1;\r\n            /* to be deleted */\r\n            do_squeeze = true;\r\n        }\r\n    }\r\n\r\n    if (do_squeeze) {\r\n        intersections.int_points1 = intersections.int_points1.filter((int_point) => int_point.id >= 0);\r\n        intersections.int_points2 = intersections.int_points2.filter((int_point) => int_point.id >= 0);\r\n\r\n        // update id's\r\n        intersections.int_points1.forEach((int_point, index) => int_point.id = index);\r\n        intersections.int_points2.forEach((int_point, index) => int_point.id = index);\r\n    }\r\n}\r\n\r\nfunction initializeInclusionFlags(int_points)\r\n{\r\n    for (let int_point of int_points) {\r\n        int_point.edge_before.bvStart = undefined;\r\n        int_point.edge_before.bvEnd = undefined;\r\n        int_point.edge_before.bv = undefined;\r\n        int_point.edge_before.overlap = undefined;\r\n\r\n        int_point.edge_after.bvStart = undefined;\r\n        int_point.edge_after.bvEnd = undefined;\r\n        int_point.edge_after.bv = undefined;\r\n        int_point.edge_after.overlap = undefined;\r\n    }\r\n\r\n    for (let int_point of int_points) {\r\n        int_point.edge_before.bvEnd = BOUNDARY;\r\n        int_point.edge_after.bvStart = BOUNDARY;\r\n    }\r\n}\r\n\r\nfunction calculateInclusionFlags(int_points, polygon)\r\n{\r\n    for (let int_point of int_points) {\r\n        int_point.edge_before.setInclusion(polygon);\r\n        int_point.edge_after.setInclusion(polygon);\r\n    }\r\n}\r\n\r\nfunction setOverlappingFlags(intersections)\r\n{\r\n    let cur_face = undefined;\r\n    let first_int_point_in_face_id = undefined;\r\n    let next_int_point1 = undefined;\r\n    let num_int_points = intersections.int_points1.length;\r\n\r\n    for (let i = 0; i < num_int_points; i++) {\r\n        let cur_int_point1 = intersections.int_points1_sorted[i];\r\n\r\n        // Find boundary chain in the polygon1\r\n        if (cur_int_point1.face !== cur_face) {                               // next chain started\r\n            first_int_point_in_face_id = i; // cur_int_point1;\r\n            cur_face = cur_int_point1.face;\r\n        }\r\n\r\n        // Skip duplicated points with same <x,y> in \"cur_int_point1\" pool\r\n        let int_points_cur_pool_start = i;\r\n        let int_points_cur_pool_num = intPointsPoolCount(intersections.int_points1_sorted, i, cur_face);\r\n        let next_int_point_id;\r\n        if (int_points_cur_pool_start + int_points_cur_pool_num < num_int_points &&\r\n            intersections.int_points1_sorted[int_points_cur_pool_start + int_points_cur_pool_num].face === cur_face) {\r\n            next_int_point_id = int_points_cur_pool_start + int_points_cur_pool_num;\r\n        } else {                                         // get first point from the same face\r\n            next_int_point_id = first_int_point_in_face_id;\r\n        }\r\n\r\n        // From all points with same ,x,y. in 'next_int_point1' pool choose one that\r\n        // has same face both in res_poly and in wrk_poly\r\n        let int_points_next_pool_num = intPointsPoolCount(intersections.int_points1_sorted, next_int_point_id, cur_face);\r\n        next_int_point1 = null;\r\n        for (let j=next_int_point_id; j < next_int_point_id + int_points_next_pool_num; j++) {\r\n            let next_int_point1_tmp = intersections.int_points1_sorted[j];\r\n            if (next_int_point1_tmp.face === cur_face &&\r\n                intersections.int_points2[next_int_point1_tmp.id].face === intersections.int_points2[cur_int_point1.id].face) {\r\n                next_int_point1 = next_int_point1_tmp;\r\n                break;\r\n            }\r\n        }\r\n        if (next_int_point1 === null)\r\n            continue;\r\n\r\n        let edge_from1 = cur_int_point1.edge_after;\r\n        let edge_to1 = next_int_point1.edge_before;\r\n\r\n        if (!(edge_from1.bv === BOUNDARY && edge_to1.bv === BOUNDARY))      // not a boundary chain - skip\r\n            continue;\r\n\r\n        if (edge_from1 !== edge_to1)                    //  one edge chain    TODO: support complex case\r\n            continue;\r\n\r\n        /* Find boundary chain in polygon2 between same intersection points */\r\n        let cur_int_point2 = intersections.int_points2[cur_int_point1.id];\r\n        let next_int_point2 = intersections.int_points2[next_int_point1.id];\r\n\r\n        let edge_from2 = cur_int_point2.edge_after;\r\n        let edge_to2 = next_int_point2.edge_before;\r\n\r\n        /* if [edge_from2..edge_to2] is not a boundary chain, invert it */\r\n        /* check also that chain consist of one or two edges */\r\n        if (!(edge_from2.bv === BOUNDARY && edge_to2.bv === BOUNDARY && edge_from2 === edge_to2)) {\r\n            cur_int_point2 = intersections.int_points2[next_int_point1.id];\r\n            next_int_point2 = intersections.int_points2[cur_int_point1.id];\r\n\r\n            edge_from2 = cur_int_point2.edge_after;\r\n            edge_to2 = next_int_point2.edge_before;\r\n        }\r\n\r\n        if (!(edge_from2.bv === BOUNDARY && edge_to2.bv === BOUNDARY && edge_from2 === edge_to2))\r\n            continue;                           // not an overlapping chain - skip   TODO: fix boundary conflict\r\n\r\n        // Set overlapping flag - one-to-one case\r\n        edge_from1.setOverlap(edge_from2);\r\n    }\r\n}\r\n\r\nfunction intPointsPoolCount(int_points, cur_int_point_num, cur_face)\r\n{\r\n    let int_point_current;\r\n    let int_point_next;\r\n\r\n    let int_points_pool_num = 1;\r\n\r\n    if (int_points.length == 1) return 1;\r\n\r\n    int_point_current = int_points[cur_int_point_num];\r\n\r\n    for (let i = cur_int_point_num + 1; i < int_points.length; i++) {\r\n        if (int_point_current.face != cur_face) {      /* next face started */\r\n            break;\r\n        }\r\n\r\n        int_point_next = int_points[i];\r\n\r\n        if (!(int_point_next.pt.equalTo(int_point_current.pt) &&\r\n            int_point_next.edge_before === int_point_current.edge_before &&\r\n            int_point_next.edge_after === int_point_current.edge_after)) {\r\n            break;         /* next point is different - break and exit */\r\n        }\r\n\r\n        int_points_pool_num++;     /* duplicated intersection point - increase counter */\r\n    }\r\n    return int_points_pool_num;\r\n}\r\n\r\nfunction splitByIntersections(polygon, int_points)\r\n{\r\n    if (!int_points) return;\r\n    for (let int_point of int_points) {\r\n        let edge = int_point.edge_before;\r\n\r\n        // recalculate vertex flag: it may be changed after previous split\r\n        int_point.is_vertex = NOT_VERTEX;\r\n        if (edge.shape.start && edge.shape.start.equalTo(int_point.pt)) {\r\n            int_point.is_vertex |= START_VERTEX;\r\n        }\r\n        if (edge.shape.end && edge.shape.end.equalTo(int_point.pt)) {\r\n            int_point.is_vertex |= END_VERTEX;\r\n        }\r\n\r\n        if (int_point.is_vertex & START_VERTEX) {  // nothing to split\r\n            int_point.edge_before = edge.prev;\r\n            int_point.is_vertex = END_VERTEX;\r\n            continue;\r\n        }\r\n        if (int_point.is_vertex & END_VERTEX) {    // nothing to split\r\n            continue;\r\n        }\r\n\r\n        let newEdge = polygon.addVertex(int_point.pt, edge);\r\n        int_point.edge_before = newEdge;\r\n    }\r\n\r\n    for (let int_point of int_points) {\r\n        int_point.edge_after = int_point.edge_before.next;\r\n    }\r\n}\r\n\r\nfunction insertBetweenIntPoints(int_point1, int_point2, new_edge) {\r\n    let edge_before = int_point1.edge_before;\r\n    let edge_after = int_point2.edge_after;\r\n\r\n    edge_before.next = new_edge;\r\n    new_edge.prev = edge_before;\r\n\r\n    new_edge.next = edge_after;\r\n    edge_after.prev = new_edge;\r\n}\r\n\r\n/**\r\n * Created by Alex Bol on 12/02/2018.\r\n */\r\n\r\nconst {INSIDE: INSIDE$1, OUTSIDE: OUTSIDE$1, BOUNDARY: BOUNDARY$1, OVERLAP_SAME: OVERLAP_SAME$1, OVERLAP_OPPOSITE: OVERLAP_OPPOSITE$1} = Constants;\r\nconst {NOT_VERTEX: NOT_VERTEX$1, START_VERTEX: START_VERTEX$1, END_VERTEX: END_VERTEX$1} = Constants;\r\n\r\nconst BOOLEAN_UNION = 1;\r\nconst BOOLEAN_INTERSECT = 2;\r\nconst BOOLEAN_SUBTRACT = 3;\r\n\r\n\r\n/**\r\n * Unify two polygons polygons and returns new polygon. <br/>\r\n * Point belongs to the resulted polygon if it belongs to the first OR to the second polygon\r\n * @param {Polygon} polygon1 - first operand\r\n * @param {Polygon} polygon2 - second operand\r\n * @returns {Polygon}\r\n */\r\nfunction unify(polygon1, polygon2) {\r\n    let [res_poly, wrk_poly] = booleanOpBinary(polygon1, polygon2, BOOLEAN_UNION, true);\r\n    return res_poly;\r\n}\r\n\r\n/**\r\n * Subtract second polygon from the first and returns new polygon\r\n * Point belongs to the resulted polygon if it belongs to the first polygon AND NOT to the second polygon\r\n * @param {Polygon} polygon1 - first operand\r\n * @param {Polygon} polygon2 - second operand\r\n * @returns {Polygon}\r\n */\r\nfunction subtract(polygon1, polygon2) {\r\n    let polygon2_tmp = polygon2.clone();\r\n    let polygon2_reversed = polygon2_tmp.reverse();\r\n    let [res_poly, wrk_poly] = booleanOpBinary(polygon1, polygon2_reversed, BOOLEAN_SUBTRACT, true);\r\n    return res_poly;\r\n}\r\n\r\n/**\r\n * Intersect two polygons and returns new polygon\r\n * Point belongs to the resulted polygon is it belongs to the first AND to the second polygon\r\n * @param {Polygon} polygon1 - first operand\r\n * @param {Polygon} polygon2 - second operand\r\n * @returns {Polygon}\r\n */\r\nfunction intersect(polygon1, polygon2) {\r\n    let [res_poly, wrk_poly] = booleanOpBinary(polygon1, polygon2, BOOLEAN_INTERSECT, true);\r\n    return res_poly;\r\n}\r\n\r\n/**\r\n * Returns boundary of intersection between two polygons as two arrays of shapes (Segments/Arcs) <br/>\r\n * The first array are shapes from the first polygon, the second array are shapes from the second\r\n * @param {Polygon} polygon1 - first operand\r\n * @param {Polygon} polygon2 - second operand\r\n * @returns {Shape[][]}\r\n */\r\nfunction innerClip(polygon1, polygon2) {\r\n    let [res_poly, wrk_poly] = booleanOpBinary(polygon1, polygon2, BOOLEAN_INTERSECT, false);\r\n\r\n    let clip_shapes1 = [];\r\n    for (let face of res_poly.faces) {\r\n        clip_shapes1 = [...clip_shapes1, ...[...face.edges].map(edge => edge.shape)];\r\n    }\r\n    let clip_shapes2 = [];\r\n    for (let face of wrk_poly.faces) {\r\n        clip_shapes2 = [...clip_shapes2, ...[...face.edges].map(edge => edge.shape)];\r\n    }\r\n    return [clip_shapes1, clip_shapes2];\r\n}\r\n\r\n/**\r\n * Returns boundary of subtraction of the second polygon from first polygon as array of shapes\r\n * @param {Polygon} polygon1 - first operand\r\n * @param {Polygon} polygon2 - second operand\r\n * @returns {Shape[]}\r\n */\r\nfunction outerClip(polygon1, polygon2) {\r\n    let [res_poly, wrk_poly] = booleanOpBinary(polygon1, polygon2, BOOLEAN_SUBTRACT, false);\r\n\r\n    let clip_shapes1 = [];\r\n    for (let face of res_poly.faces) {\r\n        clip_shapes1 = [...clip_shapes1, ...[...face.edges].map(edge => edge.shape)];\r\n    }\r\n\r\n    return clip_shapes1;\r\n}\r\n\r\n/**\r\n * Returns intersection points between boundaries of two polygons as two array of points <br/>\r\n * Points in the first array belong to first polygon, points from the second - to the second.\r\n * Points in each array are ordered according to the direction of the correspondent polygon\r\n * @param {Polygon} polygon1 - first operand\r\n * @param {Polygon} polygon2 - second operand\r\n * @returns {Point[][]}\r\n */\r\nfunction calculateIntersections(polygon1, polygon2) {\r\n    let res_poly = polygon1.clone();\r\n    let wrk_poly = polygon2.clone();\r\n\r\n    // get intersection points\r\n    let intersections = getIntersections(res_poly, wrk_poly);\r\n\r\n    // sort intersection points\r\n    sortIntersections(intersections);\r\n\r\n    // split by intersection points\r\n    splitByIntersections(res_poly, intersections.int_points1_sorted);\r\n    splitByIntersections(wrk_poly, intersections.int_points2_sorted);\r\n\r\n    // filter duplicated intersection points\r\n    filterDuplicatedIntersections(intersections);\r\n\r\n    // sort intersection points again after filtering\r\n    sortIntersections(intersections);\r\n\r\n    let ip_sorted1 = intersections.int_points1_sorted.map( int_point => int_point.pt);\r\n    let ip_sorted2 = intersections.int_points2_sorted.map( int_point => int_point.pt);\r\n    return [ip_sorted1, ip_sorted2];\r\n}\r\n\r\nfunction filterNotRelevantEdges(res_poly, wrk_poly, intersections, op) {\r\n    // keep not intersected faces for further remove and merge\r\n    let notIntersectedFacesRes = getNotIntersectedFaces(res_poly, intersections.int_points1);\r\n    let notIntersectedFacesWrk = getNotIntersectedFaces(wrk_poly, intersections.int_points2);\r\n\r\n    // calculate inclusion flag for not intersected faces\r\n    calcInclusionForNotIntersectedFaces(notIntersectedFacesRes, wrk_poly);\r\n    calcInclusionForNotIntersectedFaces(notIntersectedFacesWrk, res_poly);\r\n\r\n    // initialize inclusion flags for edges incident to intersections\r\n    initializeInclusionFlags(intersections.int_points1);\r\n    initializeInclusionFlags(intersections.int_points2);\r\n\r\n    // calculate inclusion flags only for edges incident to intersections\r\n    calculateInclusionFlags(intersections.int_points1, wrk_poly);\r\n    calculateInclusionFlags(intersections.int_points2, res_poly);\r\n\r\n    // fix boundary conflicts\r\n    while (fixBoundaryConflicts(res_poly, wrk_poly, intersections.int_points1, intersections.int_points1_sorted, intersections.int_points2, intersections));\r\n    // while (fixBoundaryConflicts(wrk_poly, res_poly, intersections.int_points2, intersections.int_points2_sorted, intersections.int_points1, intersections));\r\n\r\n    // Set overlapping flags for boundary chains: SAME or OPPOSITE\r\n    setOverlappingFlags(intersections);\r\n\r\n    // remove not relevant chains between intersection points\r\n    removeNotRelevantChains(res_poly, op, intersections.int_points1_sorted, true);\r\n    removeNotRelevantChains(wrk_poly, op, intersections.int_points2_sorted, false);\r\n\r\n    // remove not relevant not intersected faces from res_polygon and wrk_polygon\r\n    // if op == UNION, remove faces that are included in wrk_polygon without intersection\r\n    // if op == INTERSECT, remove faces that are not included into wrk_polygon\r\n    removeNotRelevantNotIntersectedFaces(res_poly, notIntersectedFacesRes, op, true);\r\n    removeNotRelevantNotIntersectedFaces(wrk_poly, notIntersectedFacesWrk, op, false);\r\n}\r\n\r\nfunction swapLinksAndRestore(res_poly, wrk_poly, intersections, op) {\r\n\r\n    // add edges of wrk_poly into the edge container of res_poly\r\n    copyWrkToRes(res_poly, wrk_poly, op, intersections.int_points2);\r\n\r\n    // swap links from res_poly to wrk_poly and vice versa\r\n    swapLinks(res_poly, wrk_poly, intersections);\r\n\r\n    // remove old faces\r\n    removeOldFaces(res_poly, intersections.int_points1);\r\n    removeOldFaces(wrk_poly, intersections.int_points2);\r\n\r\n    // restore faces\r\n    restoreFaces(res_poly, intersections.int_points1, intersections.int_points2);\r\n    restoreFaces(res_poly, intersections.int_points2, intersections.int_points1);\r\n\r\n    // merge relevant not intersected faces from wrk_polygon to res_polygon\r\n    // mergeRelevantNotIntersectedFaces(res_poly, wrk_poly);\r\n}\r\n\r\n\r\nfunction booleanOpBinary(polygon1, polygon2, op, restore)\r\n{\r\n    let res_poly = polygon1.clone();\r\n    let wrk_poly = polygon2.clone();\r\n\r\n    // get intersection points\r\n    let intersections = getIntersections(res_poly, wrk_poly);\r\n\r\n    // sort intersection points\r\n    sortIntersections(intersections);\r\n\r\n    // split by intersection points\r\n    splitByIntersections(res_poly, intersections.int_points1_sorted);\r\n    splitByIntersections(wrk_poly, intersections.int_points2_sorted);\r\n\r\n    // filter duplicated intersection points\r\n    filterDuplicatedIntersections(intersections);\r\n\r\n    // sort intersection points again after filtering\r\n    sortIntersections(intersections);\r\n\r\n    // calculate inclusion and remove not relevant edges\r\n    filterNotRelevantEdges(res_poly, wrk_poly, intersections, op);\r\n\r\n    if (restore) {\r\n        swapLinksAndRestore(res_poly, wrk_poly, intersections, op);\r\n    }\r\n\r\n    return [res_poly, wrk_poly];\r\n}\r\n\r\nfunction getIntersections(polygon1, polygon2)\r\n{\r\n    let intersections = {\r\n        int_points1: [],\r\n        int_points2: []\r\n    };\r\n\r\n    // calculate intersections\r\n    for (let edge1 of polygon1.edges) {\r\n\r\n        // request edges of polygon2 in the box of edge1\r\n        let resp = polygon2.edges.search(edge1.box);\r\n\r\n        // for each edge2 in response\r\n        for (let edge2 of resp) {\r\n\r\n            // calculate intersections between edge1 and edge2\r\n            let ip = edge1.shape.intersect(edge2.shape);\r\n\r\n            // for each intersection point\r\n            for (let pt of ip) {\r\n                addToIntPoints(edge1, pt, intersections.int_points1);\r\n                addToIntPoints(edge2, pt, intersections.int_points2);\r\n            }\r\n        }\r\n    }\r\n    return intersections;\r\n}\r\n\r\nfunction getNotIntersectedFaces(poly, int_points)\r\n{\r\n    let notIntersected = [];\r\n    for (let face of poly.faces) {\r\n        if (!int_points.find((ip) => ip.face === face)) {\r\n            notIntersected.push(face);\r\n        }\r\n    }\r\n    return notIntersected;\r\n}\r\n\r\nfunction calcInclusionForNotIntersectedFaces(notIntersectedFaces, poly2)\r\n{\r\n    for (let face of notIntersectedFaces) {\r\n        face.first.bv = face.first.bvStart = face.first.bvEnd = undefined;\r\n        face.first.setInclusion(poly2);\r\n    }\r\n}\r\n\r\nfunction fixBoundaryConflicts(poly1, poly2, int_points1, int_points1_sorted, int_points2, intersections )\r\n{\r\n    let cur_face;\r\n    let first_int_point_in_face_id;\r\n    let next_int_point1;\r\n    let num_int_points = int_points1_sorted.length;\r\n    let iterate_more = false;\r\n\r\n    for (let i = 0; i < num_int_points; i++) {\r\n        let cur_int_point1 = int_points1_sorted[i];\r\n\r\n        // Find boundary chain in the polygon1\r\n        if (cur_int_point1.face !== cur_face) {                               // next chain started\r\n            first_int_point_in_face_id = i; // cur_int_point1;\r\n            cur_face = cur_int_point1.face;\r\n        }\r\n\r\n        // Skip duplicated points with same <x,y> in \"cur_int_point1\" pool\r\n        let int_points_cur_pool_start = i;\r\n        let int_points_cur_pool_num = intPointsPoolCount(int_points1_sorted, i, cur_face);\r\n        let next_int_point_id;\r\n        if (int_points_cur_pool_start + int_points_cur_pool_num < num_int_points &&\r\n            int_points1_sorted[int_points_cur_pool_start + int_points_cur_pool_num].face === cur_face) {\r\n            next_int_point_id = int_points_cur_pool_start + int_points_cur_pool_num;\r\n        } else {                                         // get first point from the same face\r\n            next_int_point_id = first_int_point_in_face_id;\r\n        }\r\n\r\n        // From all points with same ,x,y. in 'next_int_point1' pool choose one that\r\n        // has same face both in res_poly and in wrk_poly\r\n        let int_points_next_pool_num = intPointsPoolCount(int_points1_sorted, next_int_point_id, cur_face);\r\n        next_int_point1 = null;\r\n        for (let j=next_int_point_id; j < next_int_point_id + int_points_next_pool_num; j++) {\r\n            let next_int_point1_tmp = int_points1_sorted[j];\r\n            if (next_int_point1_tmp.face === cur_face &&\r\n                int_points2[next_int_point1_tmp.id].face === int_points2[cur_int_point1.id].face) {\r\n                next_int_point1 = next_int_point1_tmp;\r\n                break;\r\n            }\r\n        }\r\n        if (next_int_point1 === null)\r\n            continue;\r\n\r\n        let edge_from1 = cur_int_point1.edge_after;\r\n        let edge_to1 = next_int_point1.edge_before;\r\n\r\n        // Case #1. One of the ends is not boundary - probably tiny edge wrongly marked as boundary\r\n        if (edge_from1.bv === BOUNDARY$1 && edge_to1.bv != BOUNDARY$1) {\r\n            edge_from1.bv = edge_to1.bv;\r\n            continue;\r\n        }\r\n\r\n        if (edge_from1.bv != BOUNDARY$1 && edge_to1.bv === BOUNDARY$1) {\r\n            edge_to1.bv = edge_from1.bv;\r\n            continue;\r\n        }\r\n\r\n        // Set up all boundary values for middle edges. Need for cases 2 and 3\r\n        if ( (edge_from1.bv === BOUNDARY$1 && edge_to1.bv === BOUNDARY$1 && edge_from1 != edge_to1) ||\r\n        (edge_from1.bv === INSIDE$1 && edge_to1.bv === OUTSIDE$1  || edge_from1.bv === OUTSIDE$1 && edge_to1.bv === INSIDE$1 ) ) {\r\n            let edge_tmp = edge_from1.next;\r\n            while (edge_tmp != edge_to1) {\r\n                edge_tmp.bvStart = undefined;\r\n                edge_tmp.bvEnd = undefined;\r\n                edge_tmp.bv = undefined;\r\n                edge_tmp.setInclusion(poly2);\r\n                edge_tmp = edge_tmp.next;\r\n            }\r\n        }\r\n\r\n        // Case #2. Both of the ends boundary. Check all the edges in the middle\r\n        // If some edges in the middle are not boundary then update bv of 'from' and 'to' edges\r\n        if (edge_from1.bv === BOUNDARY$1 && edge_to1.bv === BOUNDARY$1 && edge_from1 != edge_to1) {\r\n            let edge_tmp = edge_from1.next;\r\n            let new_bv;\r\n            while (edge_tmp != edge_to1) {\r\n                if (edge_tmp.bv != BOUNDARY$1) {\r\n                    if (new_bv === undefined) {        // first not boundary edge between from and to\r\n                        new_bv = edge_tmp.bv;\r\n                    }\r\n                    else {                            // another not boundary edge between from and to\r\n                        if (edge_tmp.bv != new_bv) {  // and it has different bv - can't resolve conflict\r\n                            throw Errors.UNRESOLVED_BOUNDARY_CONFLICT;\r\n                        }\r\n                    }\r\n                }\r\n                edge_tmp = edge_tmp.next;\r\n            }\r\n\r\n            if (new_bv != undefined) {\r\n                edge_from1.bv = new_bv;\r\n                edge_to1.bv = new_bv;\r\n            }\r\n            continue;         // all middle edges are boundary, proceed with this\r\n        }\r\n\r\n        // Case 3. One of the ends is inner, another is outer\r\n        if (edge_from1.bv === INSIDE$1 && edge_to1.bv === OUTSIDE$1  || edge_from1.bv === OUTSIDE$1 && edge_to1.bv === INSIDE$1 ) {\r\n            let edge_tmp = edge_from1;\r\n            // Find missing intersection point\r\n            while (edge_tmp != edge_to1) {\r\n                if (edge_tmp.bvStart === edge_from1.bv && edge_tmp.bvEnd === edge_to1.bv) {\r\n                    let [dist, segment] = edge_tmp.shape.distanceTo(poly2);\r\n                    if (dist < 10*Flatten.DP_TOL) {  // it should be very close\r\n                        // let pt = edge_tmp.end;\r\n                        // add to the list of intersections of poly1\r\n                        addToIntPoints(edge_tmp, segment.ps, int_points1);\r\n\r\n                        // split edge_tmp in poly1 if need\r\n                        let int_point1 = int_points1[int_points1.length-1];\r\n                        if (int_point1.is_vertex & START_VERTEX$1) {        // nothing to split\r\n                            int_point1.edge_after = edge_tmp;\r\n                            int_point1.edge_before = edge_tmp.prev;\r\n                            edge_tmp.bvStart = BOUNDARY$1;\r\n                            edge_tmp.bv = undefined;\r\n                            edge_tmp.setInclusion(poly2);\r\n                        }\r\n                        else if (int_point1.is_vertex & END_VERTEX$1) {    // nothing to split\r\n                            int_point1.edge_after = edge_tmp.next;\r\n                            edge_tmp.bvEnd = BOUNDARY$1;\r\n                            edge_tmp.bv = undefined;\r\n                            edge_tmp.setInclusion(poly2);\r\n                        }\r\n                        else {        // split edge here\r\n                            let newEdge1 = poly2.addVertex(int_point1.pt, edge_tmp);\r\n                            int_point1.edge_before = newEdge1;\r\n                            int_point1.edge_after = newEdge1.next;\r\n\r\n                            newEdge1.setInclusion(poly2);\r\n\r\n                            newEdge1.next.bvStart = BOUNDARY$1;\r\n                            newEdge1.next.bvEnd = undefined;\r\n                            newEdge1.next.bv = undefined;\r\n                            newEdge1.next.setInclusion(poly2);\r\n                        }\r\n\r\n                        // add to the list of intersections of poly2\r\n                        let edge2 = poly2.findEdgeByPoint(segment.pe);\r\n                        addToIntPoints(edge2, segment.pe, int_points2);\r\n                        // split edge2 in poly2 if need\r\n                        let int_point2 = int_points2[int_points2.length-1];\r\n                        if (int_point2.is_vertex & START_VERTEX$1) {        // nothing to split\r\n                            int_point2.edge_after = edge2;\r\n                            int_point2.edge_before = edge2.prev;\r\n                        }\r\n                        else if (int_point2.is_vertex & END_VERTEX$1) {    // nothing to split\r\n                            int_point2.edge_after = edge2.next;\r\n                        }\r\n                        else {        // split edge here\r\n                            // first locate int_points that may refer to edge2 as edge.after\r\n                            // let int_point2_edge_before = int_points2.find( int_point => int_point.edge_before === edge2)\r\n                            let int_point2_edge_after = int_points2.find( int_point => int_point.edge_after === edge2 );\r\n\r\n                            let newEdge2 = poly2.addVertex(int_point2.pt, edge2);\r\n                            int_point2.edge_before = newEdge2;\r\n                            int_point2.edge_after = newEdge2.next;\r\n\r\n                            if (int_point2_edge_after)\r\n                                int_point2_edge_after.edge_after = newEdge2;\r\n\r\n                            newEdge2.bvStart = undefined;\r\n                            newEdge2.bvEnd = BOUNDARY$1;\r\n                            newEdge2.bv = undefined;\r\n                            newEdge2.setInclusion(poly1);\r\n\r\n                            newEdge2.next.bvStart = BOUNDARY$1;\r\n                            newEdge2.next.bvEnd = undefined;\r\n                            newEdge2.next.bv = undefined;\r\n                            newEdge2.next.setInclusion(poly1);\r\n                        }\r\n\r\n                        sortIntersections(intersections);\r\n\r\n                        iterate_more = true;\r\n                        break;\r\n                    }\r\n                }\r\n                edge_tmp = edge_tmp.next;\r\n            }\r\n\r\n            // we changed intersections inside loop, have to exit and repair again\r\n            if (iterate_more)\r\n                break;\r\n\r\n            throw Errors.UNRESOLVED_BOUNDARY_CONFLICT;\r\n        }\r\n    }\r\n\r\n    return iterate_more;\r\n}\r\n\r\nfunction removeNotRelevantChains(polygon, op, int_points, is_res_polygon)\r\n{\r\n    if (!int_points) return;\r\n    let cur_face = undefined;\r\n    let first_int_point_in_face_num = undefined;\r\n    let int_point_current;\r\n    let int_point_next;\r\n\r\n    for (let i = 0; i < int_points.length; i++) {\r\n        int_point_current = int_points[i];\r\n\r\n        if (int_point_current.face !== cur_face) {   // next face started\r\n            first_int_point_in_face_num = i;\r\n            cur_face = int_point_current.face;\r\n        }\r\n\r\n        if (cur_face.isEmpty())                // ??\r\n            continue;\r\n\r\n        // Get next int point from the same face that current\r\n\r\n        // Count how many duplicated points with same <x,y> in \"points from\" pool ?\r\n        let int_points_from_pull_start = i;\r\n        let int_points_from_pull_num = intPointsPoolCount(int_points, i, cur_face);\r\n        let next_int_point_num;\r\n        if (int_points_from_pull_start + int_points_from_pull_num < int_points.length &&\r\n            int_points[int_points_from_pull_start + int_points_from_pull_num].face === int_point_current.face) {\r\n            next_int_point_num = int_points_from_pull_start + int_points_from_pull_num;\r\n        } else {                                         // get first point from the same face\r\n            next_int_point_num = first_int_point_in_face_num;\r\n        }\r\n        int_point_next = int_points[next_int_point_num];\r\n\r\n        /* Count how many duplicated points with same <x,y> in \"points to\" pull ? */\r\n        let int_points_to_pull_start = next_int_point_num;\r\n        let int_points_to_pull_num = intPointsPoolCount(int_points, int_points_to_pull_start, cur_face);\r\n\r\n\r\n        let edge_from = int_point_current.edge_after;\r\n        let edge_to = int_point_next.edge_before;\r\n\r\n        if ((edge_from.bv === INSIDE$1 && edge_to.bv === INSIDE$1 && op === BOOLEAN_UNION) ||\r\n            (edge_from.bv === OUTSIDE$1 && edge_to.bv === OUTSIDE$1 && op === BOOLEAN_INTERSECT) ||\r\n            ((edge_from.bv === OUTSIDE$1 || edge_to.bv === OUTSIDE$1) && op === BOOLEAN_SUBTRACT && !is_res_polygon) ||\r\n            ((edge_from.bv === INSIDE$1 || edge_to.bv === INSIDE$1) && op === BOOLEAN_SUBTRACT && is_res_polygon) ||\r\n            (edge_from.bv === BOUNDARY$1 && edge_to.bv === BOUNDARY$1 && (edge_from.overlap & OVERLAP_SAME$1) && is_res_polygon) ||\r\n            (edge_from.bv === BOUNDARY$1 && edge_to.bv === BOUNDARY$1 && (edge_from.overlap & OVERLAP_OPPOSITE$1))) {\r\n\r\n            polygon.removeChain(cur_face, edge_from, edge_to);\r\n\r\n            /* update all points in \"points from\" pull */\r\n            for (let k = int_points_from_pull_start; k < int_points_from_pull_start + int_points_from_pull_num; k++) {\r\n                int_points[k].edge_after = undefined;\r\n            }\r\n\r\n            /* update all points in \"points to\" pull */\r\n            for (let k = int_points_to_pull_start; k < int_points_to_pull_start + int_points_to_pull_num; k++) {\r\n                int_points[k].edge_before = undefined;\r\n            }\r\n        }\r\n\r\n        /* skip to the last point in \"points from\" group */\r\n        i += int_points_from_pull_num - 1;\r\n    }\r\n}\r\nfunction copyWrkToRes(res_polygon, wrk_polygon, op, int_points)\r\n{\r\n    for (let face of wrk_polygon.faces) {\r\n        for (let edge of face) {\r\n            res_polygon.edges.add(edge);\r\n        }\r\n        // If union - add face from wrk_polygon that is not intersected with res_polygon\r\n        if ( /*(op === BOOLEAN_UNION || op == BOOLEAN_SUBTRACT) &&*/\r\n            int_points.find((ip) => (ip.face === face)) === undefined) {\r\n            res_polygon.addFace(face.first, face.last);\r\n        }\r\n    }\r\n}\r\n\r\nfunction swapLinks(res_polygon, wrk_polygon, intersections)\r\n{\r\n    if (intersections.int_points1.length === 0) return;\r\n\r\n    for (let i = 0; i < intersections.int_points1.length; i++) {\r\n        let int_point1 = intersections.int_points1[i];\r\n        let int_point2 = intersections.int_points2[i];\r\n\r\n        // Simple case - find continuation on the other polygon\r\n\r\n        // Process edge from res_polygon\r\n        if (int_point1.edge_before !== undefined && int_point1.edge_after === undefined) {    // swap need\r\n            if (int_point2.edge_before === undefined && int_point2.edge_after !== undefined) {  // simple case\r\n                // Connect edges\r\n                int_point1.edge_before.next = int_point2.edge_after;\r\n                int_point2.edge_after.prev = int_point1.edge_before;\r\n\r\n                // Fill in missed links in intersection points\r\n                int_point1.edge_after = int_point2.edge_after;\r\n                int_point2.edge_before = int_point1.edge_before;\r\n            }\r\n        }\r\n        // Process edge from wrk_polygon\r\n        if (int_point2.edge_before !== undefined && int_point2.edge_after === undefined) {    // swap need\r\n            if (int_point1.edge_before === undefined && int_point1.edge_after !== undefined) {  // simple case\r\n                // Connect edges\r\n                int_point2.edge_before.next = int_point1.edge_after;\r\n                int_point1.edge_after.prev = int_point2.edge_before;\r\n\r\n                // Complete missed links\r\n                int_point2.edge_after = int_point1.edge_after;\r\n                int_point1.edge_before = int_point2.edge_before;\r\n            }\r\n        }\r\n\r\n        // Continuation not found - complex case\r\n        // Continuation will be found on the same polygon.\r\n        // It happens when intersection point is actually touching point\r\n        // Polygon1\r\n        if (int_point1.edge_before !== undefined && int_point1.edge_after === undefined) {    // still swap need\r\n            for (let int_point of intersections.int_points1_sorted) {\r\n                if (int_point === int_point1) continue;     // skip same\r\n                if (int_point.edge_before === undefined && int_point.edge_after !== undefined) {\r\n                    if (int_point.pt.equalTo(int_point1.pt)) {\r\n                        // Connect edges\r\n                        int_point1.edge_before.next = int_point.edge_after;\r\n                        int_point.edge_after.prev = int_point1.edge_before;\r\n\r\n                        // Complete missed links\r\n                        int_point1.edge_after = int_point.edge_after;\r\n                        int_point.edge_before = int_point1.edge_before;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // Polygon2\r\n        if (int_point2.edge_before !== undefined && int_point2.edge_after === undefined) {    // still swap need\r\n            for (let int_point of intersections.int_points2_sorted) {\r\n                if (int_point === int_point2) continue;     // skip same\r\n                if (int_point.edge_before === undefined && int_point.edge_after !== undefined) {\r\n                    if (int_point.pt.equalTo(int_point2.pt)) {\r\n                        // Connect edges\r\n                        int_point2.edge_before.next = int_point.edge_after;\r\n                        int_point.edge_after.prev = int_point2.edge_before;\r\n\r\n                        // Complete missed links\r\n                        int_point2.edge_after = int_point.edge_after;\r\n                        int_point.edge_before = int_point2.edge_before;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Sanity check that no dead ends left\r\n}\r\n\r\nfunction removeOldFaces(polygon, int_points)\r\n{\r\n    for (let int_point of int_points) {\r\n        polygon.faces.delete(int_point.face);\r\n        int_point.face = undefined;\r\n        if (int_point.edge_before)\r\n            int_point.edge_before.face = undefined;\r\n        if (int_point.edge_after)\r\n            int_point.edge_after.face = undefined;\r\n    }\r\n}\r\n\r\nfunction restoreFaces(polygon, int_points, other_int_points)\r\n{\r\n    // For each intersection point - create new face\r\n    for (let int_point of int_points) {\r\n        if (int_point.edge_before === undefined || int_point.edge_after === undefined)  // completely deleted\r\n            continue;\r\n        if (int_point.face)            // already restored\r\n            continue;\r\n\r\n        if (int_point.edge_after.face || int_point.edge_before.face)        // Face already created. Possible case in duplicated intersection points\r\n            continue;\r\n\r\n        let first = int_point.edge_after;      // face start\r\n        let last = int_point.edge_before;      // face end;\r\n\r\n        LinkedList.testInfiniteLoop(first);    // check and throw error if infinite loop found\r\n\r\n        let face = polygon.addFace(first, last);\r\n\r\n        // Mark intersection points from the newly create face\r\n        // to avoid multiple creation of the same face\r\n        // Face was assigned to each edge of new face in addFace function\r\n        for (let int_point_tmp of int_points) {\r\n            if (int_point_tmp.edge_before && int_point_tmp.edge_after &&\r\n                int_point_tmp.edge_before.face === face && int_point_tmp.edge_after.face === face) {\r\n                int_point_tmp.face = face;\r\n            }\r\n        }\r\n        // Mark other intersection points as well\r\n        for (let int_point_tmp of other_int_points) {\r\n            if (int_point_tmp.edge_before && int_point_tmp.edge_after &&\r\n                int_point_tmp.edge_before.face === face && int_point_tmp.edge_after.face === face) {\r\n                int_point_tmp.face = face;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction removeNotRelevantNotIntersectedFaces(polygon, notIntersectedFaces, op, is_res_polygon)\r\n{\r\n    for (let face of notIntersectedFaces) {\r\n        let rel = face.first.bv;\r\n        if (op === BOOLEAN_UNION && rel === INSIDE$1 ||\r\n            op === BOOLEAN_SUBTRACT && rel === INSIDE$1 && is_res_polygon ||\r\n            op === BOOLEAN_SUBTRACT && rel === OUTSIDE$1 && !is_res_polygon ||\r\n            op === BOOLEAN_INTERSECT && rel === OUTSIDE$1) {\r\n\r\n            polygon.deleteFace(face);\r\n        }\r\n    }\r\n}\r\n\r\nvar BooleanOperations = /*#__PURE__*/Object.freeze({\r\n    BOOLEAN_UNION: BOOLEAN_UNION,\r\n    BOOLEAN_INTERSECT: BOOLEAN_INTERSECT,\r\n    BOOLEAN_SUBTRACT: BOOLEAN_SUBTRACT,\r\n    unify: unify,\r\n    subtract: subtract,\r\n    intersect: intersect,\r\n    innerClip: innerClip,\r\n    outerClip: outerClip,\r\n    calculateIntersections: calculateIntersections,\r\n    removeNotRelevantChains: removeNotRelevantChains,\r\n    removeOldFaces: removeOldFaces,\r\n    restoreFaces: restoreFaces\r\n});\r\n\r\n/*\r\n    Dimensionally extended 9-intersected model\r\n    See https://en.wikipedia.org/wiki/DE-9IM for more details\r\n */\r\n// const DISJOINT = RegExp('FF.FF....');\r\nconst EQUAL = RegExp('T.F..FFF.|T.F...F..');\r\nconst INTERSECT = RegExp('T........|.T.......|...T.....|....T....');\r\nconst TOUCH = RegExp('FT.......|F..T.....|F...T....');\r\nconst INSIDE$2 = RegExp('T.F..F...');\r\nconst COVERED = RegExp('T.F..F...|.TF..F...|..FT.F...|..F.TF...');\r\n\r\nclass DE9IM {\r\n    /**\r\n     * Create new instance of DE9IM matrix\r\n     */\r\n    constructor() {\r\n        /**\r\n         * Array representing 3x3 intersection matrix\r\n         * @type {Shape[]}\r\n         */\r\n        this.m = new Array(9).fill(undefined);\r\n    }\r\n\r\n    /**\r\n     * Get Interior To Interior intersection\r\n     * @returns {Shape[] | undefined}\r\n     */\r\n    get I2I() {\r\n        return this.m[0];\r\n    }\r\n\r\n    /**\r\n     * Set Interior To Interior intersection\r\n     * @param geom\r\n     */\r\n    set I2I(geom) {\r\n        this.m[0] = geom;\r\n    }\r\n\r\n    /**\r\n     * Get Interior To Boundary intersection\r\n     * @returns {Shape[] | undefined}\r\n     */\r\n    get I2B() {\r\n        return this.m[1];\r\n    }\r\n\r\n    /**\r\n     * Set Interior to Boundary intersection\r\n     * @param geomc\r\n     */\r\n    set I2B(geom) {\r\n        this.m[1] = geom;\r\n    }\r\n\r\n    /**\r\n     * Get Interior To Exterior intersection\r\n     * @returns {Shape[] | undefined}\r\n     */\r\n    get I2E() {\r\n        return this.m[2];\r\n    }\r\n\r\n    /**\r\n     * Set Interior to Exterior intersection\r\n     * @param geom\r\n     */\r\n    set I2E(geom) {\r\n        this.m[2] = geom;\r\n    }\r\n\r\n    /**\r\n     * Get Boundary To Interior intersection\r\n     * @returns {Shape[] | undefined}\r\n     */\r\n    get B2I() {\r\n        return this.m[3];\r\n    }\r\n\r\n    /**\r\n     * Set Boundary to Interior intersection\r\n     * @param geom\r\n     */\r\n    set B2I(geom) {\r\n        this.m[3] = geom;\r\n    }\r\n\r\n    /**\r\n     * Get Boundary To Boundary intersection\r\n     * @returns {Shape[] | undefined}\r\n     */\r\n    get B2B() {\r\n        return this.m[4];\r\n    }\r\n\r\n    /**\r\n     * Set Boundary to Boundary intersection\r\n     * @param geom\r\n     */\r\n    set B2B(geom) {\r\n        this.m[4] = geom;\r\n    }\r\n\r\n    /**\r\n     * Get Boundary To Exterior intersection\r\n     * @returns {Shape[] | undefined}\r\n     */\r\n    get B2E() {\r\n        return this.m[5];\r\n    }\r\n\r\n    /**\r\n     * Set Boundary to Exterior intersection\r\n     * @param geom\r\n     */\r\n    set B2E(geom) {\r\n        this.m[5] = geom;\r\n    }\r\n\r\n    /**\r\n     * Get Exterior To Interior intersection\r\n     * @returns {Shape[] | undefined}\r\n     */\r\n    get E2I() {\r\n        return this.m[6];\r\n    }\r\n\r\n    /**\r\n     * Set Exterior to Interior intersection\r\n     * @param geom\r\n     */\r\n    set E2I(geom) {\r\n        this.m[6] = geom;\r\n    }\r\n\r\n    /**\r\n     * Get Exterior To Boundary intersection\r\n     * @returns {Shape[] | undefined}\r\n     */\r\n    get E2B() {\r\n        return this.m[7];\r\n    }\r\n\r\n    /**\r\n     * Set Exterior to Boundary intersection\r\n     * @param geom\r\n     */\r\n    set E2B(geom) {\r\n        this.m[7] = geom;\r\n    }\r\n\r\n    /**\r\n     * Get Exterior to Exterior intersection\r\n     * @returns {Shape[] | undefined}\r\n     */\r\n    get E2E() {\r\n        return this.m[8];\r\n    }\r\n\r\n    /**\r\n     * Set Exterior to Exterior intersection\r\n     * @param geom\r\n     */\r\n    set E2E(geom) {\r\n        this.m[8] = geom;\r\n    }\r\n\r\n    /**\r\n     * Return de9im matrix as string where<br/>\r\n     * - intersection is 'T'<br/>\r\n     * - not intersected is 'F'<br/>\r\n     * - not relevant is '*'<br/>\r\n     * For example, string 'FF**FF****' means 'DISJOINT'\r\n     * @returns {string}\r\n     */\r\n    toString() {\r\n        return this.m.map( e => {\r\n            if (e instanceof Array && e.length > 0) {\r\n                return 'T'\r\n            }\r\n            else if (e instanceof Array && e.length === 0) {\r\n                return 'F'\r\n            }\r\n            else {\r\n                return '*'\r\n            }\r\n        }).join(\"\")\r\n    }\r\n\r\n    equal() {\r\n        return EQUAL.test(this.toString());\r\n    }\r\n\r\n    intersect() {\r\n        return INTERSECT.test(this.toString());\r\n    }\r\n\r\n    touch() {\r\n        return TOUCH.test(this.toString());\r\n    }\r\n\r\n    inside() {\r\n        return INSIDE$2.test(this.toString());\r\n    }\r\n\r\n    covered() {\r\n        return COVERED.test(this.toString());\r\n    }\r\n}\r\n\r\n/**\r\n * Intersection\r\n *\r\n * */\r\n\r\nfunction intersectLine2Line(line1, line2) {\r\n    let ip = [];\r\n\r\n    let [A1, B1, C1] = line1.standard;\r\n    let [A2, B2, C2] = line2.standard;\r\n\r\n    /* Cramer's rule */\r\n    let det = A1 * B2 - B1 * A2;\r\n    let detX = C1 * B2 - B1 * C2;\r\n    let detY = A1 * C2 - C1 * A2;\r\n\r\n    if (!Flatten.Utils.EQ_0(det)) {\r\n        let x, y;\r\n\r\n        if (B1 === 0) {        // vertical line x  = C1/A1, where A1 == +1 or -1\r\n            x = C1/A1;\r\n            y = detY / det;\r\n        }\r\n        else if (B2 === 0) {   // vertical line x = C2/A2, where A2 = +1 or -1\r\n            x = C2/A2;\r\n            y = detY / det;\r\n        }\r\n        else if (A1 === 0) {   // horizontal line y = C1/B1, where B1 = +1 or -1\r\n            x = detX / det;\r\n            y = C1/B1;\r\n        }\r\n        else if (A2 === 0) {   // horizontal line y = C2/B2, where B2 = +1 or -1\r\n            x = detX / det;\r\n            y = C2/B2;\r\n        }\r\n        else {\r\n            x = detX / det;\r\n            y = detY / det;\r\n        }\r\n\r\n        ip.push(new Flatten.Point(x, y));\r\n    }\r\n\r\n    return ip;\r\n}\r\n\r\nfunction intersectLine2Circle(line, circle) {\r\n    let ip = [];\r\n    let prj = circle.pc.projectionOn(line);            // projection of circle center on line\r\n    let dist = circle.pc.distanceTo(prj)[0];           // distance from circle center to projection\r\n\r\n    if (Flatten.Utils.EQ(dist, circle.r)) {            // line tangent to circle - return single intersection point\r\n        ip.push(prj);\r\n    } else if (Flatten.Utils.LT(dist, circle.r)) {       // return two intersection points\r\n        let delta = Math.sqrt(circle.r * circle.r - dist * dist);\r\n        let v_trans, pt;\r\n\r\n        v_trans = line.norm.rotate90CCW().multiply(delta);\r\n        pt = prj.translate(v_trans);\r\n        ip.push(pt);\r\n\r\n        v_trans = line.norm.rotate90CW().multiply(delta);\r\n        pt = prj.translate(v_trans);\r\n        ip.push(pt);\r\n    }\r\n    return ip;\r\n}\r\n\r\nfunction intersectLine2Box(line, box) {\r\n    let ips = [];\r\n    for (let seg of box.toSegments()) {\r\n        let ips_tmp = intersectSegment2Line(seg, line);\r\n        for (let pt of ips_tmp) {\r\n            if (!ptInIntPoints(pt, ips)) {\r\n                ips.push(pt);\r\n            }\r\n        }\r\n    }\r\n    return ips;\r\n}\r\n\r\nfunction intersectLine2Arc(line, arc) {\r\n    let ip = [];\r\n\r\n    if (intersectLine2Box(line, arc.box).length === 0) {\r\n        return ip;\r\n    }\r\n\r\n    let circle = new Flatten.Circle(arc.pc, arc.r);\r\n    let ip_tmp = intersectLine2Circle(line, circle);\r\n    for (let pt of ip_tmp) {\r\n        if (pt.on(arc)) {\r\n            ip.push(pt);\r\n        }\r\n    }\r\n\r\n    return ip;\r\n}\r\n\r\nfunction intersectSegment2Line(seg, line) {\r\n    let ip = [];\r\n\r\n    // Boundary cases\r\n    if (seg.ps.on(line)) {\r\n        ip.push(seg.ps);\r\n    }\r\n    // If both ends lay on line, return two intersection points\r\n    if (seg.pe.on(line) && !seg.isZeroLength()) {\r\n        ip.push(seg.pe);\r\n    }\r\n\r\n    if (ip.length > 0) {\r\n        return ip;          // done, intersection found\r\n    }\r\n\r\n    // If zero-length segment and nothing found, return no intersections\r\n    if (seg.isZeroLength()) {\r\n        return ip;\r\n    }\r\n\r\n    // Not a boundary case, check if both points are on the same side and\r\n    // hence there is no intersection\r\n    if (seg.ps.leftTo(line) && seg.pe.leftTo(line) ||\r\n        !seg.ps.leftTo(line) && !seg.pe.leftTo(line)) {\r\n        return ip;\r\n    }\r\n\r\n    // Calculate intersection between lines\r\n    let line1 = new Flatten.Line(seg.ps, seg.pe);\r\n    return intersectLine2Line(line1, line);\r\n}\r\n\r\nfunction intersectSegment2Segment(seg1, seg2) {\r\n    let ip = [];\r\n\r\n    // quick reject\r\n    if (seg1.box.not_intersect(seg2.box)) {\r\n        return ip;\r\n    }\r\n\r\n    // Special case of seg1 zero length\r\n    if (seg1.isZeroLength()) {\r\n        if (seg1.ps.on(seg2)) {\r\n            ip.push(seg1.ps);\r\n        }\r\n        return ip;\r\n    }\r\n\r\n    // Special case of seg2 zero length\r\n    if (seg2.isZeroLength()) {\r\n        if (seg2.ps.on(seg1)) {\r\n            ip.push(seg2.ps);\r\n        }\r\n        return ip;\r\n    }\r\n\r\n    // Neither seg1 nor seg2 is zero length\r\n    let line1 = new Flatten.Line(seg1.ps, seg1.pe);\r\n    let line2 = new Flatten.Line(seg2.ps, seg2.pe);\r\n\r\n    // Check overlapping between segments in case of incidence\r\n    // If segments touching, add one point. If overlapping, add two points\r\n    if (line1.incidentTo(line2)) {\r\n        if (seg1.ps.on(seg2)) {\r\n            ip.push(seg1.ps);\r\n        }\r\n        if (seg1.pe.on(seg2)) {\r\n            ip.push(seg1.pe);\r\n        }\r\n        if (seg2.ps.on(seg1) && !seg2.ps.equalTo(seg1.ps) && !seg2.ps.equalTo(seg1.pe)) {\r\n            ip.push(seg2.ps);\r\n        }\r\n        if (seg2.pe.on(seg1) && !seg2.pe.equalTo(seg1.ps) && !seg2.pe.equalTo(seg1.pe)) {\r\n            ip.push(seg2.pe);\r\n        }\r\n    } else {                /* not incident - parallel or intersect */\r\n        // Calculate intersection between lines\r\n        let new_ip = intersectLine2Line(line1, line2);\r\n        if (new_ip.length > 0 && new_ip[0].on(seg1) && new_ip[0].on(seg2)) {\r\n            ip.push(new_ip[0]);\r\n        }\r\n\r\n        // Fix missing intersection\r\n        // const tol = 10*Flatten.DP_TOL;\r\n        // if (ip.length === 0 && new_ip.length > 0 && (new_ip[0].distanceTo(seg1)[0] < tol || new_ip[0].distanceTo(seg2)[0] < tol) ) {\r\n        //     if (seg1.start.distanceTo(seg2)[0] < tol) {\r\n        //         ip.push(new_ip[0]);\r\n        //     }\r\n        //     else if (seg1.end.distanceTo(seg2)[0] < tol) {\r\n        //         ip.push(new_ip[0]);\r\n        //     }\r\n        //     else if (seg2.start.distanceTo(seg1)[0] < tol) {\r\n        //         ip.push(new_ip[0]);\r\n        //     }\r\n        //     else if (seg2.end.distanceTo(seg1)[0] < tol) {\r\n        //         ip.push(new_ip[0]);\r\n        //     }\r\n        // }\r\n    }\r\n\r\n    return ip;\r\n}\r\n\r\nfunction intersectSegment2Circle(segment, circle) {\r\n    let ips = [];\r\n\r\n    if (segment.box.not_intersect(circle.box)) {\r\n        return ips;\r\n    }\r\n\r\n    // Special case of zero length segment\r\n    if (segment.isZeroLength()) {\r\n        let [dist, shortest_segment] = segment.ps.distanceTo(circle.pc);\r\n        if (Flatten.Utils.EQ(dist, circle.r)) {\r\n            ips.push(segment.ps);\r\n        }\r\n        return ips;\r\n    }\r\n\r\n    // Non zero-length segment\r\n    let line = new Flatten.Line(segment.ps, segment.pe);\r\n\r\n    let ips_tmp = intersectLine2Circle(line, circle);\r\n\r\n    for (let ip of ips_tmp) {\r\n        if (ip.on(segment)) {\r\n            ips.push(ip);\r\n        }\r\n    }\r\n\r\n    return ips;\r\n}\r\n\r\nfunction intersectSegment2Arc(segment, arc) {\r\n    let ip = [];\r\n\r\n    if (segment.box.not_intersect(arc.box)) {\r\n        return ip;\r\n    }\r\n\r\n    // Special case of zero-length segment\r\n    if (segment.isZeroLength()) {\r\n        if (segment.ps.on(arc)) {\r\n            ip.push(segment.ps);\r\n        }\r\n        return ip;\r\n    }\r\n\r\n    // Non-zero length segment\r\n    let line = new Flatten.Line(segment.ps, segment.pe);\r\n    let circle = new Flatten.Circle(arc.pc, arc.r);\r\n\r\n    let ip_tmp = intersectLine2Circle(line, circle);\r\n\r\n    for (let pt of ip_tmp) {\r\n        if (pt.on(segment) && pt.on(arc)) {\r\n            ip.push(pt);\r\n        }\r\n    }\r\n    return ip;\r\n\r\n}\r\n\r\nfunction intersectSegment2Box(segment, box) {\r\n    let ips = [];\r\n    for (let seg of box.toSegments()) {\r\n        let ips_tmp = intersectSegment2Segment(seg, segment);\r\n        for (let ip of ips_tmp) {\r\n            ips.push(ip);\r\n        }\r\n    }\r\n    return ips;\r\n}\r\n\r\nfunction intersectCircle2Circle(circle1, circle2) {\r\n    let ip = [];\r\n\r\n    if (circle1.box.not_intersect(circle2.box)) {\r\n        return ip;\r\n    }\r\n\r\n    let vec = new Flatten.Vector(circle1.pc, circle2.pc);\r\n\r\n    let r1 = circle1.r;\r\n    let r2 = circle2.r;\r\n\r\n    // Degenerated circle\r\n    if (Flatten.Utils.EQ_0(r1) || Flatten.Utils.EQ_0(r2))\r\n        return ip;\r\n\r\n    // In case of equal circles return one leftmost point\r\n    if (Flatten.Utils.EQ_0(vec.x) && Flatten.Utils.EQ_0(vec.y) && Flatten.Utils.EQ(r1, r2)) {\r\n        ip.push(circle1.pc.translate(-r1, 0));\r\n        return ip;\r\n    }\r\n\r\n    let dist = circle1.pc.distanceTo(circle2.pc)[0];\r\n\r\n    if (Flatten.Utils.GT(dist, r1 + r2))               // circles too far, no intersections\r\n        return ip;\r\n\r\n    if (Flatten.Utils.LT(dist, Math.abs(r1 - r2)))     // one circle is contained within another, no intersections\r\n        return ip;\r\n\r\n    // Normalize vector.\r\n    vec.x /= dist;\r\n    vec.y /= dist;\r\n\r\n    let pt;\r\n\r\n    // Case of touching from outside or from inside - single intersection point\r\n    // TODO: check this specifically not sure if correct\r\n    if (Flatten.Utils.EQ(dist, r1 + r2) || Flatten.Utils.EQ(dist, Math.abs(r1 - r2))) {\r\n        pt = circle1.pc.translate(r1 * vec.x, r1 * vec.y);\r\n        ip.push(pt);\r\n        return ip;\r\n    }\r\n\r\n    // Case of two intersection points\r\n\r\n    // Distance from first center to center of common chord:\r\n    //   a = (r1^2 - r2^2 + d^2) / 2d\r\n    // Separate for better accuracy\r\n    let a = (r1 * r1) / (2 * dist) - (r2 * r2) / (2 * dist) + dist / 2;\r\n\r\n    let mid_pt = circle1.pc.translate(a * vec.x, a * vec.y);\r\n    let h = Math.sqrt(r1 * r1 - a * a);\r\n    // let norm;\r\n\r\n    // norm = vec.rotate90CCW().multiply(h);\r\n    pt = mid_pt.translate(vec.rotate90CCW().multiply(h));\r\n    ip.push(pt);\r\n\r\n    // norm = vec.rotate90CW();\r\n    pt = mid_pt.translate(vec.rotate90CW().multiply(h));\r\n    ip.push(pt);\r\n\r\n    return ip;\r\n}\r\n\r\nfunction intersectCircle2Box(circle, box) {\r\n    let ips = [];\r\n    for (let seg of box.toSegments()) {\r\n        let ips_tmp = intersectSegment2Circle(seg, circle);\r\n        for (let ip of ips_tmp) {\r\n            ips.push(ip);\r\n        }\r\n    }\r\n    return ips;\r\n}\r\n\r\nfunction intersectArc2Arc(arc1, arc2) {\r\n    var ip = [];\r\n\r\n    if (arc1.box.not_intersect(arc2.box)) {\r\n        return ip;\r\n    }\r\n\r\n    // Special case: overlapping arcs\r\n    // May return up to 4 intersection points\r\n    if (arc1.pc.equalTo(arc2.pc) && Flatten.Utils.EQ(arc1.r, arc2.r)) {\r\n        let pt;\r\n\r\n        pt = arc1.start;\r\n        if (pt.on(arc2))\r\n            ip.push(pt);\r\n\r\n        pt = arc1.end;\r\n        if (pt.on(arc2))\r\n            ip.push(pt);\r\n\r\n        pt = arc2.start;\r\n        if (pt.on(arc1)) ip.push(pt);\r\n\r\n        pt = arc2.end;\r\n        if (pt.on(arc1)) ip.push(pt);\r\n\r\n        return ip;\r\n    }\r\n\r\n    // Common case\r\n    let circle1 = new Flatten.Circle(arc1.pc, arc1.r);\r\n    let circle2 = new Flatten.Circle(arc2.pc, arc2.r);\r\n    let ip_tmp = circle1.intersect(circle2);\r\n    for (let pt of ip_tmp) {\r\n        if (pt.on(arc1) && pt.on(arc2)) {\r\n            ip.push(pt);\r\n        }\r\n    }\r\n    return ip;\r\n}\r\n\r\nfunction intersectArc2Circle(arc, circle) {\r\n    let ip = [];\r\n\r\n    if (arc.box.not_intersect(circle.box)) {\r\n        return ip;\r\n    }\r\n\r\n    // Case when arc center incident to circle center\r\n    // Return arc's end points as 2 intersection points\r\n    if (circle.pc.equalTo(arc.pc) && Flatten.Utils.EQ(circle.r, arc.r)) {\r\n        ip.push(arc.start);\r\n        ip.push(arc.end);\r\n        return ip;\r\n    }\r\n\r\n    // Common case\r\n    let circle1 = circle;\r\n    let circle2 = new Flatten.Circle(arc.pc, arc.r);\r\n    let ip_tmp = intersectCircle2Circle(circle1, circle2);\r\n    for (let pt of ip_tmp) {\r\n        if (pt.on(arc)) {\r\n            ip.push(pt);\r\n        }\r\n    }\r\n    return ip;\r\n}\r\n\r\nfunction intersectArc2Box(arc, box) {\r\n    let ips = [];\r\n    for (let seg of box.toSegments()) {\r\n        let ips_tmp = intersectSegment2Arc(seg, arc);\r\n        for (let ip of ips_tmp) {\r\n            ips.push(ip);\r\n        }\r\n    }\r\n    return ips;\r\n}\r\n\r\nfunction intersectEdge2Segment(edge, segment) {\r\n    return edge.isSegment() ? intersectSegment2Segment(edge.shape, segment) : intersectSegment2Arc(segment, edge.shape);\r\n}\r\n\r\nfunction intersectEdge2Arc(edge, arc) {\r\n    return edge.isSegment() ? intersectSegment2Arc(edge.shape, arc) : intersectArc2Arc(edge.shape, arc);\r\n}\r\n\r\nfunction intersectEdge2Line(edge, line) {\r\n    return edge.isSegment() ? intersectSegment2Line(edge.shape, line) : intersectLine2Arc(line, edge.shape);\r\n}\r\n\r\nfunction intersectEdge2Circle(edge, circle) {\r\n    return edge.isSegment() ? intersectSegment2Circle(edge.shape, circle) : intersectArc2Circle(edge.shape, circle);\r\n}\r\n\r\nfunction intersectSegment2Polygon(segment, polygon) {\r\n    let ip = [];\r\n\r\n    for (let edge of polygon.edges) {\r\n        for (let pt of intersectEdge2Segment(edge, segment)) {\r\n            ip.push(pt);\r\n        }\r\n    }\r\n\r\n    return ip;\r\n}\r\n\r\nfunction intersectArc2Polygon(arc, polygon) {\r\n    let ip = [];\r\n\r\n    for (let edge of polygon.edges) {\r\n        for (let pt of intersectEdge2Arc(edge, arc)) {\r\n            ip.push(pt);\r\n        }\r\n    }\r\n\r\n    return ip;\r\n}\r\n\r\nfunction intersectLine2Polygon(line, polygon) {\r\n    let ip = [];\r\n\r\n    if (polygon.isEmpty()) {\r\n        return ip;\r\n    }\r\n\r\n    for (let edge of polygon.edges) {\r\n        for (let pt of intersectEdge2Line(edge, line)) {\r\n            if (!ptInIntPoints(pt, ip)) {\r\n                ip.push(pt);\r\n            }\r\n        }\r\n    }\r\n\r\n    return line.sortPoints(ip);\r\n}\r\n\r\nfunction intersectCircle2Polygon(circle, polygon) {\r\n    let ip = [];\r\n\r\n    if (polygon.isEmpty()) {\r\n        return ip;\r\n    }\r\n\r\n    for (let edge of polygon.edges) {\r\n        for (let pt of intersectEdge2Circle(edge, circle)) {\r\n            ip.push(pt);\r\n        }\r\n    }\r\n\r\n    return ip;\r\n}\r\n\r\nfunction intersectEdge2Edge(edge1, edge2) {\r\n    const shape1 = edge1.shape;\r\n    const shape2 = edge2.shape;\r\n    return edge1.isSegment() ?\r\n        (edge2.isSegment() ? intersectSegment2Segment(shape1, shape2) : intersectSegment2Arc(shape1, shape2)) :\r\n        (edge2.isSegment() ? intersectSegment2Arc(shape2, shape1) : intersectArc2Arc(shape1, shape2));\r\n}\r\n\r\nfunction intersectEdge2Polygon(edge, polygon) {\r\n    let ip = [];\r\n\r\n    if (polygon.isEmpty() || edge.shape.box.not_intersect(polygon.box)) {\r\n        return ip;\r\n    }\r\n\r\n    let resp_edges = polygon.edges.search(edge.shape.box);\r\n\r\n    for (let resp_edge of resp_edges) {\r\n        for (let pt of intersectEdge2Edge(edge, resp_edge)) {\r\n            ip.push(pt);\r\n        }\r\n    }\r\n\r\n    return ip;\r\n}\r\n\r\nfunction intersectPolygon2Polygon(polygon1, polygon2) {\r\n    let ip = [];\r\n\r\n    if (polygon1.isEmpty() || polygon2.isEmpty()) {\r\n        return ip;\r\n    }\r\n\r\n    if (polygon1.box.not_intersect(polygon2.box)) {\r\n        return ip;\r\n    }\r\n\r\n    for (let edge1 of polygon1.edges) {\r\n        for (let pt of intersectEdge2Polygon(edge1, polygon2)) {\r\n            ip.push(pt);\r\n        }\r\n    }\r\n\r\n    return ip;\r\n}\r\n\r\nfunction intersectShape2Polygon(shape, polygon) {\r\n    if (shape instanceof Flatten.Line) {\r\n        return intersectLine2Polygon(shape, polygon);\r\n    }\r\n    else if (shape instanceof Flatten.Segment) {\r\n        return intersectSegment2Polygon(shape, polygon);\r\n    }\r\n    else if (shape instanceof Flatten.Arc) {\r\n        return intersectArc2Polygon(shape, polygon);\r\n    }\r\n    else {\r\n        return [];\r\n    }\r\n}\r\n\r\nfunction ptInIntPoints(new_pt, ip) {\r\n    return ip.some( pt => pt.equalTo(new_pt) )\r\n}\r\n\r\n/**\r\n * Class Multiline represent connected path of [edges]{@link Flatten.Edge}, where each edge may be\r\n * [segment]{@link Flatten.Segment}, [arc]{@link Flatten.Arc}, [line]{@link Flatten.Line} or [ray]{@link Flatten.Ray}\r\n */\r\nclass Multiline extends LinkedList {\r\n    constructor(...args) {\r\n        super();\r\n\r\n        if (args.length === 0) {\r\n            return;\r\n        }\r\n\r\n        if (args.length == 1) {\r\n            if (args[0] instanceof Array) {\r\n                let shapes = args[0];\r\n                if (shapes.length == 0)\r\n                    return;\r\n\r\n                // TODO: more strict validation:\r\n                // there may be only one line\r\n                // only first and last may be rays\r\n                let validShapes = shapes.every((shape) => {\r\n                    return shape instanceof Flatten.Segment ||\r\n                        shape instanceof Flatten.Arc ||\r\n                        shape instanceof Flatten.Ray ||\r\n                        shape instanceof Flatten.Line\r\n                });\r\n\r\n                for (let shape of shapes) {\r\n                    let edge = new Flatten.Edge(shape);\r\n                    this.append(edge);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * (Getter) Return array of edges\r\n     * @returns {Edge[]}\r\n     */\r\n    get edges() {\r\n        return [...this];\r\n    }\r\n\r\n    /**\r\n     * (Getter) Return bounding box of the multiline\r\n     * @returns {Box}\r\n     */\r\n    get box() {\r\n        return this.edges.reduce( (acc,edge) => acc = acc.merge(edge.box), new Flatten.Box() );\r\n    }\r\n\r\n    /**\r\n     * (Getter) Returns array of vertices\r\n     * @returns {Point[]}\r\n     */\r\n    get vertices() {\r\n        let v = this.edges.map(edge => edge.start);\r\n        v.push(this.last.end);\r\n        return v;\r\n    }\r\n\r\n    /**\r\n     * Return new cloned instance of Multiline\r\n     * @returns {Multiline}\r\n     */\r\n    clone() {\r\n        return new Multiline(this.toShapes());\r\n    }\r\n\r\n    /**\r\n     * Split edge and add new vertex, return new edge inserted\r\n     * @param {Point} pt - point on edge that will be added as new vertex\r\n     * @param {Edge} edge - edge to split\r\n     * @returns {Edge}\r\n     */\r\n    addVertex(pt, edge) {\r\n        let shapes = edge.shape.split(pt);\r\n        // if (shapes.length < 2) return;\r\n\r\n        if (shapes[0] === null)   // point incident to edge start vertex, return previous edge\r\n           return edge.prev;\r\n\r\n        if (shapes[1] === null)   // point incident to edge end vertex, return edge itself\r\n           return edge;\r\n\r\n        let newEdge = new Flatten.Edge(shapes[0]);\r\n        let edgeBefore = edge.prev;\r\n\r\n        /* Insert first split edge into linked list after edgeBefore */\r\n        this.insert(newEdge, edgeBefore);     // edge.face ?\r\n\r\n        // Update edge shape with second split edge keeping links\r\n        edge.shape = shapes[1];\r\n\r\n        return newEdge;\r\n    }\r\n\r\n    /**\r\n     * Split edges of multiline with intersection points and return mutated multiline\r\n     * @param {Point[]} ip - array of points to be added as new vertices\r\n     * @returns {Multiline}\r\n     */\r\n    split(ip) {\r\n        for (let pt of ip) {\r\n            let edge = this.findEdgeByPoint(pt);\r\n            this.addVertex(pt, edge);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns edge which contains given point\r\n     * @param {Point} pt\r\n     * @returns {Edge}\r\n     */\r\n    findEdgeByPoint(pt) {\r\n        let edgeFound;\r\n        for (let edge of this) {\r\n            if (edge.shape.contains(pt)) {\r\n                edgeFound = edge;\r\n                break;\r\n            }\r\n        }\r\n        return edgeFound;\r\n    }\r\n\r\n    /**\r\n     * Returns new multiline translated by vector vec\r\n     * @param {Vector} vec\r\n     * @returns {Multiline}\r\n     */\r\n    translate(vec) {\r\n        return new Multiline(this.edges.map( edge => edge.shape.translate(vec)));\r\n    }\r\n\r\n    /**\r\n     * Return new multiline rotated by given angle around given point\r\n     * If point omitted, rotate around origin (0,0)\r\n     * Positive value of angle defines rotation counter clockwise, negative - clockwise\r\n     * @param {number} angle - rotation angle in radians\r\n     * @param {Point} center - rotation center, default is (0,0)\r\n     * @returns {Multiline} - new rotated polygon\r\n     */\r\n    rotate(angle = 0, center = new Flatten.Point()) {\r\n        return new Multiline(this.edges.map( edge => edge.shape.rotate(angle, center) ));\r\n    }\r\n\r\n    /**\r\n     * Return new multiline transformed using affine transformation matrix\r\n     * Method does not support unbounded shapes\r\n     * @param {Matrix} matrix - affine transformation matrix\r\n     * @returns {Multiline} - new multiline\r\n     */\r\n    transform(matrix = new Flatten.Matrix()) {\r\n        return new Multiline(this.edges.map( edge => edge.shape.transform(matrix)));\r\n    }\r\n\r\n    /**\r\n     * Transform multiline into array of shapes\r\n     * @returns {Shape[]}\r\n     */\r\n    toShapes() {\r\n        return this.edges.map(edge => edge.shape.clone())\r\n    }\r\n\r\n    /**\r\n     * This method returns an object that defines how data will be\r\n     * serialized when called JSON.stringify() method\r\n     * @returns {Object}\r\n     */\r\n    toJSON() {\r\n        return this.edges.map(edge => edge.toJSON());\r\n    }\r\n\r\n    /**\r\n     * Return string to draw multiline in svg\r\n     * @param attrs  - an object with attributes for svg path element,\r\n     * like \"stroke\", \"strokeWidth\", \"fill\", \"fillRule\", \"fillOpacity\"\r\n     * Defaults are stroke:\"black\", strokeWidth:\"1\", fill:\"lightcyan\", fillRule:\"evenodd\", fillOpacity: \"1\"\r\n     * TODO: support semi-infinite Ray and infinite Line\r\n     * @returns {string}\r\n     */\r\n    svg(attrs = {}) {\r\n        let {stroke, strokeWidth, fill, fillRule, fillOpacity, id, className} = attrs;\r\n        let id_str = (id && id.length > 0) ? `id=\"${id}\"` : \"\";\r\n        let class_str = (className && className.length > 0) ? `class=\"${className}\"` : \"\";\r\n\r\n        let svgStr = `\\n<path stroke=\"${stroke || \"black\"}\" stroke-width=\"${strokeWidth || 1}\" fill=\"${fill || \"none\"}\" fill-opacity=\"${fillOpacity || 1.0}\" ${id_str} ${class_str} d=\"`;\r\n        svgStr += `\\nM${this.first.start.x},${this.first.start.y}`;\r\n        for (let edge of this) {\r\n            svgStr += edge.svg();\r\n        }\r\n        svgStr += `\" >\\n</path>`;\r\n\r\n        return svgStr;\r\n    }\r\n}\r\n\r\nFlatten.Multiline = Multiline;\r\n\r\n/**\r\n * Shortcut function to create multiline\r\n * @param args\r\n */\r\nconst multiline = (...args) => new Flatten.Multiline(...args);\r\nFlatten.multiline = multiline;\r\n\r\n/**\r\n * @module RayShoot\r\n */\r\n/**\r\n * Implements ray shooting algorithm. Returns relation between point and polygon: inside, outside or boundary\r\n * @param {Polygon} polygon - polygon to test\r\n * @param {Point} point - point to test\r\n * @returns {INSIDE|OUTSIDE|BOUNDARY}\r\n */\r\nfunction ray_shoot(polygon, point) {\r\n    let contains = undefined;\r\n\r\n    // 1. Quick reject\r\n    // if (polygon.box.not_intersect(point.box)) {\r\n    //     return Flatten.OUTSIDE;\r\n    // }\r\n\r\n    let ray = new Flatten.Ray(point);\r\n    let line = new Flatten.Line(ray.pt, ray.norm);\r\n\r\n    // 2. Locate relevant edges of the polygon\r\n    const searchBox = new Flatten.Box(\r\n        ray.box.xmin-Flatten.DP_TOL, ray.box.ymin-Flatten.DP_TOL,\r\n        ray.box.xmax, ray.box.ymax+Flatten.DP_TOL\r\n    );\r\n\r\n    if (polygon.box.not_intersect(searchBox)) {\r\n        return Flatten.OUTSIDE;\r\n    }\r\n\r\n    let resp_edges = polygon.edges.search(searchBox);\r\n\r\n    if (resp_edges.length == 0) {\r\n        return Flatten.OUTSIDE;\r\n    }\r\n\r\n    // 2.5 Check if boundary\r\n    for (let edge of resp_edges) {\r\n        if (edge.shape.contains(point)) {\r\n            return Flatten.BOUNDARY;\r\n        }\r\n    }\r\n\r\n    // 3. Calculate intersections\r\n    let intersections = [];\r\n    for (let edge of resp_edges) {\r\n        for (let ip of ray.intersect(edge.shape)) {\r\n\r\n            // If intersection is equal to query point then point lays on boundary\r\n            if (ip.equalTo(point)) {\r\n                return Flatten.BOUNDARY;\r\n            }\r\n\r\n            intersections.push({\r\n                pt: ip,\r\n                edge: edge\r\n            });\r\n        }\r\n    }\r\n\r\n    // 4. Sort intersection in x-ascending order\r\n    intersections.sort((i1, i2) => {\r\n        if (LT(i1.pt.x, i2.pt.x)) {\r\n            return -1;\r\n        }\r\n        if (GT(i1.pt.x, i2.pt.x)) {\r\n            return 1;\r\n        }\r\n        return 0;\r\n    });\r\n\r\n    // 5. Count real intersections, exclude touching\r\n    let counter = 0;\r\n\r\n    for (let i = 0; i < intersections.length; i++) {\r\n        let intersection = intersections[i];\r\n        if (intersection.pt.equalTo(intersection.edge.shape.start)) {\r\n            /* skip same point between same edges if already counted */\r\n            if (i > 0 && intersection.pt.equalTo(intersections[i - 1].pt) &&\r\n                intersection.edge.prev === intersections[i - 1].edge) {\r\n                continue;\r\n            }\r\n            let prev_edge = intersection.edge.prev;\r\n            while (EQ_0(prev_edge.length)) {\r\n                prev_edge = prev_edge.prev;\r\n            }\r\n            let prev_tangent = prev_edge.shape.tangentInEnd();\r\n            let prev_point = intersection.pt.translate(prev_tangent);\r\n\r\n            let cur_tangent = intersection.edge.shape.tangentInStart();\r\n            let cur_point = intersection.pt.translate(cur_tangent);\r\n\r\n            let prev_on_the_left = prev_point.leftTo(line);\r\n            let cur_on_the_left = cur_point.leftTo(line);\r\n\r\n            if ((prev_on_the_left && !cur_on_the_left) || (!prev_on_the_left && cur_on_the_left)) {\r\n                counter++;\r\n            }\r\n        } else if (intersection.pt.equalTo(intersection.edge.shape.end)) {\r\n            /* skip same point between same edges if already counted */\r\n            if (i > 0 && intersection.pt.equalTo(intersections[i - 1].pt) &&\r\n                intersection.edge.next === intersections[i - 1].edge) {\r\n                continue;\r\n            }\r\n            let next_edge = intersection.edge.next;\r\n            while (EQ_0(next_edge.length)) {\r\n                next_edge = next_edge.next;\r\n            }\r\n            let next_tangent = next_edge.shape.tangentInStart();\r\n            let next_point = intersection.pt.translate(next_tangent);\r\n\r\n            let cur_tangent = intersection.edge.shape.tangentInEnd();\r\n            let cur_point = intersection.pt.translate(cur_tangent);\r\n\r\n            let next_on_the_left = next_point.leftTo(line);\r\n            let cur_on_the_left = cur_point.leftTo(line);\r\n\r\n            if ((next_on_the_left && !cur_on_the_left) || (!next_on_the_left && cur_on_the_left)) {\r\n                counter++;\r\n            }\r\n        } else {        /* intersection point is not a coincident with a vertex */\r\n            if (intersection.edge.shape instanceof Flatten.Segment) {\r\n                counter++;\r\n            } else {\r\n                /* Check if ray does not touch the curve in the extremal (top or bottom) point */\r\n                let box = intersection.edge.shape.box;\r\n                if (!(EQ(intersection.pt.y, box.ymin) ||\r\n                    EQ(intersection.pt.y, box.ymax))) {\r\n                    counter++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // 6. Odd or even?\r\n    contains = counter % 2 == 1 ? INSIDE : OUTSIDE;\r\n\r\n    return contains;\r\n}\r\n\r\n/*\r\n    Calculate relationship between two shapes and return result in the form of\r\n    Dimensionally Extended nine-Intersection Matrix (https://en.wikipedia.org/wiki/DE-9IM)\r\n */\r\n\r\n/**\r\n * Returns true if shapes are topologically equal:  their interiors intersect and\r\n * no part of the interior or boundary of one geometry intersects the exterior of the other\r\n * @param shape1\r\n * @param shape2\r\n * @returns {boolean}\r\n */\r\nfunction equal(shape1, shape2) {\r\n    return relate(shape1, shape2).equal();\r\n}\r\n\r\n/**\r\n * Returns true if shapes have at least one point in common, same as \"not disjoint\"\r\n * @param shape1\r\n * @param shape2\r\n * @returns {boolean}\r\n */\r\nfunction intersect$1(shape1, shape2) {\r\n    return relate(shape1, shape2).intersect();\r\n}\r\n\r\n/**\r\n * Returns true if shapes have at least one point in common, but their interiors do not intersect\r\n * @param shape1\r\n * @param shape2\r\n * @returns {boolean}\r\n */\r\nfunction touch(shape1, shape2) {\r\n    return relate(shape1, shape2).touch();\r\n}\r\n\r\n/**\r\n * Returns true if shapes have no points in common neither in interior nor in boundary\r\n * @param shape1\r\n * @param shape2\r\n * @returns {boolean}\r\n */\r\nfunction disjoint(shape1, shape2) {\r\n    return !intersect$1(shape1, shape2);\r\n}\r\n\r\n/**\r\n * Returns true shape1 lies in the interior of shape2\r\n * @param shape1\r\n * @param shape2\r\n * @returns {boolean}\r\n */\r\nfunction inside(shape1, shape2) {\r\n    return relate(shape1, shape2).inside();\r\n}\r\n\r\n/**\r\n * Returns true if every point in shape1 lies in the interior or on the boundary of shape2\r\n * @param shape1\r\n * @param shape2\r\n * @returns {boolean}\r\n */\r\nfunction covered(shape1, shape2) {\r\n    return  relate(shape1, shape2).covered();\r\n}\r\n\r\n/**\r\n * Returns true shape1's interior contains shape2 <br/>\r\n * Same as inside(shape2, shape1)\r\n * @param shape1\r\n * @param shape2\r\n * @returns {boolean}\r\n */\r\nfunction contain(shape1, shape2) {\r\n    return inside(shape2, shape1);\r\n}\r\n\r\n/**\r\n * Returns true shape1's cover shape2, same as shape2 covered by shape1\r\n * @param shape1\r\n * @param shape2\r\n * @returns {boolean}\r\n */\r\nfunction cover(shape1, shape2) {\r\n    return covered(shape2, shape1);\r\n}\r\n\r\n/**\r\n * Returns relation between two shapes as intersection 3x3 matrix, where each\r\n * element contains relevant intersection as array of shapes.\r\n * If there is no intersection, element contains empty array\r\n * If intersection is irrelevant it left undefined. (For example, intersection\r\n * between two exteriors is usually irrelevant)\r\n * @param shape1\r\n * @param shape2\r\n * @returns {DE9IM}\r\n */\r\nfunction relate(shape1, shape2) {\r\n    if (shape1 instanceof Flatten.Line && shape2 instanceof Flatten.Line) {\r\n        return relateLine2Line(shape1,  shape2);\r\n    }\r\n    else if (shape1 instanceof Flatten.Line && shape2 instanceof Flatten.Circle) {\r\n        return relateLine2Circle(shape1, shape2);\r\n    }\r\n    else if (shape1 instanceof Flatten.Line && shape2 instanceof Flatten.Box) {\r\n        return relateLine2Box(shape1, shape2);\r\n    }\r\n    else if ( shape1 instanceof Flatten.Line  && shape2 instanceof Flatten.Polygon) {\r\n        return relateLine2Polygon(shape1, shape2);\r\n    }\r\n    else if ( (shape1 instanceof Flatten.Segment || shape1 instanceof Flatten.Arc)  && shape2 instanceof Flatten.Polygon) {\r\n        return relateShape2Polygon(shape1, shape2);\r\n    }\r\n    else if ( (shape1 instanceof Flatten.Segment || shape1 instanceof Flatten.Arc)  &&\r\n        (shape2 instanceof Flatten.Circle || shape2 instanceof Flatten.Box) ) {\r\n        return relateShape2Polygon(shape1, new Flatten.Polygon(shape2));\r\n    }\r\n    else if (shape1 instanceof Flatten.Polygon && shape2 instanceof Flatten.Polygon) {\r\n        return relatePolygon2Polygon(shape1, shape2);\r\n    }\r\n    else if ((shape1 instanceof Flatten.Circle || shape1 instanceof Flatten.Box) &&\r\n        (shape2 instanceof  Flatten.Circle || shape2 instanceof Flatten.Box)) {\r\n        return relatePolygon2Polygon(new Flatten.Polygon(shape1), new Flatten.Polygon(shape2));\r\n    }\r\n    else if ((shape1 instanceof Flatten.Circle || shape1 instanceof Flatten.Box) && shape2 instanceof Flatten.Polygon) {\r\n        return relatePolygon2Polygon(new Flatten.Polygon(shape1), shape2);\r\n    }\r\n    else if (shape1 instanceof Flatten.Polygon && (shape2 instanceof Flatten.Circle || shape2 instanceof Flatten.Box)) {\r\n        return relatePolygon2Polygon(shape1, new Flatten.Polygon(shape2));\r\n    }\r\n}\r\n\r\nfunction relateLine2Line(line1, line2) {\r\n    let denim = new DE9IM();\r\n    let ip = intersectLine2Line(line1, line2);\r\n    if (ip.length === 0) {       // parallel or equal ?\r\n        if (line1.contains(line2.pt) && line2.contains(line1.pt)) {\r\n            denim.I2I = [line1];   // equal  'T.F...F..'  - no boundary\r\n            denim.I2E = [];\r\n            denim.E2I = [];\r\n        }\r\n        else {                     // parallel - disjoint 'FFTFF*T**'\r\n            denim.I2I = [];\r\n            denim.I2E = [line1];\r\n            denim.E2I = [line2];\r\n        }\r\n    }\r\n    else {                       // intersect   'T********'\r\n        denim.I2I = ip;\r\n        denim.I2E = line1.split(ip);\r\n        denim.E2I = line2.split(ip);\r\n    }\r\n    return denim;\r\n}\r\n\r\nfunction relateLine2Circle(line,circle) {\r\n    let denim = new DE9IM();\r\n    let ip = intersectLine2Circle(line, circle);\r\n    if (ip.length === 0) {\r\n        denim.I2I = [];\r\n        denim.I2B = [];\r\n        denim.I2E = [line];\r\n        denim.E2I = [circle];\r\n    }\r\n    else if (ip.length === 1) {\r\n        denim.I2I = [];\r\n        denim.I2B = ip;\r\n        denim.I2E = line.split(ip);\r\n\r\n        denim.E2I = [circle];\r\n    }\r\n    else {       // ip.length == 2\r\n        let multiline = new Multiline([line]);\r\n        let ip_sorted = line.sortPoints(ip);\r\n        multiline.split(ip_sorted);\r\n        let splitShapes = multiline.toShapes();\r\n\r\n        denim.I2I = [splitShapes[1]];\r\n        denim.I2B = ip_sorted;\r\n        denim.I2E = [splitShapes[0], splitShapes[2]];\r\n\r\n        denim.E2I = new Flatten.Polygon([circle.toArc()]).cut(multiline);\r\n    }\r\n\r\n    return denim;\r\n}\r\n\r\nfunction relateLine2Box(line, box) {\r\n    let denim = new DE9IM();\r\n    let ip = intersectLine2Box(line, box);\r\n    if (ip.length === 0) {\r\n        denim.I2I = [];\r\n        denim.I2B = [];\r\n        denim.I2E = [line];\r\n\r\n        denim.E2I = [box];\r\n    }\r\n    else if (ip.length === 1) {\r\n        denim.I2I = [];\r\n        denim.I2B = ip;\r\n        denim.I2E = line.split(ip);\r\n\r\n        denim.E2I = [box];\r\n    }\r\n    else {                     // ip.length == 2\r\n        let multiline = new Multiline([line]);\r\n        let ip_sorted = line.sortPoints(ip);\r\n        multiline.split(ip_sorted);\r\n        let splitShapes = multiline.toShapes();\r\n\r\n        /* Are two intersection points on the same segment of the box boundary ? */\r\n        if (box.toSegments().some( segment => segment.contains(ip[0]) && segment.contains(ip[1]) )) {\r\n            denim.I2I = [];                         // case of touching\r\n            denim.I2B = [splitShapes[1]];\r\n            denim.I2E = [splitShapes[0], splitShapes[2]];\r\n\r\n            denim.E2I = [box];\r\n        }\r\n        else {                                       // case of intersection\r\n            denim.I2I = [splitShapes[1]];            // [segment(ip[0], ip[1])];\r\n            denim.I2B = ip_sorted;\r\n            denim.I2E = [splitShapes[0], splitShapes[2]];\r\n\r\n            denim.E2I = new Flatten.Polygon(box.toSegments()).cut(multiline);\r\n        }\r\n    }\r\n    return denim;\r\n}\r\n\r\nfunction relateLine2Polygon(line, polygon) {\r\n    let denim = new DE9IM();\r\n    let ip = intersectLine2Polygon(line, polygon);\r\n    let multiline = new Multiline([line]);\r\n    let ip_sorted = ip.length > 0 ? ip.slice() : line.sortPoints(ip);\r\n\r\n    multiline.split(ip_sorted);\r\n\r\n    [...multiline].forEach(edge => edge.setInclusion(polygon));\r\n\r\n    denim.I2I = [...multiline].filter(edge => edge.bv === Flatten.INSIDE).map(edge => edge.shape);\r\n    denim.I2B = [...multiline].slice(1).map( (edge) => edge.bv === Flatten.BOUNDARY ? edge.shape : edge.shape.start );\r\n    denim.I2E = [...multiline].filter(edge => edge.bv === Flatten.OUTSIDE).map(edge => edge.shape);\r\n\r\n    denim.E2I = polygon.cut(multiline);\r\n\r\n    return denim;\r\n}\r\n\r\nfunction relateShape2Polygon(shape, polygon) {\r\n    let denim = new DE9IM();\r\n    let ip = intersectShape2Polygon(shape, polygon);\r\n    let ip_sorted = ip.length > 0 ? ip.slice() : shape.sortPoints(ip);\r\n\r\n    let multiline = new Multiline([shape]);\r\n    multiline.split(ip_sorted);\r\n\r\n    [...multiline].forEach(edge => edge.setInclusion(polygon));\r\n\r\n    denim.I2I = [...multiline].filter(edge => edge.bv === Flatten.INSIDE).map(edge => edge.shape);\r\n    denim.I2B = [...multiline].slice(1).map( (edge) => edge.bv === Flatten.BOUNDARY ? edge.shape : edge.shape.start );\r\n    denim.I2E = [...multiline].filter(edge => edge.bv === Flatten.OUTSIDE).map(edge => edge.shape);\r\n\r\n\r\n    denim.B2I = [];\r\n    denim.B2B = [];\r\n    denim.B2E = [];\r\n    for (let pt of [shape.start, shape.end]) {\r\n        switch (ray_shoot(polygon, pt)) {\r\n            case Flatten.INSIDE:\r\n                denim.B2I.push(pt);\r\n                break;\r\n            case Flatten.BOUNDARY:\r\n                denim.B2B.push(pt);\r\n                break;\r\n            case Flatten.OUTSIDE:\r\n                denim.B2E.push(pt);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    // denim.E2I  TODO: calculate, not clear what is expected result\r\n\r\n    return denim;\r\n}\r\n\r\nfunction relatePolygon2Polygon(polygon1, polygon2) {\r\n    let denim = new DE9IM();\r\n\r\n    let [ip_sorted1, ip_sorted2] = calculateIntersections(polygon1, polygon2);\r\n    let boolean_intersection = intersect(polygon1, polygon2);\r\n    let boolean_difference1 = subtract(polygon1, polygon2);\r\n    let boolean_difference2 = subtract(polygon2, polygon1);\r\n    let [inner_clip_shapes1, inner_clip_shapes2] = innerClip(polygon1, polygon2);\r\n    let outer_clip_shapes1 = outerClip(polygon1, polygon2);\r\n    let outer_clip_shapes2 = outerClip(polygon2, polygon1);\r\n\r\n    denim.I2I = boolean_intersection.isEmpty() ? [] : [boolean_intersection];\r\n    denim.I2B = inner_clip_shapes2;\r\n    denim.I2E = boolean_difference1.isEmpty() ? [] : [boolean_difference1];\r\n\r\n    denim.B2I = inner_clip_shapes1;\r\n    denim.B2B = ip_sorted1;\r\n    denim.B2E = outer_clip_shapes1;\r\n\r\n    denim.E2I = boolean_difference2.isEmpty() ? [] : [boolean_difference2];\r\n    denim.E2B = outer_clip_shapes2;\r\n    // denim.E2E    not relevant meanwhile\r\n\r\n    return denim;\r\n}\r\n\r\nvar Relations = /*#__PURE__*/Object.freeze({\r\n    equal: equal,\r\n    intersect: intersect$1,\r\n    touch: touch,\r\n    disjoint: disjoint,\r\n    inside: inside,\r\n    covered: covered,\r\n    contain: contain,\r\n    cover: cover,\r\n    relate: relate\r\n});\r\n\r\n/**\r\n * Class representing an affine transformation 3x3 matrix:\r\n * <pre>\r\n *      [ a  c  tx\r\n * A =    b  d  ty\r\n *        0  0  1  ]\r\n * </pre\r\n * @type {Matrix}\r\n */\r\nclass Matrix {\r\n    /**\r\n     * Construct new instance of affine transformation matrix <br/>\r\n     * If parameters omitted, construct identity matrix a = 1, d = 1\r\n     * @param {number} a - position(0,0)   sx*cos(alpha)\r\n     * @param {number} b - position (0,1)  sx*sin(alpha)\r\n     * @param {number} c - position (1,0)  -sy*sin(alpha)\r\n     * @param {number} d - position (1,1)  sy*cos(alpha)\r\n     * @param {number} tx - position (2,0) translation by x\r\n     * @param {number} ty - position (2,1) translation by y\r\n     */\r\n    constructor(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0) {\r\n        this.a = a;\r\n        this.b = b;\r\n        this.c = c;\r\n        this.d = d;\r\n        this.tx = tx;\r\n        this.ty = ty;\r\n    }\r\n\r\n    /**\r\n     * Return new cloned instance of matrix\r\n     * @return {Matrix}\r\n     **/\r\n    clone() {\r\n        return new Matrix(this.a, this.b, this.c, this.d, this.tx, this.ty);\r\n    };\r\n\r\n    /**\r\n     * Transform vector [x,y] using transformation matrix. <br/>\r\n     * Vector [x,y] is an abstract array[2] of numbers and not a FlattenJS object <br/>\r\n     * The result is also an abstract vector [x',y'] = A * [x,y]:\r\n     * <code>\r\n     * [x'       [ ax + by + tx\r\n     *  y'   =     cx + dy + ty\r\n     *  1]                    1 ]\r\n     * </code>\r\n     * @param {number[]} vector - array[2] of numbers\r\n     * @returns {number[]} transformation result - array[2] of numbers\r\n     */\r\n    transform(vector) {\r\n        return [\r\n            vector[0] * this.a + vector[1] * this.c + this.tx,\r\n            vector[0] * this.b + vector[1] * this.d + this.ty\r\n        ]\r\n    };\r\n\r\n    /**\r\n     * Returns result of multiplication of this matrix by other matrix\r\n     * @param {Matrix} other_matrix - matrix to multiply by\r\n     * @returns {Matrix}\r\n     */\r\n    multiply(other_matrix) {\r\n        return new Matrix(\r\n            this.a * other_matrix.a + this.c * other_matrix.b,\r\n            this.b * other_matrix.a + this.d * other_matrix.b,\r\n            this.a * other_matrix.c + this.c * other_matrix.d,\r\n            this.b * other_matrix.c + this.d * other_matrix.d,\r\n            this.a * other_matrix.tx + this.c * other_matrix.ty + this.tx,\r\n            this.b * other_matrix.tx + this.d * other_matrix.ty + this.ty\r\n        )\r\n    };\r\n\r\n    /**\r\n     * Return new matrix as a result of multiplication of the current matrix\r\n     * by the matrix(1,0,0,1,tx,ty)\r\n     * @param {number} tx - translation by x\r\n     * @param {number} ty - translation by y\r\n     * @returns {Matrix}\r\n     */\r\n    translate(...args) {\r\n        let tx, ty;\r\n        if (args.length == 1 && (args[0] instanceof Flatten.Vector)) {\r\n            tx = args[0].x;\r\n            ty = args[0].y;\r\n        } else if (args.length == 2 && typeof (args[0]) == \"number\" && typeof (args[1]) == \"number\") {\r\n            tx = args[0];\r\n            ty = args[1];\r\n        } else {\r\n            throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n        }\r\n        return this.multiply(new Matrix(1, 0, 0, 1, tx, ty))\r\n    };\r\n\r\n    /**\r\n     * Return new matrix as a result of multiplication of the current matrix\r\n     * by the matrix that defines rotation by given angle (in radians) around\r\n     * point (0,0) in counter clockwise direction\r\n     * @param {number} angle - angle in radians\r\n     * @returns {Matrix}\r\n     */\r\n    rotate(angle) {\r\n        let cos = Math.cos(angle);\r\n        let sin = Math.sin(angle);\r\n        return this.multiply(new Matrix(cos, sin, -sin, cos, 0, 0));\r\n    };\r\n\r\n    /**\r\n     * Return new matrix as a result of multiplication of the current matrix\r\n     * by the matrix (sx,0,0,sy,0,0) that defines scaling\r\n     * @param {number} sx\r\n     * @param {number} sy\r\n     * @returns {Matrix}\r\n     */\r\n    scale(sx, sy) {\r\n        return this.multiply(new Matrix(sx, 0, 0, sy, 0, 0));\r\n    };\r\n\r\n    /**\r\n     * Returns true if two matrix are equal parameter by parameter\r\n     * @param {Matrix} matrix - other matrix\r\n     * @returns {boolean} true if equal, false otherwise\r\n     */\r\n    equalTo(matrix) {\r\n        if (!Flatten.Utils.EQ(this.tx, matrix.tx)) return false;\r\n        if (!Flatten.Utils.EQ(this.ty, matrix.ty)) return false;\r\n        if (!Flatten.Utils.EQ(this.a, matrix.a)) return false;\r\n        if (!Flatten.Utils.EQ(this.b, matrix.b)) return false;\r\n        if (!Flatten.Utils.EQ(this.c, matrix.c)) return false;\r\n        if (!Flatten.Utils.EQ(this.d, matrix.d)) return false;\r\n        return true;\r\n    };\r\n}\r\nFlatten.Matrix = Matrix;\r\n/**\r\n * Function to create matrix equivalent to \"new\" constructor\r\n * @param args\r\n */\r\nconst matrix = (...args) => new Flatten.Matrix(...args);\r\nFlatten.matrix = matrix;\r\n\r\n/**\r\n * Created by Alex Bol on 4/1/2017.\r\n */\r\n\r\n/**\r\n * Interval is a pair of numbers or a pair of any comparable objects on which may be defined predicates\r\n * *equal*, *less* and method *max(p1, p1)* that returns maximum in a pair.\r\n * When interval is an object rather than pair of numbers, this object should have properties *low*, *high*, *max*\r\n * and implement methods *less_than(), equal_to(), intersect(), not_intersect(), clone(), output()*.\r\n * Two static methods *comparable_max(), comparable_less_than()* define how to compare values in pair. <br/>\r\n * This interface is described in typescript definition file *index.d.ts*\r\n *\r\n * Axis aligned rectangle is an example of such interval.\r\n * We may look at rectangle as an interval between its low left and top right corners.\r\n * See **Box** class in [flatten-js](https://github.com/alexbol99/flatten-js) library as the example\r\n * of Interval interface implementation\r\n * @type {Interval}\r\n */\r\nconst Interval = class Interval {\r\n    /**\r\n     * Accept two comparable values and creates new instance of interval\r\n     * Predicate Interval.comparable_less(low, high) supposed to return true on these values\r\n     * @param low\r\n     * @param high\r\n     */\r\n    constructor(low, high) {\r\n        this.low = low;\r\n        this.high = high;\r\n    }\r\n\r\n    /**\r\n     * Clone interval\r\n     * @returns {Interval}\r\n     */\r\n    clone() {\r\n        return new Interval(this.low, this.high);\r\n    }\r\n\r\n    /**\r\n     * Propery max returns clone of this interval\r\n     * @returns {Interval}\r\n     */\r\n    get max() {\r\n        return this.clone();   // this.high;\r\n    }\r\n\r\n    /**\r\n     * Predicate returns true is this interval less than other interval\r\n     * @param other_interval\r\n     * @returns {boolean}\r\n     */\r\n    less_than(other_interval) {\r\n        return this.low < other_interval.low ||\r\n            this.low == other_interval.low && this.high < other_interval.high;\r\n    }\r\n\r\n    /**\r\n     * Predicate returns true is this interval equals to other interval\r\n     * @param other_interval\r\n     * @returns {boolean}\r\n     */\r\n    equal_to(other_interval) {\r\n        return this.low == other_interval.low && this.high == other_interval.high;\r\n    }\r\n\r\n    /**\r\n     * Predicate returns true if this interval intersects other interval\r\n     * @param other_interval\r\n     * @returns {boolean}\r\n     */\r\n    intersect(other_interval) {\r\n        return !this.not_intersect(other_interval);\r\n    }\r\n\r\n    /**\r\n     * Predicate returns true if this interval does not intersect other interval\r\n     * @param other_interval\r\n     * @returns {boolean}\r\n     */\r\n    not_intersect(other_interval) {\r\n        return (this.high < other_interval.low || other_interval.high < this.low);\r\n    }\r\n\r\n    /**\r\n     * Returns new interval merged with other interval\r\n     * @param {Interval} interval - Other interval to merge with\r\n     * @returns {Interval}\r\n     */\r\n    merge(other_interval) {\r\n        return new Interval(\r\n            this.low === undefined ? other_interval.low : Math.min(this.low, other_interval.low),\r\n            this.high === undefined ? other_interval.high : Math.max(this.high, other_interval.high)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns how key should return\r\n     */\r\n    output() {\r\n        return [this.low, this.high];\r\n    }\r\n\r\n    /**\r\n     * Function returns maximum between two comparable values\r\n     * @param interval1\r\n     * @param interval2\r\n     * @returns {Interval}\r\n     */\r\n    static comparable_max(interval1, interval2) {\r\n        return interval1.merge(interval2);\r\n    }\r\n\r\n    /**\r\n     * Predicate returns true if first value less than second value\r\n     * @param val1\r\n     * @param val2\r\n     * @returns {boolean}\r\n     */\r\n    static comparable_less_than(val1, val2 ) {\r\n        return val1 < val2;\r\n    }\r\n};\r\n\r\n/**\r\n * Created by Alex Bol on 3/28/2017.\r\n */\r\n\r\n// module.exports = {\r\n//     RB_TREE_COLOR_RED: 0,\r\n//     RB_TREE_COLOR_BLACK: 1\r\n// };\r\n\r\nconst RB_TREE_COLOR_RED = 0;\r\nconst RB_TREE_COLOR_BLACK = 1;\r\n\r\n/**\r\n * Created by Alex Bol on 4/1/2017.\r\n */\r\n\r\nclass Node {\r\n    constructor(key = undefined, value = undefined,\r\n                left = null, right = null, parent = null, color = RB_TREE_COLOR_BLACK) {\r\n        this.left = left;                     // reference to left child node\r\n        this.right = right;                   // reference to right child node\r\n        this.parent = parent;                 // reference to parent node\r\n        this.color = color;\r\n\r\n        this.item = {key: key, value: value};   // key is supposed to be instance of Interval\r\n\r\n        /* If not, this should by an array of two numbers */\r\n        if (key && key instanceof Array && key.length == 2) {\r\n            if (!Number.isNaN(key[0]) && !Number.isNaN(key[1])) {\r\n                this.item.key = new Interval(Math.min(key[0], key[1]), Math.max(key[0], key[1]));\r\n            }\r\n        }\r\n\r\n        this.max = this.item.key ? this.item.key.max : undefined;\r\n    }\r\n\r\n    isNil() {\r\n        return (this.item.key === undefined && this.item.value === undefined &&\r\n            this.left === null && this.right === null && this.color === RB_TREE_COLOR_BLACK);\r\n    }\r\n\r\n    less_than(other_node) {\r\n        // if tree stores only keys\r\n        if (this.item.value === this.item.key && other_node.item.value === other_node.item.key) {\r\n            return this.item.key.less_than(other_node.item.key);\r\n        }\r\n        else {    // if tree stores keys and values\r\n            let value_less_than = this.item.value && other_node.item.value && this.item.value.less_than ? this.item.value.less_than(other_node.item.value) :\r\n                this.item.value < other_node.item.value;\r\n            return this.item.key.less_than(other_node.item.key) ||\r\n                this.item.key.equal_to((other_node.item.key)) && value_less_than;\r\n        }\r\n\r\n        // if (this.item.value && other_node.item.value) {\r\n        //     let item_less_than = this.item.value.less_than ? this.item.value.less_than(other_node.item.value) :\r\n        //         this.item.value < other_node.item.value;\r\n        //     return this.item.key.less_than(other_node.item.key) ||\r\n        //         this.item.key.equal_to((other_node.item.key)) && item_less_than;\r\n        // }\r\n        // else {\r\n        //     return this.item.key.less_than(other_node.item.key);\r\n        // }\r\n    }\r\n\r\n    equal_to(other_node) {\r\n        // if tree stores only keys\r\n        if (this.item.value === this.item.key && other_node.item.value === other_node.item.key) {\r\n            return this.item.key.equal_to(other_node.item.key);\r\n        }\r\n        else {    // if tree stores keys and values\r\n            let value_equal = this.item.value && other_node.item.value && this.item.value.equal_to ? this.item.value.equal_to(other_node.item.value) :\r\n                this.item.value == other_node.item.value;\r\n            return this.item.key.equal_to(other_node.item.key) && value_equal;\r\n        }\r\n\r\n        // let value_equal = true;\r\n        // if (this.item.value && other_node.item.value) {\r\n        //     value_equal = this.item.value.equal_to ? this.item.value.equal_to(other_node.item.value) :\r\n        //         this.item.value == other_node.item.value;\r\n        // }\r\n        // return this.item.key.equal_to(other_node.item.key) && value_equal;\r\n    }\r\n\r\n    intersect(other_node) {\r\n        return this.item.key.intersect(other_node.item.key);\r\n    }\r\n\r\n    copy_data(other_node) {\r\n        this.item.key = other_node.item.key;\r\n        this.item.value = other_node.item.value;\r\n    }\r\n\r\n    update_max() {\r\n        // use key (Interval) max property instead of key.high\r\n        this.max = this.item.key ? this.item.key.max : undefined;\r\n        if (this.right && this.right.max) {\r\n            const comparable_max = this.item.key.constructor.comparable_max;  // static method\r\n            this.max = comparable_max(this.max, this.right.max);\r\n        }\r\n        if (this.left && this.left.max) {\r\n            const comparable_max = this.item.key.constructor.comparable_max;  // static method\r\n            this.max = comparable_max(this.max, this.left.max);\r\n        }\r\n    }\r\n\r\n    // Other_node does not intersect any node of left subtree, if this.left.max < other_node.item.key.low\r\n    not_intersect_left_subtree(search_node) {\r\n        const comparable_less_than = this.item.key.constructor.comparable_less_than;  // static method\r\n        let high = this.left.max.high !== undefined ? this.left.max.high : this.left.max;\r\n        return comparable_less_than(high, search_node.item.key.low);\r\n    }\r\n\r\n    // Other_node does not intersect right subtree if other_node.item.key.high < this.right.key.low\r\n    not_intersect_right_subtree(search_node) {\r\n        const comparable_less_than = this.item.key.constructor.comparable_less_than;  // static method\r\n        let low = this.right.max.low !== undefined ? this.right.max.low : this.right.item.key.low;\r\n        return comparable_less_than(search_node.item.key.high, low);\r\n    }\r\n}\r\n\r\n/**\r\n * Created by Alex Bol on 3/31/2017.\r\n */\r\n\r\n// const nil_node = new Node();\r\n\r\n/**\r\n * Implementation of interval binary search tree <br/>\r\n * Interval tree stores items which are couples of {key:interval, value: value} <br/>\r\n * Interval is an object with high and low properties or simply pair [low,high] of numeric values <br />\r\n * @type {IntervalTree}\r\n */\r\nclass IntervalTree {\r\n    /**\r\n     * Construct new empty instance of IntervalTree\r\n     */\r\n    constructor() {\r\n        this.root = null;\r\n        this.nil_node = new Node();\r\n    }\r\n\r\n    /**\r\n     * Returns number of items stored in the interval tree\r\n     * @returns {number}\r\n     */\r\n    get size() {\r\n        let count = 0;\r\n        this.tree_walk(this.root, () => count++);\r\n        return count;\r\n    }\r\n\r\n    /**\r\n     * Returns array of sorted keys in the ascending order\r\n     * @returns {Array}\r\n     */\r\n    get keys() {\r\n        let res = [];\r\n        this.tree_walk(this.root, (node) => res.push(\r\n            node.item.key.output ? node.item.key.output() : node.item.key\r\n        ));\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Return array of values in the ascending keys order\r\n     * @returns {Array}\r\n     */\r\n    get values() {\r\n        let res = [];\r\n        this.tree_walk(this.root, (node) => res.push(node.item.value));\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Returns array of items (<key,value> pairs) in the ascended keys order\r\n     * @returns {Array}\r\n     */\r\n    get items() {\r\n        let res = [];\r\n        this.tree_walk(this.root, (node) => res.push({\r\n            key: node.item.key.output ? node.item.key.output() : node.item.key,\r\n            value: node.item.value\r\n        }));\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Returns true if tree is empty\r\n     * @returns {boolean}\r\n     */\r\n    isEmpty() {\r\n        return (this.root == null || this.root == this.nil_node);\r\n    }\r\n\r\n    /**\r\n     * Clear tree\r\n     */\r\n    clear() {\r\n        this.root = null;\r\n    }\r\n\r\n    /**\r\n     * Insert new item into interval tree\r\n     * @param {Interval} key - interval object or array of two numbers [low, high]\r\n     * @param {any} value - value representing any object (optional)\r\n     * @returns {Node} returns reference to inserted node as an object {key:interval, value: value}\r\n     */\r\n    insert(key, value = key) {\r\n        if (key === undefined) return;\r\n        let insert_node = new Node(key, value, this.nil_node, this.nil_node, null, RB_TREE_COLOR_RED);\r\n        this.tree_insert(insert_node);\r\n        this.recalc_max(insert_node);\r\n        return insert_node;\r\n    }\r\n\r\n    /**\r\n     * Returns true if item {key,value} exist in the tree\r\n     * @param {Interval} key - interval correspondent to keys stored in the tree\r\n     * @param {any} value - value object to be checked\r\n     * @returns {boolean} true if item {key, value} exist in the tree, false otherwise\r\n     */\r\n    exist(key, value = key) {\r\n        let search_node = new Node(key, value);\r\n        return this.tree_search(this.root, search_node) ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Remove entry {key, value} from the tree\r\n     * @param {Interval} key - interval correspondent to keys stored in the tree\r\n     * @param {any} value - value object\r\n     * @returns {boolean} true if item {key, value} deleted, false if not found\r\n     */\r\n    remove(key, value = key) {\r\n        let search_node = new Node(key, value);\r\n        let delete_node = this.tree_search(this.root, search_node);\r\n        if (delete_node) {\r\n            this.tree_delete(delete_node);\r\n        }\r\n        return delete_node;\r\n    }\r\n\r\n    /**\r\n     * Returns array of entry values which keys intersect with given interval <br/>\r\n     * If no values stored in the tree, returns array of keys which intersect given interval\r\n     * @param {Interval} interval - search interval, or tuple [low, high]\r\n     * @param outputMapperFn(value,key) - optional function that maps (value, key) to custom output\r\n     * @returns {Array}\r\n     */\r\n    search(interval, outputMapperFn = (value, key) => value === key ? key.output() : value) {\r\n        let search_node = new Node(interval);\r\n        let resp_nodes = [];\r\n        this.tree_search_interval(this.root, search_node, resp_nodes);\r\n        return resp_nodes.map(node => outputMapperFn(node.item.value, node.item.key))\r\n    }\r\n\r\n    /**\r\n     * Returns true if intersection between given and any interval stored in the tree found\r\n     * @param {Interval} interval - search interval or tuple [low, high]\r\n     * @returns {boolean}\r\n     */\r\n    intersect_any(interval) {\r\n        let search_node = new Node(interval);\r\n        let found = this.tree_find_any_interval(this.root, search_node);\r\n        return found;\r\n    }\r\n\r\n    /**\r\n     * Tree visitor. For each node implement a callback function. <br/>\r\n     * Method calls a callback function with two parameters (key, value)\r\n     * @param visitor(key,value) - function to be called for each tree item\r\n     */\r\n    forEach(visitor) {\r\n        this.tree_walk(this.root, (node) => visitor(node.item.key, node.item.value));\r\n    }\r\n\r\n    /** Value Mapper. Walk through every node and map node value to another value\r\n    * @param callback(value,key) - function to be called for each tree item\r\n    */\r\n    map(callback) {\r\n        const tree = new IntervalTree();\r\n        this.tree_walk(this.root, (node) => tree.insert(node.item.key, callback(node.item.value, node.item.key)));\r\n        return tree;\r\n    }\r\n\r\n    recalc_max(node) {\r\n        let node_current = node;\r\n        while (node_current.parent != null) {\r\n            node_current.parent.update_max();\r\n            node_current = node_current.parent;\r\n        }\r\n    }\r\n\r\n    tree_insert(insert_node) {\r\n        let current_node = this.root;\r\n        let parent_node = null;\r\n\r\n        if (this.root == null || this.root == this.nil_node) {\r\n            this.root = insert_node;\r\n        }\r\n        else {\r\n            while (current_node != this.nil_node) {\r\n                parent_node = current_node;\r\n                if (insert_node.less_than(current_node)) {\r\n                    current_node = current_node.left;\r\n                }\r\n                else {\r\n                    current_node = current_node.right;\r\n                }\r\n            }\r\n\r\n            insert_node.parent = parent_node;\r\n\r\n            if (insert_node.less_than(parent_node)) {\r\n                parent_node.left = insert_node;\r\n            }\r\n            else {\r\n                parent_node.right = insert_node;\r\n            }\r\n        }\r\n\r\n        this.insert_fixup(insert_node);\r\n    }\r\n\r\n// After insertion insert_node may have red-colored parent, and this is a single possible violation\r\n// Go upwords to the root and re-color until violation will be resolved\r\n    insert_fixup(insert_node) {\r\n        let current_node;\r\n        let uncle_node;\r\n\r\n        current_node = insert_node;\r\n        while (current_node != this.root && current_node.parent.color == RB_TREE_COLOR_RED) {\r\n            if (current_node.parent == current_node.parent.parent.left) {   // parent is left child of grandfather\r\n                uncle_node = current_node.parent.parent.right;              // right brother of parent\r\n                if (uncle_node.color == RB_TREE_COLOR_RED) {             // Case 1. Uncle is red\r\n                    // re-color father and uncle into black\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\r\n                    uncle_node.color = RB_TREE_COLOR_BLACK;\r\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\r\n                    current_node = current_node.parent.parent;\r\n                }\r\n                else {                                                    // Case 2 & 3. Uncle is black\r\n                    if (current_node == current_node.parent.right) {     // Case 2. Current if right child\r\n                        // This case is transformed into Case 3.\r\n                        current_node = current_node.parent;\r\n                        this.rotate_left(current_node);\r\n                    }\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;    // Case 3. Current is left child.\r\n                    // Re-color father and grandfather, rotate grandfather right\r\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\r\n                    this.rotate_right(current_node.parent.parent);\r\n                }\r\n            }\r\n            else {                                                         // parent is right child of grandfather\r\n                uncle_node = current_node.parent.parent.left;              // left brother of parent\r\n                if (uncle_node.color == RB_TREE_COLOR_RED) {             // Case 4. Uncle is red\r\n                    // re-color father and uncle into black\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\r\n                    uncle_node.color = RB_TREE_COLOR_BLACK;\r\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\r\n                    current_node = current_node.parent.parent;\r\n                }\r\n                else {\r\n                    if (current_node == current_node.parent.left) {             // Case 5. Current is left child\r\n                        // Transform into case 6\r\n                        current_node = current_node.parent;\r\n                        this.rotate_right(current_node);\r\n                    }\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;    // Case 6. Current is right child.\r\n                    // Re-color father and grandfather, rotate grandfather left\r\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\r\n                    this.rotate_left(current_node.parent.parent);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.root.color = RB_TREE_COLOR_BLACK;\r\n    }\r\n\r\n    tree_delete(delete_node) {\r\n        let cut_node;   // node to be cut - either delete_node or successor_node  (\"y\" from 14.4)\r\n        let fix_node;   // node to fix rb tree property   (\"x\" from 14.4)\r\n\r\n        if (delete_node.left == this.nil_node || delete_node.right == this.nil_node) {  // delete_node has less then 2 children\r\n            cut_node = delete_node;\r\n        }\r\n        else {                                                    // delete_node has 2 children\r\n            cut_node = this.tree_successor(delete_node);\r\n        }\r\n\r\n        // fix_node if single child of cut_node\r\n        if (cut_node.left != this.nil_node) {\r\n            fix_node = cut_node.left;\r\n        }\r\n        else {\r\n            fix_node = cut_node.right;\r\n        }\r\n\r\n        // remove cut_node from parent\r\n        /*if (fix_node != this.nil_node) {*/\r\n            fix_node.parent = cut_node.parent;\r\n        /*}*/\r\n\r\n        if (cut_node == this.root) {\r\n            this.root = fix_node;\r\n        }\r\n        else {\r\n            if (cut_node == cut_node.parent.left) {\r\n                cut_node.parent.left = fix_node;\r\n            }\r\n            else {\r\n                cut_node.parent.right = fix_node;\r\n            }\r\n            cut_node.parent.update_max();        // update max property of the parent\r\n        }\r\n\r\n        this.recalc_max(fix_node);              // update max property upward from fix_node to root\r\n\r\n        // COPY DATA !!!\r\n        // Delete_node becomes cut_node, it means that we cannot hold reference\r\n        // to node in outer structure and we will have to delete by key, additional search need\r\n        if (cut_node != delete_node) {\r\n            delete_node.copy_data(cut_node);\r\n            delete_node.update_max();           // update max property of the cut node at the new place\r\n            this.recalc_max(delete_node);       // update max property upward from delete_node to root\r\n        }\r\n\r\n        if (/*fix_node != this.nil_node && */cut_node.color == RB_TREE_COLOR_BLACK) {\r\n            this.delete_fixup(fix_node);\r\n        }\r\n    }\r\n\r\n    delete_fixup(fix_node) {\r\n        let current_node = fix_node;\r\n        let brother_node;\r\n\r\n        while (current_node != this.root && current_node.parent != null && current_node.color == RB_TREE_COLOR_BLACK) {\r\n            if (current_node == current_node.parent.left) {          // fix node is left child\r\n                brother_node = current_node.parent.right;\r\n                if (brother_node.color == RB_TREE_COLOR_RED) {   // Case 1. Brother is red\r\n                    brother_node.color = RB_TREE_COLOR_BLACK;         // re-color brother\r\n                    current_node.parent.color = RB_TREE_COLOR_RED;    // re-color father\r\n                    this.rotate_left(current_node.parent);\r\n                    brother_node = current_node.parent.right;                      // update brother\r\n                }\r\n                // Derive to cases 2..4: brother is black\r\n                if (brother_node.left.color == RB_TREE_COLOR_BLACK &&\r\n                    brother_node.right.color == RB_TREE_COLOR_BLACK) {  // case 2: both nephews black\r\n                    brother_node.color = RB_TREE_COLOR_RED;              // re-color brother\r\n                    current_node = current_node.parent;                  // continue iteration\r\n                }\r\n                else {\r\n                    if (brother_node.right.color == RB_TREE_COLOR_BLACK) {   // case 3: left nephew red, right nephew black\r\n                        brother_node.color = RB_TREE_COLOR_RED;          // re-color brother\r\n                        brother_node.left.color = RB_TREE_COLOR_BLACK;   // re-color nephew\r\n                        this.rotate_right(brother_node);\r\n                        brother_node = current_node.parent.right;                     // update brother\r\n                        // Derive to case 4: left nephew black, right nephew red\r\n                    }\r\n                    // case 4: left nephew black, right nephew red\r\n                    brother_node.color = current_node.parent.color;\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\r\n                    brother_node.right.color = RB_TREE_COLOR_BLACK;\r\n                    this.rotate_left(current_node.parent);\r\n                    current_node = this.root;                         // exit from loop\r\n                }\r\n            }\r\n            else {                                             // fix node is right child\r\n                brother_node = current_node.parent.left;\r\n                if (brother_node.color == RB_TREE_COLOR_RED) {   // Case 1. Brother is red\r\n                    brother_node.color = RB_TREE_COLOR_BLACK;         // re-color brother\r\n                    current_node.parent.color = RB_TREE_COLOR_RED;    // re-color father\r\n                    this.rotate_right(current_node.parent);\r\n                    brother_node = current_node.parent.left;                        // update brother\r\n                }\r\n                // Go to cases 2..4\r\n                if (brother_node.left.color == RB_TREE_COLOR_BLACK &&\r\n                    brother_node.right.color == RB_TREE_COLOR_BLACK) {   // case 2\r\n                    brother_node.color = RB_TREE_COLOR_RED;             // re-color brother\r\n                    current_node = current_node.parent;                              // continue iteration\r\n                }\r\n                else {\r\n                    if (brother_node.left.color == RB_TREE_COLOR_BLACK) {  // case 3: right nephew red, left nephew black\r\n                        brother_node.color = RB_TREE_COLOR_RED;            // re-color brother\r\n                        brother_node.right.color = RB_TREE_COLOR_BLACK;    // re-color nephew\r\n                        this.rotate_left(brother_node);\r\n                        brother_node = current_node.parent.left;                        // update brother\r\n                        // Derive to case 4: right nephew black, left nephew red\r\n                    }\r\n                    // case 4: right nephew black, left nephew red\r\n                    brother_node.color = current_node.parent.color;\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\r\n                    brother_node.left.color = RB_TREE_COLOR_BLACK;\r\n                    this.rotate_right(current_node.parent);\r\n                    current_node = this.root;                               // force exit from loop\r\n                }\r\n            }\r\n        }\r\n\r\n        current_node.color = RB_TREE_COLOR_BLACK;\r\n    }\r\n\r\n    tree_search(node, search_node) {\r\n        if (node == null || node == this.nil_node)\r\n            return undefined;\r\n\r\n        if (search_node.equal_to(node)) {\r\n            return node;\r\n        }\r\n        if (search_node.less_than(node)) {\r\n            return this.tree_search(node.left, search_node);\r\n        }\r\n        else {\r\n            return this.tree_search(node.right, search_node);\r\n        }\r\n    }\r\n\r\n    // Original search_interval method; container res support push() insertion\r\n    // Search all intervals intersecting given one\r\n    tree_search_interval(node, search_node, res) {\r\n        if (node != null && node != this.nil_node) {\r\n            // if (node->left != this.nil_node && node->left->max >= low) {\r\n            if (node.left != this.nil_node && !node.not_intersect_left_subtree(search_node)) {\r\n                this.tree_search_interval(node.left, search_node, res);\r\n            }\r\n            // if (low <= node->high && node->low <= high) {\r\n            if (node.intersect(search_node)) {\r\n                res.push(node);\r\n            }\r\n            // if (node->right != this.nil_node && node->low <= high) {\r\n            if (node.right != this.nil_node && !node.not_intersect_right_subtree(search_node)) {\r\n                this.tree_search_interval(node.right, search_node, res);\r\n            }\r\n        }\r\n    }\r\n\r\n    tree_find_any_interval(node, search_node) {\r\n        let found = false;\r\n        if (node != null && node != this.nil_node) {\r\n            // if (node->left != this.nil_node && node->left->max >= low) {\r\n            if (node.left != this.nil_node && !node.not_intersect_left_subtree(search_node)) {\r\n                found = this.tree_find_any_interval(node.left, search_node);\r\n            }\r\n            // if (low <= node->high && node->low <= high) {\r\n            if (!found) {\r\n                found = node.intersect(search_node);\r\n            }\r\n            // if (node->right != this.nil_node && node->low <= high) {\r\n            if (!found && node.right != this.nil_node && !node.not_intersect_right_subtree(search_node)) {\r\n                found = this.tree_find_any_interval(node.right, search_node);\r\n            }\r\n        }\r\n        return found;\r\n    }\r\n\r\n    local_minimum(node) {\r\n        let node_min = node;\r\n        while (node_min.left != null && node_min.left != this.nil_node) {\r\n            node_min = node_min.left;\r\n        }\r\n        return node_min;\r\n    }\r\n\r\n    // not in use\r\n    local_maximum(node) {\r\n        let node_max = node;\r\n        while (node_max.right != null && node_max.right != this.nil_node) {\r\n            node_max = node_max.right;\r\n        }\r\n        return node_max;\r\n    }\r\n\r\n    tree_successor(node) {\r\n        let node_successor;\r\n        let current_node;\r\n        let parent_node;\r\n\r\n        if (node.right != this.nil_node) {\r\n            node_successor = this.local_minimum(node.right);\r\n        }\r\n        else {\r\n            current_node = node;\r\n            parent_node = node.parent;\r\n            while (parent_node != null && parent_node.right == current_node) {\r\n                current_node = parent_node;\r\n                parent_node = parent_node.parent;\r\n            }\r\n            node_successor = parent_node;\r\n        }\r\n        return node_successor;\r\n    }\r\n\r\n    //           |            right-rotate(T,y)       |\r\n    //           y            ---------------.       x\r\n    //          / \\                                  / \\\r\n    //         x   c          left-rotate(T,x)      a   y\r\n    //        / \\             <---------------         / \\\r\n    //       a   b                                    b   c\r\n\r\n    rotate_left(x) {\r\n        let y = x.right;\r\n\r\n        x.right = y.left;           // b goes to x.right\r\n\r\n        if (y.left != this.nil_node) {\r\n            y.left.parent = x;     // x becomes parent of b\r\n        }\r\n        y.parent = x.parent;       // move parent\r\n\r\n        if (x == this.root) {\r\n            this.root = y;           // y becomes root\r\n        }\r\n        else {                        // y becomes child of x.parent\r\n            if (x == x.parent.left) {\r\n                x.parent.left = y;\r\n            }\r\n            else {\r\n                x.parent.right = y;\r\n            }\r\n        }\r\n        y.left = x;                 // x becomes left child of y\r\n        x.parent = y;               // and y becomes parent of x\r\n\r\n        if (x != null && x != this.nil_node) {\r\n            x.update_max();\r\n        }\r\n\r\n        y = x.parent;\r\n        if (y != null && y != this.nil_node) {\r\n            y.update_max();\r\n        }\r\n    }\r\n\r\n    rotate_right(y) {\r\n        let x = y.left;\r\n\r\n        y.left = x.right;           // b goes to y.left\r\n\r\n        if (x.right != this.nil_node) {\r\n            x.right.parent = y;        // y becomes parent of b\r\n        }\r\n        x.parent = y.parent;          // move parent\r\n\r\n        if (y == this.root) {        // x becomes root\r\n            this.root = x;\r\n        }\r\n        else {                        // y becomes child of x.parent\r\n            if (y == y.parent.left) {\r\n                y.parent.left = x;\r\n            }\r\n            else {\r\n                y.parent.right = x;\r\n            }\r\n        }\r\n        x.right = y;                 // y becomes right child of x\r\n        y.parent = x;               // and x becomes parent of y\r\n\r\n        if (y != null && y != this.nil_node) {\r\n            y.update_max();\r\n        }\r\n\r\n        x = y.parent;\r\n        if (x != null && x != this.nil_node) {\r\n            x.update_max();\r\n        }\r\n    }\r\n\r\n    tree_walk(node, action) {\r\n        if (node != null && node != this.nil_node) {\r\n            this.tree_walk(node.left, action);\r\n            // arr.push(node.toArray());\r\n            action(node);\r\n            this.tree_walk(node.right, action);\r\n        }\r\n    }\r\n\r\n    /* Return true if all red nodes have exactly two black child nodes */\r\n    testRedBlackProperty() {\r\n        let res = true;\r\n        this.tree_walk(this.root, function (node) {\r\n            if (node.color == RB_TREE_COLOR_RED) {\r\n                if (!(node.left.color == RB_TREE_COLOR_BLACK && node.right.color == RB_TREE_COLOR_BLACK)) {\r\n                    res = false;\r\n                }\r\n            }\r\n        });\r\n        return res;\r\n    }\r\n\r\n    /* Throw error if not every path from root to bottom has same black height */\r\n    testBlackHeightProperty(node) {\r\n        let height = 0;\r\n        let heightLeft = 0;\r\n        let heightRight = 0;\r\n        if (node.color == RB_TREE_COLOR_BLACK) {\r\n            height++;\r\n        }\r\n        if (node.left != this.nil_node) {\r\n            heightLeft = this.testBlackHeightProperty(node.left);\r\n        }\r\n        else {\r\n            heightLeft = 1;\r\n        }\r\n        if (node.right != this.nil_node) {\r\n            heightRight = this.testBlackHeightProperty(node.right);\r\n        }\r\n        else {\r\n            heightRight = 1;\r\n        }\r\n        if (heightLeft != heightRight) {\r\n            throw new Error('Red-black height property violated');\r\n        }\r\n        height += heightLeft;\r\n        return height;\r\n    };\r\n}\r\n\r\n/**\r\n * Created by Alex Bol on 3/12/2017.\r\n */\r\n\r\n/**\r\n * Class representing a planar set - a generic container with ability to keep and retrieve shapes and\r\n * perform spatial queries. Planar set is an extension of Set container, so it supports\r\n * Set properties and methods\r\n */\r\nclass PlanarSet extends Set {\r\n    /**\r\n     * Create new instance of PlanarSet\r\n     * @param shapes - array or set of geometric objects to store in planar set\r\n     * Each object should have a <b>box</b> property\r\n     */\r\n    constructor(shapes) {\r\n        super(shapes);\r\n        this.index = new IntervalTree();\r\n        this.forEach(shape => this.index.insert(shape));\r\n    }\r\n\r\n    /**\r\n     * Add new shape to planar set and to its spatial index.<br/>\r\n     * If shape already exist, it will not be added again.\r\n     * This happens with no error, it is possible to use <i>size</i> property to check if\r\n     * a shape was actually added.<br/>\r\n     * Method returns planar set object updated and may be chained\r\n     * @param {Shape} shape - shape to be added, should have valid <i>box</i> property\r\n     * @returns {PlanarSet}\r\n     */\r\n    add(shape) {\r\n        let size = this.size;\r\n        super.add(shape);\r\n        // size not changed - item not added, probably trying to add same item twice\r\n        if (this.size > size) {\r\n            let node = this.index.insert(shape.box, shape);\r\n        }\r\n        return this;         // in accordance to Set.add interface\r\n    }\r\n\r\n    /**\r\n     * Delete shape from planar set. Returns true if shape was actually deleted, false otherwise\r\n     * @param {Shape} shape - shape to be deleted\r\n     * @returns {boolean}\r\n     */\r\n    delete(shape) {\r\n        let deleted = super.delete(shape);\r\n        if (deleted) {\r\n            this.index.remove(shape.box, shape);\r\n        }\r\n        return deleted;\r\n    }\r\n\r\n    /**\r\n     * Clear planar set\r\n     */\r\n    clear() {\r\n        super.clear();\r\n        this.index = new IntervalTree();\r\n    }\r\n\r\n    /**\r\n     * 2d range search in planar set.<br/>\r\n     * Returns array of all shapes in planar set which bounding box is intersected with query box\r\n     * @param {Box} box - query box\r\n     * @returns {Shapes[]}\r\n     */\r\n    search(box) {\r\n        let resp = this.index.search(box);\r\n        return resp;\r\n    }\r\n\r\n    /**\r\n     * Point location test. Returns array of shapes which contains given point\r\n     * @param {Point} point - query point\r\n     * @returns {Array}\r\n     */\r\n    hit(point) {\r\n        let box = new Flatten.Box(point.x - 1, point.y - 1, point.x + 1, point.y + 1);\r\n        let resp = this.index.search(box);\r\n        return resp.filter((shape) => point.on(shape));\r\n    }\r\n\r\n    /**\r\n     * Returns svg string to draw all shapes in planar set\r\n     * @returns {String}\r\n     */\r\n    svg() {\r\n        let svgcontent = [...this].reduce((acc, shape) => acc + shape.svg(), \"\");\r\n        return svgcontent;\r\n    }\r\n}\r\n\r\nFlatten.PlanarSet = PlanarSet;\r\n\r\n/**\r\n * Created by Alex Bol on 2/18/2017.\r\n */\r\n\r\n/**\r\n *\r\n * Class representing a point\r\n * @type {Point}\r\n */\r\nclass Point {\r\n    /**\r\n     * Point may be constructed by two numbers, or by array of two numbers\r\n     * @param {number} x - x-coordinate (float number)\r\n     * @param {number} y - y-coordinate (float number)\r\n     */\r\n    constructor(...args) {\r\n        /**\r\n         * x-coordinate (float number)\r\n         * @type {number}\r\n         */\r\n        this.x = 0;\r\n        /**\r\n         * y-coordinate (float number)\r\n         * @type {number}\r\n         */\r\n        this.y = 0;\r\n\r\n        if (args.length === 0) {\r\n            return;\r\n        }\r\n\r\n        if (args.length === 1 && args[0] instanceof Array && args[0].length === 2) {\r\n            let arr = args[0];\r\n            if (typeof (arr[0]) == \"number\" && typeof (arr[1]) == \"number\") {\r\n                this.x = arr[0];\r\n                this.y = arr[1];\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (args.length === 1 && args[0] instanceof Object && args[0].name === \"point\") {\r\n            let {x, y} = args[0];\r\n            this.x = x;\r\n            this.y = y;\r\n            return;\r\n        }\r\n\r\n        if (args.length === 2) {\r\n            if (typeof (args[0]) == \"number\" && typeof (args[1]) == \"number\") {\r\n                this.x = args[0];\r\n                this.y = args[1];\r\n                return;\r\n            }\r\n        }\r\n\r\n        throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n\r\n    }\r\n\r\n    /**\r\n     * Returns bounding box of a point\r\n     * @returns {Box}\r\n     */\r\n    get box() {\r\n        return new Flatten.Box(this.x, this.y, this.x, this.y);\r\n    }\r\n\r\n    /**\r\n     * Return new cloned instance of point\r\n     * @returns {Point}\r\n     */\r\n    clone() {\r\n        return new Flatten.Point(this.x, this.y);\r\n    }\r\n\r\n    get vertices() {\r\n        return [this.clone()];\r\n    }\r\n\r\n    /**\r\n     * Returns true if points are equal up to [Flatten.Utils.DP_TOL]{@link DP_TOL} tolerance\r\n     * @param {Point} pt Query point\r\n     * @returns {boolean}\r\n     */\r\n    equalTo(pt) {\r\n        return Flatten.Utils.EQ(this.x, pt.x) && Flatten.Utils.EQ(this.y, pt.y);\r\n    }\r\n\r\n    /**\r\n     * Defines predicate \"less than\" between points. Returns true if the point is less than query points, false otherwise <br/>\r\n     * By definition point1 < point2 if {point1.y < point2.y || point1.y == point2.y && point1.x < point2.x <br/>\r\n     * Numeric values compared with [Flatten.Utils.DP_TOL]{@link DP_TOL} tolerance\r\n     * @param {Point} pt Query point\r\n     * @returns {boolean}\r\n     */\r\n    lessThan(pt) {\r\n        if (Flatten.Utils.LT(this.y, pt.y))\r\n            return true;\r\n        if (Flatten.Utils.EQ(this.y, pt.y) && Flatten.Utils.LT(this.x, pt.x))\r\n            return true;\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns new point rotated by given angle around given center point.\r\n     * If center point is omitted, rotates around zero point (0,0).\r\n     * Positive value of angle defines rotation in counter clockwise direction,\r\n     * negative angle defines rotation in clockwise clockwise direction\r\n     * @param {number} angle - angle in radians\r\n     * @param {Point} [center=(0,0)] center\r\n     * @returns {Point}\r\n     */\r\n    rotate(angle, center = {x: 0, y: 0}) {\r\n        var x_rot = center.x + (this.x - center.x) * Math.cos(angle) - (this.y - center.y) * Math.sin(angle);\r\n        var y_rot = center.y + (this.x - center.x) * Math.sin(angle) + (this.y - center.y) * Math.cos(angle);\r\n\r\n        return new Flatten.Point(x_rot, y_rot);\r\n    }\r\n\r\n    /**\r\n     * Returns new point translated by given vector.\r\n     * Translation vector may by also defined by a pair of numbers.\r\n     * @param {Vector} vector - Translation vector defined as Flatten.Vector or\r\n     * @param {number|number} - Translation vector defined as pair of numbers\r\n     * @returns {Point}\r\n     */\r\n    translate(...args) {\r\n        if (args.length == 1 &&\r\n            (args[0] instanceof Flatten.Vector || !isNaN(args[0].x) && !isNaN(args[0].y))) {\r\n            return new Flatten.Point(this.x + args[0].x, this.y + args[0].y);\r\n        }\r\n\r\n        if (args.length == 2 && typeof (args[0]) == \"number\" && typeof (args[1]) == \"number\") {\r\n            return new Flatten.Point(this.x + args[0], this.y + args[1]);\r\n        }\r\n\r\n        throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n    }\r\n\r\n    /**\r\n     * Return new point transformed by affine transformation matrix m\r\n     * @param {Matrix} m - affine transformation matrix (a,b,c,d,tx,ty)\r\n     * @returns {Point}\r\n     */\r\n    transform(m) {\r\n        // let [x,y] = m.transform([this.x,this.y]);\r\n        return new Flatten.Point(m.transform([this.x, this.y]))\r\n    }\r\n\r\n    /**\r\n     * Returns projection point on given line\r\n     * @param {Line} line Line this point be projected on\r\n     * @returns {Point}\r\n     */\r\n    projectionOn(line) {\r\n        if (this.equalTo(line.pt))                   // this point equal to line anchor point\r\n            return this.clone();\r\n\r\n        let vec = new Flatten.Vector(this, line.pt);\r\n        if (Flatten.Utils.EQ_0(vec.cross(line.norm)))    // vector to point from anchor point collinear to normal vector\r\n            return line.pt.clone();\r\n\r\n        let dist = vec.dot(line.norm);             // signed distance\r\n        let proj_vec = line.norm.multiply(dist);\r\n        return this.translate(proj_vec);\r\n    }\r\n\r\n    /**\r\n     * Returns true if point belongs to the \"left\" semi-plane, which means, point belongs to the same semi plane where line normal vector points to\r\n     * Return false if point belongs to the \"right\" semi-plane or to the line itself\r\n     * @param {Line} line Query line\r\n     * @returns {boolean}\r\n     */\r\n    leftTo(line) {\r\n        let vec = new Flatten.Vector(line.pt, this);\r\n        let onLeftSemiPlane = Flatten.Utils.GT(vec.dot(line.norm), 0);\r\n        return onLeftSemiPlane;\r\n    }\r\n\r\n    /**\r\n     * Calculate distance and shortest segment from point to shape and return as array [distance, shortest segment]\r\n     * @param {Shape} shape Shape of the one of supported types Point, Line, Circle, Segment, Arc, Polygon or Planar Set\r\n     * @returns {number} distance from point to shape\r\n     * @returns {Segment} shortest segment between point and shape (started at point, ended at shape)\r\n     */\r\n    distanceTo(shape) {\r\n        if (shape instanceof Point) {\r\n            let dx = shape.x - this.x;\r\n            let dy = shape.y - this.y;\r\n            return [Math.sqrt(dx * dx + dy * dy), new Flatten.Segment(this, shape)];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Line) {\r\n            return Flatten.Distance.point2line(this, shape);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Circle) {\r\n            return Flatten.Distance.point2circle(this, shape);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Segment) {\r\n            return Flatten.Distance.point2segment(this, shape);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Arc) {\r\n            // let [dist, ...rest] = Distance.point2arc(this, shape);\r\n            // return dist;\r\n            return Flatten.Distance.point2arc(this, shape);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Polygon) {\r\n            // let [dist, ...rest] = Distance.point2polygon(this, shape);\r\n            // return dist;\r\n            return Flatten.Distance.point2polygon(this, shape);\r\n        }\r\n\r\n        if (shape instanceof Flatten.PlanarSet) {\r\n            return Flatten.Distance.shape2planarSet(this, shape);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if point is on a shape, false otherwise\r\n     * @param {Shape} shape Shape of the one of supported types Point, Line, Circle, Segment, Arc, Polygon\r\n     * @returns {boolean}\r\n     */\r\n    on(shape) {\r\n        if (shape instanceof Flatten.Point) {\r\n            return this.equalTo(shape);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Line) {\r\n            return shape.contains(this);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Circle) {\r\n            return shape.contains(this);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Segment) {\r\n            return shape.contains(this);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Arc) {\r\n            return shape.contains(this);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Polygon) {\r\n            return shape.contains(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method returns an object that defines how data will be\r\n     * serialized when called JSON.stringify() method\r\n     * @returns {Object}\r\n     */\r\n    toJSON() {\r\n        return Object.assign({}, this, {name: \"point\"});\r\n    }\r\n\r\n    /**\r\n     * Return string to draw point in svg as circle with radius \"r\" <br/>\r\n     * Accept any valid attributes of svg elements as svg object\r\n     * Defaults attribues are: <br/>\r\n     * {\r\n     *    r:\"3\",\r\n     *    stroke:\"black\",\r\n     *    strokeWidth:\"1\",\r\n     *    fill:\"red\"\r\n     * }\r\n     * @param {Object} attrs - Any valid attributes of svg circle element, like \"r\", \"stroke\", \"strokeWidth\", \"fill\"\r\n     * @returns {String}\r\n     */\r\n    svg(attrs = {}) {\r\n        let {r, stroke, strokeWidth, fill, id, className} = attrs;\r\n        // let rest_str = Object.keys(rest).reduce( (acc, key) => acc += ` ${key}=\"${rest[key]}\"`, \"\");\r\n        let id_str = (id && id.length > 0) ? `id=\"${id}\"` : \"\";\r\n        let class_str = (className && className.length > 0) ? `class=\"${className}\"` : \"\";\r\n        return `\\n<circle cx=\"${this.x}\" cy=\"${this.y}\" r=\"${r || 3}\" stroke=\"${stroke || \"black\"}\" stroke-width=\"${strokeWidth || 1}\" fill=\"${fill || \"red\"}\" ${id_str} ${class_str} />`;\r\n    }\r\n\r\n}\r\nFlatten.Point = Point;\r\n/**\r\n * Function to create point equivalent to \"new\" constructor\r\n * @param args\r\n */\r\nconst point = (...args) => new Flatten.Point(...args);\r\nFlatten.point = point;\r\n\r\n// export {Point};\r\n\r\n/**\r\n * Created by Alex Bol on 2/19/2017.\r\n */\r\n\r\n/**\r\n * Class representing a vector\r\n * @type {Vector}\r\n */\r\nclass Vector {\r\n    /**\r\n     * Vector may be constructed by two points, or by two float numbers,\r\n     * or by array of two numbers\r\n     * @param {Point} ps - start point\r\n     * @param {Point} pe - end point\r\n     */\r\n    constructor(...args) {\r\n        /**\r\n         * x-coordinate of a vector (float number)\r\n         * @type {number}\r\n         */\r\n        this.x = 0;\r\n        /**\r\n         * y-coordinate of a vector (float number)\r\n         * @type {number}\r\n         */\r\n        this.y = 0;\r\n\r\n        /* return zero vector */\r\n        if (args.length === 0) {\r\n            return;\r\n        }\r\n\r\n        if (args.length === 1 && args[0] instanceof Array && args[0].length === 2) {\r\n            let arr = args[0];\r\n            if (typeof (arr[0]) == \"number\" && typeof (arr[1]) == \"number\") {\r\n                this.x = arr[0];\r\n                this.y = arr[1];\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (args.length === 1 && args[0] instanceof Object && args[0].name === \"vector\") {\r\n            let {x, y} = args[0];\r\n            this.x = x;\r\n            this.y = y;\r\n            return;\r\n        }\r\n\r\n        if (args.length === 2) {\r\n            let a1 = args[0];\r\n            let a2 = args[1];\r\n\r\n            if (typeof (a1) == \"number\" && typeof (a2) == \"number\") {\r\n                this.x = a1;\r\n                this.y = a2;\r\n                return;\r\n            }\r\n\r\n            if (a1 instanceof Flatten.Point && a2 instanceof Flatten.Point) {\r\n                this.x = a2.x - a1.x;\r\n                this.y = a2.y - a1.y;\r\n                return;\r\n            }\r\n\r\n        }\r\n\r\n        throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n    }\r\n\r\n    /**\r\n     * Method clone returns new instance of Vector\r\n     * @returns {Vector}\r\n     */\r\n    clone() {\r\n        return new Flatten.Vector(this.x, this.y);\r\n    }\r\n\r\n    /**\r\n     * Slope of the vector in radians from 0 to 2PI\r\n     * @returns {number}\r\n     */\r\n    get slope() {\r\n        let angle = Math.atan2(this.y, this.x);\r\n        if (angle < 0) angle = 2 * Math.PI + angle;\r\n        return angle;\r\n    }\r\n\r\n    /**\r\n     * Length of vector\r\n     * @returns {number}\r\n     */\r\n    get length() {\r\n        return Math.sqrt(this.dot(this));\r\n    }\r\n\r\n    /**\r\n     * Returns true if vectors are equal up to [DP_TOL]{@link http://localhost:63342/flatten-js/docs/global.html#DP_TOL}\r\n     * tolerance\r\n     * @param {Vector} v\r\n     * @returns {boolean}\r\n     */\r\n    equalTo(v) {\r\n        return Flatten.Utils.EQ(this.x, v.x) && Flatten.Utils.EQ(this.y, v.y);\r\n    }\r\n\r\n    /**\r\n     * Returns new vector multiplied by scalar\r\n     * @param {number} scalar\r\n     * @returns {Vector}\r\n     */\r\n    multiply(scalar) {\r\n        return (new Flatten.Vector(scalar * this.x, scalar * this.y));\r\n    }\r\n\r\n    /**\r\n     * Returns scalar product (dot product) of two vectors <br/>\r\n     * <code>dot_product = (this * v)</code>\r\n     * @param {Vector} v Other vector\r\n     * @returns {number}\r\n     */\r\n    dot(v) {\r\n        return (this.x * v.x + this.y * v.y);\r\n    }\r\n\r\n    /**\r\n     * Returns vector product (cross product) of two vectors <br/>\r\n     * <code>cross_product = (this x v)</code>\r\n     * @param {Vector} v Other vector\r\n     * @returns {number}\r\n     */\r\n    cross(v) {\r\n        return (this.x * v.y - this.y * v.x);\r\n    }\r\n\r\n    /**\r\n     * Returns unit vector.<br/>\r\n     * Throw error if given vector has zero length\r\n     * @returns {Vector}\r\n     */\r\n    normalize() {\r\n        if (!Flatten.Utils.EQ_0(this.length)) {\r\n            return (new Flatten.Vector(this.x / this.length, this.y / this.length));\r\n        }\r\n        throw Flatten.Errors.ZERO_DIVISION;\r\n    }\r\n\r\n    /**\r\n     * Returns new vector rotated by given angle,\r\n     * positive angle defines rotation in counter clockwise direction,\r\n     * negative - in clockwise direction\r\n     * @param {number} angle - Angle in radians\r\n     * @returns {Vector}\r\n     */\r\n    rotate(angle) {\r\n        let point = new Flatten.Point(this.x, this.y);\r\n        let rpoint = point.rotate(angle);\r\n        return new Flatten.Vector(rpoint.x, rpoint.y);\r\n    }\r\n\r\n    /**\r\n     * Returns vector rotated 90 degrees counter clockwise\r\n     * @returns {Vector}\r\n     */\r\n    rotate90CCW() {\r\n        return new Flatten.Vector(-this.y, this.x);\r\n    };\r\n\r\n    /**\r\n     * Returns vector rotated 90 degrees clockwise\r\n     * @returns {Vector}\r\n     */\r\n    rotate90CW() {\r\n        return new Flatten.Vector(this.y, -this.x);\r\n    };\r\n\r\n    /**\r\n     * Return inverted vector\r\n     * @returns {Vector}\r\n     */\r\n    invert() {\r\n        return new Flatten.Vector(-this.x, -this.y);\r\n    }\r\n\r\n    /**\r\n     * Return result of addition of other vector to this vector as a new vector\r\n     * @param {Vector} v Other vector\r\n     * @returns {Vector}\r\n     */\r\n    add(v) {\r\n        return new Flatten.Vector(this.x + v.x, this.y + v.y);\r\n    }\r\n\r\n    /**\r\n     * Return result of subtraction of other vector from current vector as a new vector\r\n     * @param {Vector} v Another vector\r\n     * @returns {Vector}\r\n     */\r\n    subtract(v) {\r\n        return new Flatten.Vector(this.x - v.x, this.y - v.y);\r\n    }\r\n\r\n    /**\r\n     * Return angle between this vector and other vector. <br/>\r\n     * Angle is measured from 0 to 2*PI in the counter clockwise direction\r\n     * from current vector to other.\r\n     * @param {Vector} v Another vector\r\n     * @returns {number}\r\n     */\r\n    angleTo(v) {\r\n        let norm1 = this.normalize();\r\n        let norm2 = v.normalize();\r\n        let angle = Math.atan2(norm1.cross(norm2), norm1.dot(norm2));\r\n        if (angle < 0) angle += 2 * Math.PI;\r\n        return angle;\r\n    }\r\n\r\n    /**\r\n     * Return vector projection of the current vector on another vector\r\n     * @param {Vector} v Another vector\r\n     * @returns {Vector}\r\n     */\r\n    projectionOn(v) {\r\n        let n = v.normalize();\r\n        let d = this.dot(n);\r\n        return n.multiply(d);\r\n    }\r\n\r\n    /**\r\n     * This method returns an object that defines how data will be\r\n     * serialized when called JSON.stringify() method\r\n     * @returns {Object}\r\n     */\r\n    toJSON() {\r\n        return Object.assign({}, this, {name: \"vector\"});\r\n    }\r\n}\r\nFlatten.Vector = Vector;\r\n\r\n/**\r\n * Function to create vector equivalent to \"new\" constructor\r\n * @param args\r\n */\r\nconst vector = (...args) => new Flatten.Vector(...args);\r\nFlatten.vector = vector;\r\n\r\n/**\r\n * Created by Alex Bol on 3/10/2017.\r\n */\r\n\r\n/**\r\n * Class representing a segment\r\n * @type {Segment}\r\n */\r\nclass Segment {\r\n    /**\r\n     *\r\n     * @param {Point} ps - start point\r\n     * @param {Point} pe - end point\r\n     */\r\n    constructor(...args) {\r\n        /**\r\n         * Start point\r\n         * @type {Point}\r\n         */\r\n        this.ps = new Flatten.Point();\r\n        /**\r\n         * End Point\r\n         * @type {Point}\r\n         */\r\n        this.pe = new Flatten.Point();\r\n\r\n        if (args.length === 0) {\r\n            return;\r\n        }\r\n\r\n        if (args.length === 1 && args[0] instanceof Array && args[0].length === 4) {\r\n            let coords = args[0];\r\n            this.ps = new Flatten.Point(coords[0], coords[1]);\r\n            this.pe = new Flatten.Point(coords[2], coords[3]);\r\n            return;\r\n        }\r\n\r\n        if (args.length === 1 && args[0] instanceof Object && args[0].name === \"segment\") {\r\n            let {ps, pe} = args[0];\r\n            this.ps = new Flatten.Point(ps.x, ps.y);\r\n            this.pe = new Flatten.Point(pe.x, pe.y);\r\n            return;\r\n        }\r\n\r\n        // second point omitted issue #84\r\n        if (args.length === 1 && args[0] instanceof Flatten.Point) {\r\n            this.ps = args[0].clone();\r\n            return;\r\n        }\r\n\r\n        if (args.length === 2 && args[0] instanceof Flatten.Point && args[1] instanceof Flatten.Point) {\r\n            this.ps = args[0].clone();\r\n            this.pe = args[1].clone();\r\n            return;\r\n        }\r\n\r\n        if (args.length === 4) {\r\n            this.ps = new Flatten.Point(args[0], args[1]);\r\n            this.pe = new Flatten.Point(args[2], args[3]);\r\n            return;\r\n        }\r\n\r\n        throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n    }\r\n\r\n    /**\r\n     * Return new cloned instance of segment\r\n     * @returns {Segment}\r\n     */\r\n    clone() {\r\n        return new Flatten.Segment(this.start, this.end);\r\n    }\r\n\r\n    /**\r\n     * Start point\r\n     * @returns {Point}\r\n     */\r\n    get start() {\r\n        return this.ps;\r\n    }\r\n\r\n    /**\r\n     * End point\r\n     * @returns {Point}\r\n     */\r\n    get end() {\r\n        return this.pe;\r\n    }\r\n\r\n\r\n    /**\r\n     * Returns array of start and end point\r\n     * @returns [Point,Point]\r\n     */\r\n    get vertices() {\r\n        return [this.ps.clone(), this.pe.clone()];\r\n    }\r\n\r\n    /**\r\n     * Length of a segment\r\n     * @returns {number}\r\n     */\r\n    get length() {\r\n        return this.start.distanceTo(this.end)[0];\r\n    }\r\n\r\n    /**\r\n     * Slope of the line - angle to axe x in radians from 0 to 2PI\r\n     * @returns {number}\r\n     */\r\n    get slope() {\r\n        let vec = new Flatten.Vector(this.start, this.end);\r\n        return vec.slope;\r\n    }\r\n\r\n    /**\r\n     * Bounding box\r\n     * @returns {Box}\r\n     */\r\n    get box() {\r\n        return new Flatten.Box(\r\n            Math.min(this.start.x, this.end.x),\r\n            Math.min(this.start.y, this.end.y),\r\n            Math.max(this.start.x, this.end.x),\r\n            Math.max(this.start.y, this.end.y)\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Returns true if equals to query segment, false otherwise\r\n     * @param {Seg} seg - query segment\r\n     * @returns {boolean}\r\n     */\r\n    equalTo(seg) {\r\n        return this.ps.equalTo(seg.ps) && this.pe.equalTo(seg.pe);\r\n    }\r\n\r\n    /**\r\n     * Returns true if segment contains point\r\n     * @param {Point} pt Query point\r\n     * @returns {boolean}\r\n     */\r\n    contains(pt) {\r\n        return Flatten.Utils.EQ_0(this.distanceToPoint(pt));\r\n    }\r\n\r\n    /**\r\n     * Returns array of intersection points between segment and other shape\r\n     * @param {Shape} shape - Shape of the one of supported types <br/>\r\n     * @returns {Point[]}\r\n     */\r\n    intersect(shape) {\r\n        if (shape instanceof Flatten.Point) {\r\n            return this.contains(shape) ? [shape] : [];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Line) {\r\n            return intersectSegment2Line(this, shape);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Segment) {\r\n            return  intersectSegment2Segment(this, shape);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Circle) {\r\n            return intersectSegment2Circle(this, shape);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Box) {\r\n            return intersectSegment2Box(this, shape);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Arc) {\r\n            return intersectSegment2Arc(this, shape);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Polygon) {\r\n            return  intersectSegment2Polygon(this, shape);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate distance and shortest segment from segment to shape and return as array [distance, shortest segment]\r\n     * @param {Shape} shape Shape of the one of supported types Point, Line, Circle, Segment, Arc, Polygon or Planar Set\r\n     * @returns {number} distance from segment to shape\r\n     * @returns {Segment} shortest segment between segment and shape (started at segment, ended at shape)\r\n     */\r\n    distanceTo(shape) {\r\n        if (shape instanceof Flatten.Point) {\r\n            let [dist, shortest_segment] = Flatten.Distance.point2segment(shape, this);\r\n            shortest_segment = shortest_segment.reverse();\r\n            return [dist, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Circle) {\r\n            let [dist, shortest_segment] = Flatten.Distance.segment2circle(this, shape);\r\n            return [dist, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Line) {\r\n            let [dist, shortest_segment] = Flatten.Distance.segment2line(this, shape);\r\n            return [dist, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Segment) {\r\n            let [dist, shortest_segment] = Flatten.Distance.segment2segment(this, shape);\r\n            return [dist, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Arc) {\r\n            let [dist, shortest_segment] = Flatten.Distance.segment2arc(this, shape);\r\n            return [dist, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Polygon) {\r\n            let [dist, shortest_segment] = Flatten.Distance.shape2polygon(this, shape);\r\n            return [dist, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.PlanarSet) {\r\n            let [dist, shortest_segment] = Flatten.Distance.shape2planarSet(this, shape);\r\n            return [dist, shortest_segment];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns unit vector in the direction from start to end\r\n     * @returns {Vector}\r\n     */\r\n    tangentInStart() {\r\n        let vec = new Flatten.Vector(this.start, this.end);\r\n        return vec.normalize();\r\n    }\r\n\r\n    /**\r\n     * Return unit vector in the direction from end to start\r\n     * @returns {Vector}\r\n     */\r\n    tangentInEnd() {\r\n        let vec = new Flatten.Vector(this.end, this.start);\r\n        return vec.normalize();\r\n    }\r\n\r\n    /**\r\n     * Returns new segment with swapped start and end points\r\n     * @returns {Segment}\r\n     */\r\n    reverse() {\r\n        return new Segment(this.end, this.start);\r\n    }\r\n\r\n    /**\r\n     * When point belongs to segment, return array of two segments split by given point,\r\n     * if point is inside segment. Returns clone of this segment if query point is incident\r\n     * to start or end point of the segment. Returns empty array if point does not belong to segment\r\n     * @param {Point} pt Query point\r\n     * @returns {Segment[]}\r\n     */\r\n    split(pt) {\r\n        if (this.start.equalTo(pt))\r\n            return [null, this.clone()];\r\n\r\n        if (this.end.equalTo(pt))\r\n            return [this.clone(), null];\r\n\r\n        return [\r\n            new Flatten.Segment(this.start, pt),\r\n            new Flatten.Segment(pt, this.end)\r\n        ]\r\n    }\r\n\r\n    /**\r\n     * Return middle point of the segment\r\n     * @returns {Point}\r\n     */\r\n    middle() {\r\n        return new Flatten.Point((this.start.x + this.end.x) / 2, (this.start.y + this.end.y) / 2);\r\n    }\r\n\r\n    /**\r\n     * Get point at given length\r\n     * @param {number} length - The length along the segment\r\n     * @returns {Point}\r\n     */\r\n    pointAtLength(length) {\r\n        if (length > this.length || length < 0) return null;\r\n        if (length == 0) return this.start;\r\n        if (length == this.length) return this.end;\r\n        let factor = length / this.length;\r\n        return new Flatten.Point(\r\n            (this.end.x - this.start.x) * factor + this.start.x,\r\n            (this.end.y - this.start.y) * factor + this.start.y\r\n        );\r\n    }\r\n\r\n    distanceToPoint(pt) {\r\n        let [dist, ...rest] = Flatten.Distance.point2segment(pt, this);\r\n        return dist;\r\n    };\r\n\r\n    definiteIntegral(ymin = 0.0) {\r\n        let dx = this.end.x - this.start.x;\r\n        let dy1 = this.start.y - ymin;\r\n        let dy2 = this.end.y - ymin;\r\n        return (dx * (dy1 + dy2) / 2);\r\n    }\r\n\r\n    /**\r\n     * Returns new segment translated by vector vec\r\n     * @param {Vector} vec\r\n     * @returns {Segment}\r\n     */\r\n    translate(...args) {\r\n        return new Segment(this.ps.translate(...args), this.pe.translate(...args));\r\n    }\r\n\r\n    /**\r\n     * Return new segment rotated by given angle around given point\r\n     * If point omitted, rotate around origin (0,0)\r\n     * Positive value of angle defines rotation counter clockwise, negative - clockwise\r\n     * @param {number} angle - rotation angle in radians\r\n     * @param {Point} center - center point, default is (0,0)\r\n     * @returns {Segment}\r\n     */\r\n    rotate(angle = 0, center = new Flatten.Point()) {\r\n        let m = new Flatten.Matrix();\r\n        m = m.translate(center.x, center.y).rotate(angle).translate(-center.x, -center.y);\r\n        return this.transform(m);\r\n    }\r\n\r\n    /**\r\n     * Return new segment transformed using affine transformation matrix\r\n     * @param {Matrix} matrix - affine transformation matrix\r\n     * @returns {Segment} - transformed segment\r\n     */\r\n    transform(matrix = new Flatten.Matrix()) {\r\n        return new Segment(this.ps.transform(matrix), this.pe.transform(matrix))\r\n    }\r\n\r\n    /**\r\n     * Returns true if segment start is equal to segment end up to DP_TOL\r\n     * @returns {boolean}\r\n     */\r\n    isZeroLength() {\r\n        return this.ps.equalTo(this.pe)\r\n    }\r\n\r\n    /**\r\n     * Sort given array of points from segment start to end, assuming all points lay on the segment\r\n     * @param {Point[]} - array of points\r\n     * @returns {Point[]} new array sorted\r\n     */\r\n    sortPoints(pts) {\r\n        let line = new Flatten.Line(this.start, this.end);\r\n        return line.sortPoints(pts);\r\n    }\r\n\r\n    /**\r\n     * This method returns an object that defines how data will be\r\n     * serialized when called JSON.stringify() method\r\n     * @returns {Object}\r\n     */\r\n    toJSON() {\r\n        return Object.assign({}, this, {name: \"segment\"});\r\n    }\r\n\r\n    /**\r\n     * Return string to draw segment in svg\r\n     * @param {Object} attrs - an object with attributes for svg path element,\r\n     * like \"stroke\", \"strokeWidth\" <br/>\r\n     * Defaults are stroke:\"black\", strokeWidth:\"1\"\r\n     * @returns {string}\r\n     */\r\n    svg(attrs = {}) {\r\n        let {stroke, strokeWidth, id, className} = attrs;\r\n        // let rest_str = Object.keys(rest).reduce( (acc, key) => acc += ` ${key}=\"${rest[key]}\"`, \"\");\r\n        let id_str = (id && id.length > 0) ? `id=\"${id}\"` : \"\";\r\n        let class_str = (className && className.length > 0) ? `class=\"${className}\"` : \"\";\r\n\r\n        return `\\n<line x1=\"${this.start.x}\" y1=\"${this.start.y}\" x2=\"${this.end.x}\" y2=\"${this.end.y}\" stroke=\"${stroke || \"black\"}\" stroke-width=\"${strokeWidth || 1}\" ${id_str} ${class_str} />`;\r\n\r\n    }\r\n\r\n}\r\nFlatten.Segment = Segment;\r\n/**\r\n * Shortcut method to create new segment\r\n */\r\nconst segment = (...args) => new Flatten.Segment(...args);\r\nFlatten.segment = segment;\r\n\r\n/**\r\n * Created by Alex Bol on 2/20/2017.\r\n */\r\n\r\nlet {vector: vector$1} = Flatten;\r\n\r\n/**\r\n * Class representing a line\r\n * @type {Line}\r\n */\r\nclass Line {\r\n    /**\r\n     * Line may be constructed by point and normal vector or by two points that a line passes through\r\n     * @param {Point} pt - point that a line passes through\r\n     * @param {Vector|Point} norm - normal vector to a line or second point a line passes through\r\n     */\r\n    constructor(...args) {\r\n        /**\r\n         * Point a line passes through\r\n         * @type {Point}\r\n         */\r\n        this.pt = new Flatten.Point();\r\n        /**\r\n         * Normal vector to a line <br/>\r\n         * Vector is normalized (length == 1)<br/>\r\n         * Direction of the vector is chosen to satisfy inequality norm * p >= 0\r\n         * @type {Vector}\r\n         */\r\n        this.norm = new Flatten.Vector(0, 1);\r\n\r\n        if (args.length == 0) {\r\n            return;\r\n        }\r\n\r\n        if (args.length == 1 && args[0] instanceof Object && args[0].name === \"line\") {\r\n            let {pt, norm} = args[0];\r\n            this.pt = new Flatten.Point(pt);\r\n            this.norm = new Flatten.Vector(norm);\r\n            return;\r\n        }\r\n\r\n        if (args.length == 2) {\r\n            let a1 = args[0];\r\n            let a2 = args[1];\r\n\r\n            if (a1 instanceof Flatten.Point && a2 instanceof Flatten.Point) {\r\n                this.pt = a1;\r\n                this.norm = Line.points2norm(a1, a2);\r\n                if (this.norm.dot(vector$1(this.pt.x,this.pt.y)) >= 0) {\r\n                    this.norm.invert();\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (a1 instanceof Flatten.Point && a2 instanceof Flatten.Vector) {\r\n                if (Flatten.Utils.EQ_0(a2.x) && Flatten.Utils.EQ_0(a2.y)) {\r\n                    throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n                }\r\n                this.pt = a1.clone();\r\n                this.norm = a2.clone();\r\n                this.norm = this.norm.normalize();\r\n                if (this.norm.dot(vector$1(this.pt.x,this.pt.y)) >= 0) {\r\n                    this.norm.invert();\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (a1 instanceof Flatten.Vector && a2 instanceof Flatten.Point) {\r\n                if (Flatten.Utils.EQ_0(a1.x) && Flatten.Utils.EQ_0(a1.y)) {\r\n                    throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n                }\r\n                this.pt = a2.clone();\r\n                this.norm = a1.clone();\r\n                this.norm = this.norm.normalize();\r\n                if (this.norm.dot(vector$1(this.pt.x,this.pt.y)) >= 0) {\r\n                    this.norm.invert();\r\n                }\r\n                return;\r\n            }\r\n        }\r\n\r\n        throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n    }\r\n\r\n    /**\r\n     * Return new cloned instance of line\r\n     * @returns {Line}\r\n     */\r\n    clone() {\r\n        return new Flatten.Line(this.pt, this.norm);\r\n    }\r\n\r\n    /* The following methods need for implementation of Edge interface\r\n    /**\r\n     * Line has no start point\r\n     * @returns {undefined}\r\n     */\r\n    get start() {return undefined;}\r\n\r\n    /**\r\n     * Line has no end point\r\n     */\r\n    get end() {return undefined;}\r\n\r\n    /**\r\n     * Return positive infinity number as length\r\n     * @returns {number}\r\n     */\r\n    get length() {return Number.POSITIVE_INFINITY;}\r\n\r\n    /**\r\n     * Returns infinite box\r\n     * @returns {Box}\r\n     */\r\n    get box() {\r\n        return new Flatten.Box(\r\n            Number.NEGATIVE_INFINITY,\r\n            Number.NEGATIVE_INFINITY,\r\n            Number.POSITIVE_INFINITY,\r\n            Number.POSITIVE_INFINITY\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Middle point is undefined\r\n     * @returns {undefined}\r\n     */\r\n    get middle() {return undefined}\r\n\r\n    /**\r\n     * Slope of the line - angle in radians between line and axe x from 0 to 2PI\r\n     * @returns {number} - slope of the line\r\n     */\r\n    get slope() {\r\n        let vec = new Flatten.Vector(this.norm.y, -this.norm.x);\r\n        return vec.slope;\r\n    }\r\n\r\n    /**\r\n     * Get coefficients [A,B,C] of a standard line equation in the form Ax + By = C\r\n     * @code [A, B, C] = line.standard\r\n     * @returns {number[]} - array of coefficients\r\n     */\r\n    get standard() {\r\n        let A = this.norm.x;\r\n        let B = this.norm.y;\r\n        let C = this.norm.dot(this.pt);\r\n\r\n        return [A, B, C];\r\n    }\r\n\r\n    /**\r\n     * Return true if parallel or incident to other line\r\n     * @param {Line} other_line - line to check\r\n     * @returns {boolean}\r\n     */\r\n    parallelTo(other_line) {\r\n        return Flatten.Utils.EQ_0(this.norm.cross(other_line.norm));\r\n    }\r\n\r\n    /**\r\n     * Returns true if incident to other line\r\n     * @param {Line} other_line - line to check\r\n     * @returns {boolean}\r\n     */\r\n    incidentTo(other_line) {\r\n        return this.parallelTo(other_line) && this.pt.on(other_line);\r\n    }\r\n\r\n    /**\r\n     * Returns true if point belongs to line\r\n     * @param {Point} pt Query point\r\n     * @returns {boolean}\r\n     */\r\n    contains(pt) {\r\n        if (this.pt.equalTo(pt)) {\r\n            return true;\r\n        }\r\n        /* Line contains point if vector to point is orthogonal to the line normal vector */\r\n        let vec = new Flatten.Vector(this.pt, pt);\r\n        return Flatten.Utils.EQ_0(this.norm.dot(vec));\r\n    }\r\n\r\n    /**\r\n     * Return coordinate of the point that lays on the line in the transformed\r\n     * coordinate system where center is the projection of the point(0,0) to\r\n     * the line and axe y is collinear to the normal vector. <br/>\r\n     * This method assumes that point lays on the line and does not check it\r\n     * @param {Point} pt - point on line\r\n     * @returns {number}\r\n     */\r\n    coord(pt) {\r\n        return vector$1(pt.x, pt.y).cross(this.norm);\r\n    }\r\n\r\n    /**\r\n     * Returns array of intersection points\r\n     * @param {Shape} shape - shape to intersect with\r\n     * @returns {Point[]}\r\n     */\r\n    intersect(shape) {\r\n        if (shape instanceof Flatten.Point) {\r\n            return this.contains(shape) ? [shape] : [];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Line) {\r\n            return intersectLine2Line(this, shape);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Circle) {\r\n            return intersectLine2Circle(this, shape);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Box) {\r\n            return intersectLine2Box(this, shape);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Segment) {\r\n            return intersectSegment2Line(shape, this);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Arc) {\r\n            return intersectLine2Arc(this, shape);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Polygon) {\r\n            return  intersectLine2Polygon(this, shape);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Calculate distance and shortest segment from line to shape and returns array [distance, shortest_segment]\r\n     * @param {Shape} shape Shape of the one of the types Point, Circle, Segment, Arc, Polygon\r\n     * @returns {Number}\r\n     * @returns {Segment}\r\n     */\r\n    distanceTo(shape) {\r\n        if (shape instanceof Flatten.Point) {\r\n            let [distance, shortest_segment] = Flatten.Distance.point2line(shape, this);\r\n            shortest_segment = shortest_segment.reverse();\r\n            return [distance, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Circle) {\r\n            let [distance, shortest_segment] = Flatten.Distance.circle2line(shape, this);\r\n            shortest_segment = shortest_segment.reverse();\r\n            return [distance, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Segment) {\r\n            let [distance, shortest_segment] = Flatten.Distance.segment2line(shape, this);\r\n            return [distance, shortest_segment.reverse()];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Arc) {\r\n            let [distance, shortest_segment] = Flatten.Distance.arc2line(shape, this);\r\n            return [distance, shortest_segment.reverse()];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Polygon) {\r\n            let [distance, shortest_segment] = Flatten.Distance.shape2polygon(this, shape);\r\n            return [distance, shortest_segment];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Split line with array of points and return array of shapes\r\n     * Assumed that all points lay on the line\r\n     * @param {Point[]}\r\n     * @returns {Shape[]}\r\n     */\r\n    split(pt) {\r\n        if (pt instanceof Flatten.Point) {\r\n            return [new Flatten.Ray(pt, this.norm.invert()), new Flatten.Ray(pt, this.norm)]\r\n        }\r\n        else {\r\n            let multiline = new Flatten.Multiline([this]);\r\n            let sorted_points = this.sortPoints(pt);\r\n            multiline.split(sorted_points);\r\n            return multiline.toShapes();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sort given array of points that lay on line with respect to coordinate on a line\r\n     * The method assumes that points lay on the line and does not check this\r\n     * @param {Point[]} pts - array of points\r\n     * @returns {Point[]} new array sorted\r\n     */\r\n    sortPoints(pts) {\r\n        return pts.slice().sort( (pt1, pt2) => {\r\n            if (this.coord(pt1) < this.coord(pt2)) {\r\n                return -1;\r\n            }\r\n            if (this.coord(pt1) > this.coord(pt2)) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        })\r\n    }\r\n\r\n    /**\r\n     * This method returns an object that defines how data will be\r\n     * serialized when called JSON.stringify() method\r\n     * @returns {Object}\r\n     */\r\n    toJSON() {\r\n        return Object.assign({}, this, {name: \"line\"});\r\n    }\r\n\r\n    /**\r\n     * Return string to draw svg segment representing line inside given box\r\n     * @param {Box} box Box representing drawing area\r\n     * @param {Object} attrs - an object with attributes of svg circle element\r\n     */\r\n    svg(box, attrs = {}) {\r\n        let ip = intersectLine2Box(this, box);\r\n        if (ip.length === 0)\r\n            return \"\";\r\n        let ps = ip[0];\r\n        let pe = ip.length == 2 ? ip[1] : ip.find(pt => !pt.equalTo(ps));\r\n        if (pe === undefined) pe = ps;\r\n        let segment = new Flatten.Segment(ps, pe);\r\n        return segment.svg(attrs);\r\n    }\r\n\r\n    static points2norm(pt1, pt2) {\r\n        if (pt1.equalTo(pt2)) {\r\n            throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n        }\r\n        let vec = new Flatten.Vector(pt1, pt2);\r\n        let unit = vec.normalize();\r\n        return unit.rotate90CCW();\r\n    }\r\n}\r\nFlatten.Line = Line;\r\n/**\r\n * Function to create line equivalent to \"new\" constructor\r\n * @param args\r\n */\r\nconst line = (...args) => new Flatten.Line(...args);\r\nFlatten.line = line;\r\n\r\n/**\r\n * Created by Alex Bol on 3/6/2017.\r\n */\r\n\r\n/**\r\n * Class representing a circle\r\n * @type {Circle}\r\n */\r\nclass Circle {\r\n    /**\r\n     *\r\n     * @param {Point} pc - circle center point\r\n     * @param {number} r - circle radius\r\n     */\r\n    constructor(...args) {\r\n        /**\r\n         * Circle center\r\n         * @type {Point}\r\n         */\r\n        this.pc = new Flatten.Point();\r\n        /**\r\n         * Circle radius\r\n         * @type {number}\r\n         */\r\n        this.r = 1;\r\n\r\n        if (args.length == 1 && args[0] instanceof Object && args[0].name === \"circle\") {\r\n            let {pc, r} = args[0];\r\n            this.pc = new Flatten.Point(pc);\r\n            this.r = r;\r\n            return;\r\n        } else {\r\n            let [pc, r] = [...args];\r\n            if (pc && pc instanceof Flatten.Point) this.pc = pc.clone();\r\n            if (r !== undefined) this.r = r;\r\n            return;\r\n        }\r\n\r\n        throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n    }\r\n\r\n    /**\r\n     * Return new cloned instance of circle\r\n     * @returns {Circle}\r\n     */\r\n    clone() {\r\n        return new Flatten.Circle(this.pc.clone(), this.r);\r\n    }\r\n\r\n    /**\r\n     * Circle center\r\n     * @returns {Point}\r\n     */\r\n    get center() {\r\n        return this.pc;\r\n    }\r\n\r\n    /**\r\n     * Circle bounding box\r\n     * @returns {Box}\r\n     */\r\n    get box() {\r\n        return new Flatten.Box(\r\n            this.pc.x - this.r,\r\n            this.pc.y - this.r,\r\n            this.pc.x + this.r,\r\n            this.pc.y + this.r\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Return true if circle contains shape: no point of shape lies outside of the circle\r\n     * @param {Shape} shape - test shape\r\n     * @returns {boolean}\r\n     */\r\n    contains(shape) {\r\n        if (shape instanceof Flatten.Point) {\r\n            return Flatten.Utils.LE(shape.distanceTo(this.center)[0], this.r);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Segment) {\r\n            return Flatten.Utils.LE(shape.start.distanceTo(this.center)[0], this.r) &&\r\n                Flatten.Utils.LE(shape.end.distanceTo(this.center)[0], this.r);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Arc) {\r\n            return this.intersect(shape).length === 0 &&\r\n                Flatten.Utils.LE(shape.start.distanceTo(this.center)[0], this.r) &&\r\n                Flatten.Utils.LE(shape.end.distanceTo(this.center)[0], this.r);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Circle) {\r\n            return this.intersect(shape).length === 0 &&\r\n                Flatten.Utils.LE(shape.r, this.r) &&\r\n                Flatten.Utils.LE(shape.center.distanceTo(this.center)[0], this.r);\r\n        }\r\n\r\n        /* TODO: box, polygon */\r\n    }\r\n\r\n    /**\r\n     * Transform circle to closed arc\r\n     * @param {boolean} counterclockwise\r\n     * @returns {Arc}\r\n     */\r\n    toArc(counterclockwise = true) {\r\n        return new Flatten.Arc(this.center, this.r, Math.PI, -Math.PI, counterclockwise);\r\n    }\r\n\r\n    /**\r\n     * Returns array of intersection points between circle and other shape\r\n     * @param {Shape} shape Shape of the one of supported types\r\n     * @returns {Point[]}\r\n     */\r\n    intersect(shape) {\r\n        if (shape instanceof Flatten.Point) {\r\n            return this.contains(shape) ? [shape] : [];\r\n        }\r\n        if (shape instanceof Flatten.Line) {\r\n            return intersectLine2Circle(shape, this);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Segment) {\r\n            return intersectSegment2Circle(shape, this);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Circle) {\r\n            return intersectCircle2Circle(shape, this);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Box) {\r\n            return intersectCircle2Box(this, shape);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Arc) {\r\n            return intersectArc2Circle(shape, this);\r\n        }\r\n        if (shape instanceof Flatten.Polygon) {\r\n            return intersectCircle2Polygon(this, shape);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate distance and shortest segment from circle to shape and return array [distance, shortest segment]\r\n     * @param {Shape} shape Shape of the one of supported types Point, Line, Circle, Segment, Arc, Polygon or Planar Set\r\n     * @returns {number} distance from circle to shape\r\n     * @returns {Segment} shortest segment between circle and shape (started at circle, ended at shape)\r\n\r\n     */\r\n    distanceTo(shape) {\r\n        if (shape instanceof Flatten.Point) {\r\n            let [distance, shortest_segment] = Flatten.Distance.point2circle(shape, this);\r\n            shortest_segment = shortest_segment.reverse();\r\n            return [distance, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Circle) {\r\n            let [distance, shortest_segment] = Flatten.Distance.circle2circle(this, shape);\r\n            return [distance, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Line) {\r\n            let [distance, shortest_segment] = Flatten.Distance.circle2line(this, shape);\r\n            return [distance, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Segment) {\r\n            let [distance, shortest_segment] = Flatten.Distance.segment2circle(shape, this);\r\n            shortest_segment = shortest_segment.reverse();\r\n            return [distance, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Arc) {\r\n            let [distance, shortest_segment] = Flatten.Distance.arc2circle(shape, this);\r\n            shortest_segment = shortest_segment.reverse();\r\n            return [distance, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Polygon) {\r\n            let [distance, shortest_segment] = Flatten.Distance.shape2polygon(this, shape);\r\n            return [distance, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.PlanarSet) {\r\n            let [dist, shortest_segment] = Flatten.Distance.shape2planarSet(this, shape);\r\n            return [dist, shortest_segment];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method returns an object that defines how data will be\r\n     * serialized when called JSON.stringify() method\r\n     * @returns {Object}\r\n     */\r\n    toJSON() {\r\n        return Object.assign({}, this, {name: \"circle\"});\r\n    }\r\n\r\n    /**\r\n     * Return string to draw circle in svg\r\n     * @param {Object} attrs - an object with attributes of svg circle element,\r\n     * like \"stroke\", \"strokeWidth\", \"fill\" <br/>\r\n     * Defaults are stroke:\"black\", strokeWidth:\"1\", fill:\"none\"\r\n     * @returns {string}\r\n     */\r\n    svg(attrs = {}) {\r\n        let {stroke, strokeWidth, fill, fillOpacity, id, className} = attrs;\r\n        // let rest_str = Object.keys(rest).reduce( (acc, key) => acc += ` ${key}=\"${rest[key]}\"`, \"\");\r\n        let id_str = (id && id.length > 0) ? `id=\"${id}\"` : \"\";\r\n        let class_str = (className && className.length > 0) ? `class=\"${className}\"` : \"\";\r\n\r\n        return `\\n<circle cx=\"${this.pc.x}\" cy=\"${this.pc.y}\" r=\"${this.r}\" stroke=\"${stroke || \"black\"}\" stroke-width=\"${strokeWidth || 1}\" fill=\"${fill || \"none\"}\" fill-opacity=\"${fillOpacity || 1.0}\" ${id_str} ${class_str} />`;\r\n    }\r\n\r\n}\r\nFlatten.Circle = Circle;\r\n/**\r\n * Shortcut to create new circle\r\n * @param args\r\n */\r\nconst circle = (...args) => new Flatten.Circle(...args);\r\nFlatten.circle = circle;\r\n\r\n/**\r\n * Created by Alex Bol on 3/10/2017.\r\n */\r\n\r\n/**\r\n * Class representing a circular arc\r\n * @type {Arc}\r\n */\r\nclass Arc {\r\n    /**\r\n     *\r\n     * @param {Point} pc - arc center\r\n     * @param {number} r - arc radius\r\n     * @param {number} startAngle - start angle in radians from 0 to 2*PI\r\n     * @param {number} endAngle - end angle in radians from 0 to 2*PI\r\n     * @param {boolean} counterClockwise - arc direction, true - clockwise, false - counter clockwise\r\n     */\r\n    constructor(...args) {\r\n        /**\r\n         * Arc center\r\n         * @type {Point}\r\n         */\r\n        this.pc = new Flatten.Point();\r\n        /**\r\n         * Arc radius\r\n         * @type {number}\r\n         */\r\n        this.r = 1;\r\n        /**\r\n         * Arc start angle in radians\r\n         * @type {number}\r\n         */\r\n        this.startAngle = 0;\r\n        /**\r\n         * Arc end angle in radians\r\n         * @type {number}\r\n         */\r\n        this.endAngle = 2 * Math.PI;\r\n        /**\r\n         * Arc orientation\r\n         * @type {boolean}\r\n         */\r\n        this.counterClockwise = Flatten.CCW;\r\n\r\n        if (args.length == 0)\r\n            return;\r\n\r\n        if (args.length == 1 && args[0] instanceof Object && args[0].name === \"arc\") {\r\n            let {pc, r, startAngle, endAngle, counterClockwise} = args[0];\r\n            this.pc = new Flatten.Point(pc.x, pc.y);\r\n            this.r = r;\r\n            this.startAngle = startAngle;\r\n            this.endAngle = endAngle;\r\n            this.counterClockwise = counterClockwise;\r\n            return;\r\n        } else {\r\n            let [pc, r, startAngle, endAngle, counterClockwise] = [...args];\r\n            if (pc && pc instanceof Flatten.Point) this.pc = pc.clone();\r\n            if (r !== undefined) this.r = r;\r\n            if (startAngle !== undefined) this.startAngle = startAngle;\r\n            if (endAngle !== undefined) this.endAngle = endAngle;\r\n            if (counterClockwise !== undefined) this.counterClockwise = counterClockwise;\r\n            return;\r\n        }\r\n\r\n        throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n    }\r\n\r\n    /**\r\n     * Return new cloned instance of arc\r\n     * @returns {Arc}\r\n     */\r\n    clone() {\r\n        return new Flatten.Arc(this.pc.clone(), this.r, this.startAngle, this.endAngle, this.counterClockwise);\r\n    }\r\n\r\n    /**\r\n     * Get sweep angle in radians. Sweep angle is non-negative number from 0 to 2*PI\r\n     * @returns {number}\r\n     */\r\n    get sweep() {\r\n        if (Flatten.Utils.EQ(this.startAngle, this.endAngle))\r\n            return 0.0;\r\n        if (Flatten.Utils.EQ(Math.abs(this.startAngle - this.endAngle), Flatten.PIx2)) {\r\n            return Flatten.PIx2;\r\n        }\r\n        let sweep;\r\n        if (this.counterClockwise) {\r\n            sweep = Flatten.Utils.GT(this.endAngle, this.startAngle) ?\r\n                this.endAngle - this.startAngle : this.endAngle - this.startAngle + Flatten.PIx2;\r\n        } else {\r\n            sweep = Flatten.Utils.GT(this.startAngle, this.endAngle) ?\r\n                this.startAngle - this.endAngle : this.startAngle - this.endAngle + Flatten.PIx2;\r\n        }\r\n\r\n        if (Flatten.Utils.GT(sweep, Flatten.PIx2)) {\r\n            sweep -= Flatten.PIx2;\r\n        }\r\n        if (Flatten.Utils.LT(sweep, 0)) {\r\n            sweep += Flatten.PIx2;\r\n        }\r\n        return sweep;\r\n    }\r\n\r\n    /**\r\n     * Get start point of arc\r\n     * @returns {Point}\r\n     */\r\n    get start() {\r\n        let p0 = new Flatten.Point(this.pc.x + this.r, this.pc.y);\r\n        return p0.rotate(this.startAngle, this.pc);\r\n    }\r\n\r\n    /**\r\n     * Get end point of arc\r\n     * @returns {Point}\r\n     */\r\n    get end() {\r\n        let p0 = new Flatten.Point(this.pc.x + this.r, this.pc.y);\r\n        return p0.rotate(this.endAngle, this.pc);\r\n    }\r\n\r\n    /**\r\n     * Get center of arc\r\n     * @returns {Point}\r\n     */\r\n    get center() {\r\n        return this.pc.clone();\r\n    }\r\n\r\n    get vertices() {\r\n        return [this.start.clone(), this.end.clone()];\r\n    }\r\n\r\n    /**\r\n     * Get arc length\r\n     * @returns {number}\r\n     */\r\n    get length() {\r\n        return Math.abs(this.sweep * this.r);\r\n    }\r\n\r\n    /**\r\n     * Get bounding box of the arc\r\n     * @returns {Box}\r\n     */\r\n    get box() {\r\n        let func_arcs = this.breakToFunctional();\r\n        let box = func_arcs.reduce((acc, arc) => acc.merge(arc.start.box), new Flatten.Box());\r\n        box = box.merge(this.end.box);\r\n        return box;\r\n    }\r\n\r\n    /**\r\n     * Returns true if arc contains point, false otherwise\r\n     * @param {Point} pt - point to test\r\n     * @returns {boolean}\r\n     */\r\n    contains(pt) {\r\n        // first check if  point on circle (pc,r)\r\n        if (!Flatten.Utils.EQ(this.pc.distanceTo(pt)[0], this.r))\r\n            return false;\r\n\r\n        // point on circle\r\n\r\n        if (pt.equalTo(this.start))\r\n            return true;\r\n\r\n        let angle = new Flatten.Vector(this.pc, pt).slope;\r\n        let test_arc = new Flatten.Arc(this.pc, this.r, this.startAngle, angle, this.counterClockwise);\r\n        return Flatten.Utils.LE(test_arc.length, this.length);\r\n    }\r\n\r\n    /**\r\n     * When given point belongs to arc, return array of two arcs split by this point. If points is incident\r\n     * to start or end point of the arc, return clone of the arc. If point does not belong to the arcs, return\r\n     * empty array.\r\n     * @param {Point} pt Query point\r\n     * @returns {Arc[]}\r\n     */\r\n    split(pt) {\r\n        if (this.start.equalTo(pt))\r\n            return [null, this.clone()];\r\n\r\n        if (this.end.equalTo(pt))\r\n            return [this.clone(), null];\r\n\r\n        let angle = new Flatten.Vector(this.pc, pt).slope;\r\n\r\n        return [\r\n            new Flatten.Arc(this.pc, this.r, this.startAngle, angle, this.counterClockwise),\r\n            new Flatten.Arc(this.pc, this.r, angle, this.endAngle, this.counterClockwise)\r\n        ]\r\n    }\r\n\r\n    /**\r\n     * Return middle point of the arc\r\n     * @returns {Point}\r\n     */\r\n    middle() {\r\n        let endAngle = this.counterClockwise ? this.startAngle + this.sweep / 2 : this.startAngle - this.sweep / 2;\r\n        let arc = new Flatten.Arc(this.pc, this.r, this.startAngle, endAngle, this.counterClockwise);\r\n        return arc.end;\r\n    }\r\n\r\n    /**\r\n     * Get point at given length\r\n     * @param {number} length - The length along the arc\r\n     * @returns {Point}\r\n     */\r\n    pointAtLength(length) {\r\n        if (length > this.length || length < 0) return null;\r\n        if (length == 0) return this.start;\r\n        if (length == this.length) return this.end;\r\n        let factor = length / this.length;\r\n        let endAngle = this.counterClockwise ? this.startAngle + this.sweep * factor : this.startAngle - this.sweep * factor;\r\n        let arc = new Flatten.Arc(this.pc, this.r, this.startAngle, endAngle, this.counterClockwise);\r\n        return arc.end;\r\n    }\r\n\r\n    /**\r\n     * Returns chord height (\"sagitta\") of the arc\r\n     * @returns {number}\r\n     */\r\n    chordHeight() {\r\n        return (1.0 - Math.cos(Math.abs(this.sweep / 2.0))) * this.r;\r\n    }\r\n\r\n    /**\r\n     * Returns array of intersection points between arc and other shape\r\n     * @param {Shape} shape Shape of the one of supported types <br/>\r\n     * @returns {Points[]}\r\n     */\r\n    intersect(shape) {\r\n        if (shape instanceof Flatten.Point) {\r\n            return this.contains(shape) ? [shape] : [];\r\n        }\r\n        if (shape instanceof Flatten.Line) {\r\n            return intersectLine2Arc(shape, this);\r\n        }\r\n        if (shape instanceof Flatten.Circle) {\r\n            return intersectArc2Circle(this, shape);\r\n        }\r\n        if (shape instanceof Flatten.Segment) {\r\n            return intersectSegment2Arc(shape, this);\r\n        }\r\n        if (shape instanceof Flatten.Box) {\r\n            return intersectArc2Box(this, shape);\r\n        }\r\n        if (shape instanceof Flatten.Arc) {\r\n            return intersectArc2Arc(this, shape);\r\n        }\r\n        if (shape instanceof Flatten.Polygon) {\r\n            return intersectArc2Polygon(this, shape);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate distance and shortest segment from arc to shape and return array [distance, shortest segment]\r\n     * @param {Shape} shape Shape of the one of supported types Point, Line, Circle, Segment, Arc, Polygon or Planar Set\r\n     * @returns {number} distance from arc to shape\r\n     * @returns {Segment} shortest segment between arc and shape (started at arc, ended at shape)\r\n\r\n     */\r\n    distanceTo(shape) {\r\n        if (shape instanceof Flatten.Point) {\r\n            let [dist, shortest_segment] = Flatten.Distance.point2arc(shape, this);\r\n            shortest_segment = shortest_segment.reverse();\r\n            return [dist, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Circle) {\r\n            let [dist, shortest_segment] = Flatten.Distance.arc2circle(this, shape);\r\n            return [dist, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Line) {\r\n            let [dist, shortest_segment] = Flatten.Distance.arc2line(this, shape);\r\n            return [dist, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Segment) {\r\n            let [dist, shortest_segment] = Flatten.Distance.segment2arc(shape, this);\r\n            shortest_segment = shortest_segment.reverse();\r\n            return [dist, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Arc) {\r\n            let [dist, shortest_segment] = Flatten.Distance.arc2arc(this, shape);\r\n            return [dist, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Polygon) {\r\n            let [dist, shortest_segment] = Flatten.Distance.shape2polygon(this, shape);\r\n            return [dist, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.PlanarSet) {\r\n            let [dist, shortest_segment] = Flatten.Distance.shape2planarSet(this, shape);\r\n            return [dist, shortest_segment];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Breaks arc in extreme point 0, pi/2, pi, 3*pi/2 and returns array of sub-arcs\r\n     * @returns {Arcs[]}\r\n     */\r\n    breakToFunctional() {\r\n        let func_arcs_array = [];\r\n        let angles = [0, Math.PI / 2, 2 * Math.PI / 2, 3 * Math.PI / 2];\r\n        let pts = [\r\n            this.pc.translate(this.r, 0),\r\n            this.pc.translate(0, this.r),\r\n            this.pc.translate(-this.r, 0),\r\n            this.pc.translate(0, -this.r)\r\n        ];\r\n\r\n        // If arc contains extreme point,\r\n        // create test arc started at start point and ended at this extreme point\r\n        let test_arcs = [];\r\n        for (let i = 0; i < 4; i++) {\r\n            if (pts[i].on(this)) {\r\n                test_arcs.push(new Flatten.Arc(this.pc, this.r, this.startAngle, angles[i], this.counterClockwise));\r\n            }\r\n        }\r\n\r\n        if (test_arcs.length == 0) {                  // arc does contain any extreme point\r\n            func_arcs_array.push(this.clone());\r\n        } else {                                        // arc passes extreme point\r\n            // sort these arcs by length\r\n            test_arcs.sort((arc1, arc2) => arc1.length - arc2.length);\r\n\r\n            for (let i = 0; i < test_arcs.length; i++) {\r\n                let prev_arc = func_arcs_array.length > 0 ? func_arcs_array[func_arcs_array.length - 1] : undefined;\r\n                let new_arc;\r\n                if (prev_arc) {\r\n                    new_arc = new Flatten.Arc(this.pc, this.r, prev_arc.endAngle, test_arcs[i].endAngle, this.counterClockwise);\r\n                } else {\r\n                    new_arc = new Flatten.Arc(this.pc, this.r, this.startAngle, test_arcs[i].endAngle, this.counterClockwise);\r\n                }\r\n                if (!Flatten.Utils.EQ_0(new_arc.length)) {\r\n                    func_arcs_array.push(new_arc.clone());\r\n                }\r\n            }\r\n\r\n            // add last sub arc\r\n            let prev_arc = func_arcs_array.length > 0 ? func_arcs_array[func_arcs_array.length - 1] : undefined;\r\n            let new_arc;\r\n            if (prev_arc) {\r\n                new_arc = new Flatten.Arc(this.pc, this.r, prev_arc.endAngle, this.endAngle, this.counterClockwise);\r\n            } else {\r\n                new_arc = new Flatten.Arc(this.pc, this.r, this.startAngle, this.endAngle, this.counterClockwise);\r\n            }\r\n            // It could be 2*PI when occasionally start = 0 and end = 2*PI but this is not valid for breakToFunctional\r\n            if (!Flatten.Utils.EQ_0(new_arc.length) && !Flatten.Utils.EQ(new_arc.sweep, 2*Math.PI)) {\r\n                func_arcs_array.push(new_arc.clone());\r\n            }\r\n        }\r\n        return func_arcs_array;\r\n    }\r\n\r\n    /**\r\n     * Return tangent unit vector in the start point in the direction from start to end\r\n     * @returns {Vector}\r\n     */\r\n    tangentInStart() {\r\n        let vec = new Flatten.Vector(this.pc, this.start);\r\n        let angle = this.counterClockwise ? Math.PI / 2. : -Math.PI / 2.;\r\n        let tangent = vec.rotate(angle).normalize();\r\n        return tangent;\r\n    }\r\n\r\n    /**\r\n     * Return tangent unit vector in the end point in the direction from end to start\r\n     * @returns {Vector}\r\n     */\r\n    tangentInEnd() {\r\n        let vec = new Flatten.Vector(this.pc, this.end);\r\n        let angle = this.counterClockwise ? -Math.PI / 2. : Math.PI / 2.;\r\n        let tangent = vec.rotate(angle).normalize();\r\n        return tangent;\r\n    }\r\n\r\n    /**\r\n     * Returns new arc with swapped start and end angles and reversed direction\r\n     * @returns {Arc}\r\n     */\r\n    reverse() {\r\n        return new Flatten.Arc(this.pc, this.r, this.endAngle, this.startAngle, !this.counterClockwise);\r\n    }\r\n\r\n    /**\r\n     * Returns new arc translated by vector vec\r\n     * @param {Vector} vec\r\n     * @returns {Segment}\r\n     */\r\n    translate(...args) {\r\n        let arc = this.clone();\r\n        arc.pc = this.pc.translate(...args);\r\n        return arc;\r\n    }\r\n\r\n    /**\r\n     * Return new segment rotated by given angle around given point\r\n     * If point omitted, rotate around origin (0,0)\r\n     * Positive value of angle defines rotation counter clockwise, negative - clockwise\r\n     * @param {number} angle - rotation angle in radians\r\n     * @param {Point} center - center point, default is (0,0)\r\n     * @returns {Arc}\r\n     */\r\n    rotate(angle = 0, center = new Flatten.Point()) {\r\n        let m = new Flatten.Matrix();\r\n        m = m.translate(center.x, center.y).rotate(angle).translate(-center.x, -center.y);\r\n        return this.transform(m);\r\n    }\r\n\r\n    /**\r\n     * Return new arc scaled by scaleX, scaleY.\r\n     * @param {number} scaleX - scale value by X\r\n     * @param {number} scaleY - scale value by Y\r\n     * @returns {Arc}\r\n     */\r\n    scale(scaleX = 1, scaleY = 1) {\r\n        let m = new Flatten.Matrix();\r\n        m = m.scale(scaleX, scaleY);\r\n        return this.transform(m);\r\n    }\r\n\r\n    /**\r\n     * Return new arc transformed using affine transformation matrix <br/>\r\n     * Note 1. Non-equal scaling by x and y (abs(matrix[0]) != abs(matrix[3])) produce illegal result because\r\n     * it should create elliptic arc but this package does not support ellipses\r\n     * Note 2. Mirror transformation (matrix[0] * matrix[3] < 0) change direction of the arc to the opposite\r\n     * TODO: support non-equal scaling arc to ellipse or throw exception ?\r\n     * @param {Matrix} matrix - affine transformation matrix\r\n     * @returns {Arc}\r\n     */\r\n    transform(matrix = new Flatten.Matrix()) {\r\n        let newStart = this.start.transform(matrix);\r\n        let newEnd = this.end.transform(matrix);\r\n        let newCenter = this.pc.transform(matrix);\r\n        let newDirection = this.counterClockwise;\r\n        if (matrix.a * matrix.d < 0) {\r\n          newDirection = !newDirection;\r\n        }\r\n        let arc = Flatten.Arc.arcSE(newCenter, newStart, newEnd, newDirection);\r\n        return arc;\r\n    }\r\n\r\n    static arcSE(center, start, end, counterClockwise) {\r\n        let {vector} = Flatten;\r\n        let startAngle = vector(center, start).slope;\r\n        let endAngle = vector(center, end).slope;\r\n        if (Flatten.Utils.EQ(startAngle, endAngle)) {\r\n            endAngle += 2 * Math.PI;\r\n            counterClockwise = true;\r\n        }\r\n        let r = vector(center, start).length;\r\n\r\n        return new Flatten.Arc(center, r, startAngle, endAngle, counterClockwise);\r\n    }\r\n\r\n    definiteIntegral(ymin = 0) {\r\n        let f_arcs = this.breakToFunctional();\r\n        let area = f_arcs.reduce((acc, arc) => acc + arc.circularSegmentDefiniteIntegral(ymin), 0.0);\r\n        return area;\r\n    }\r\n\r\n    circularSegmentDefiniteIntegral(ymin) {\r\n        let line = new Flatten.Line(this.start, this.end);\r\n        let onLeftSide = this.pc.leftTo(line);\r\n        let segment = new Flatten.Segment(this.start, this.end);\r\n        let areaTrapez = segment.definiteIntegral(ymin);\r\n        let areaCircularSegment = this.circularSegmentArea();\r\n        let area = onLeftSide ? areaTrapez - areaCircularSegment : areaTrapez + areaCircularSegment;\r\n        return area;\r\n    }\r\n\r\n    circularSegmentArea() {\r\n        return (0.5 * this.r * this.r * (this.sweep - Math.sin(this.sweep)))\r\n    }\r\n\r\n    /**\r\n     * Sort given array of points from arc start to end, assuming all points lay on the arc\r\n     * @param {Point[]} array of points\r\n     * @returns {Point[]} new array sorted\r\n     */\r\n    sortPoints(pts) {\r\n        let {vector} = Flatten;\r\n        return pts.slice().sort( (pt1, pt2) => {\r\n            let slope1 = vector(this.pc, pt1).slope;\r\n            let slope2 = vector(this.pc, pt2).slope;\r\n            if (slope1 < slope2) {\r\n                return -1;\r\n            }\r\n            if (slope1 > slope2) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        })\r\n    }\r\n\r\n    /**\r\n     * This method returns an object that defines how data will be\r\n     * serialized when called JSON.stringify() method\r\n     * @returns {Object}\r\n     */\r\n    toJSON() {\r\n        return Object.assign({}, this, {name: \"arc\"});\r\n    }\r\n\r\n    /**\r\n     * Return string to draw arc in svg\r\n     * @param {Object} attrs - an object with attributes of svg path element,\r\n     * like \"stroke\", \"strokeWidth\", \"fill\" <br/>\r\n     * Defaults are stroke:\"black\", strokeWidth:\"1\", fill:\"none\"\r\n     * @returns {string}\r\n     */\r\n    svg(attrs = {}) {\r\n        let largeArcFlag = this.sweep <= Math.PI ? \"0\" : \"1\";\r\n        let sweepFlag = this.counterClockwise ? \"1\" : \"0\";\r\n        let {stroke, strokeWidth, fill, id, className} = attrs;\r\n        // let rest_str = Object.keys(rest).reduce( (acc, key) => acc += ` ${key}=\"${rest[key]}\"`, \"\");\r\n        let id_str = (id && id.length > 0) ? `id=\"${id}\"` : \"\";\r\n        let class_str = (className && className.length > 0) ? `class=\"${className}\"` : \"\";\r\n\r\n        if (Flatten.Utils.EQ(this.sweep, 2 * Math.PI)) {\r\n            let circle = new Flatten.Circle(this.pc, this.r);\r\n            return circle.svg(attrs);\r\n        } else {\r\n            return `\\n<path d=\"M${this.start.x},${this.start.y}\r\n                             A${this.r},${this.r} 0 ${largeArcFlag},${sweepFlag} ${this.end.x},${this.end.y}\"\r\n                    stroke=\"${stroke || \"black\"}\" stroke-width=\"${strokeWidth || 1}\" fill=\"${fill || \"none\"}\" ${id_str} ${class_str} />`\r\n        }\r\n    }\r\n\r\n}\r\nFlatten.Arc = Arc;\r\n/**\r\n * Function to create arc equivalent to \"new\" constructor\r\n * @param args\r\n */\r\nconst arc = (...args) => new Flatten.Arc(...args);\r\nFlatten.arc = arc;\r\n\r\n/**\r\n * Created by Alex Bol on 3/7/2017.\r\n */\r\n\r\n/**\r\n * Class Box represent bounding box of the shape\r\n * @type {Box}\r\n */\r\nclass Box {\r\n    /**\r\n     *\r\n     * @param {number} xmin - minimal x coordinate\r\n     * @param {number} ymin - minimal y coordinate\r\n     * @param {number} xmax - maximal x coordinate\r\n     * @param {number} ymax - maximal y coordinate\r\n     */\r\n    constructor(xmin = undefined, ymin = undefined, xmax = undefined, ymax = undefined) {\r\n        /**\r\n         * Minimal x coordinate\r\n         * @type {number}\r\n         */\r\n        this.xmin = xmin;\r\n        /**\r\n         * Minimal y coordinate\r\n         * @type {number}\r\n         */\r\n        this.ymin = ymin;\r\n        /**\r\n         * Maximal x coordinate\r\n         * @type {number}\r\n         */\r\n        this.xmax = xmax;\r\n        /**\r\n         * Maximal y coordinate\r\n         * @type {number}\r\n         */\r\n        this.ymax = ymax;\r\n    }\r\n\r\n    /**\r\n     * Return new cloned instance of box\r\n     * @returns {Box}\r\n     */\r\n    clone() {\r\n        return new Box(this.xmin, this.ymin, this.xmax, this.ymax);\r\n    }\r\n\r\n    /**\r\n     * Property low need for interval tree interface\r\n     * @returns {Point}\r\n     */\r\n    get low() {\r\n        return new Flatten.Point(this.xmin, this.ymin);\r\n    }\r\n\r\n    /**\r\n     * Property high need for interval tree interface\r\n     * @returns {Point}\r\n     */\r\n    get high() {\r\n        return new Flatten.Point(this.xmax, this.ymax);\r\n    }\r\n\r\n    /**\r\n     * Property max returns the box itself !\r\n     * @returns {Box}\r\n     */\r\n    get max() {\r\n        return this.clone();\r\n    }\r\n    \r\n    /**\r\n     * Return center of the box\r\n     * @returns {Point}\r\n     */\r\n    get center() {\r\n        return new Flatten.Point((this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2);\r\n    }\r\n\r\n    /**\r\n     * Return the width of the box\r\n     * @returns {number}\r\n     */\r\n    get width() {\r\n        return Math.abs(this.xmax - this.xmin);\r\n    }\r\n\r\n    /**\r\n     * Return the height of the box\r\n     * @returns {number}\r\n     */\r\n    get height() {\r\n        return Math.abs(this.ymax - this.ymin);\r\n    }\r\n    \r\n    /**\r\n     * Return property box like all other shapes\r\n     * @returns {Box}\r\n     */\r\n    get box() {\r\n        return this.clone();\r\n    }\r\n\r\n    /**\r\n     * Returns true if not intersected with other box\r\n     * @param {Box} other_box - other box to test\r\n     * @returns {boolean}\r\n     */\r\n    not_intersect(other_box) {\r\n        return (\r\n            this.xmax < other_box.xmin ||\r\n            this.xmin > other_box.xmax ||\r\n            this.ymax < other_box.ymin ||\r\n            this.ymin > other_box.ymax\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns true if intersected with other box\r\n     * @param {Box} other_box - Query box\r\n     * @returns {boolean}\r\n     */\r\n    intersect(other_box) {\r\n        return !this.not_intersect(other_box);\r\n    }\r\n\r\n    /**\r\n     * Returns new box merged with other box\r\n     * @param {Box} other_box - Other box to merge with\r\n     * @returns {Box}\r\n     */\r\n    merge(other_box) {\r\n        return new Box(\r\n            this.xmin === undefined ? other_box.xmin : Math.min(this.xmin, other_box.xmin),\r\n            this.ymin === undefined ? other_box.ymin : Math.min(this.ymin, other_box.ymin),\r\n            this.xmax === undefined ? other_box.xmax : Math.max(this.xmax, other_box.xmax),\r\n            this.ymax === undefined ? other_box.ymax : Math.max(this.ymax, other_box.ymax)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Defines predicate \"less than\" between two boxes. Need for interval index\r\n     * @param {Box} other_box - other box\r\n     * @returns {boolean} - true if this box less than other box, false otherwise\r\n     */\r\n    less_than(other_box) {\r\n        if (this.low.lessThan(other_box.low))\r\n            return true;\r\n        if (this.low.equalTo(other_box.low) && this.high.lessThan(other_box.high))\r\n            return true;\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns true if this box is equal to other box, false otherwise\r\n     * @param {Box} other_box - query box\r\n     * @returns {boolean}\r\n     */\r\n    equal_to(other_box) {\r\n        return (this.low.equalTo(other_box.low) && this.high.equalTo(other_box.high));\r\n    }\r\n\r\n    output() {\r\n        return this.clone();\r\n    }\r\n\r\n    static comparable_max(box1, box2) {\r\n        // return pt1.lessThan(pt2) ? pt2.clone() : pt1.clone();\r\n        return box1.merge(box2);\r\n    }\r\n\r\n    static comparable_less_than(pt1, pt2) {\r\n        return pt1.lessThan(pt2);\r\n    }\r\n\r\n    /**\r\n     * Set new values to the box object\r\n     * @param {number} xmin - miminal x coordinate\r\n     * @param {number} ymin - minimal y coordinate\r\n     * @param {number} xmax - maximal x coordinate\r\n     * @param {number} ymax - maximal y coordinate\r\n     */\r\n    set(xmin, ymin, xmax, ymax) {\r\n        this.xmin = xmin;\r\n        this.ymin = ymin;\r\n        this.xmax = xmax;\r\n        this.ymax = ymax;\r\n    }\r\n\r\n    /**\r\n     * Transform box into array of points from low left corner in counter clockwise\r\n     * @returns {Point[]}\r\n     */\r\n    toPoints() {\r\n        return [\r\n            new Flatten.Point(this.xmin, this.ymin),\r\n            new Flatten.Point(this.xmax, this.ymin),\r\n            new Flatten.Point(this.xmax, this.ymax),\r\n            new Flatten.Point(this.xmin, this.ymax)\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Transform box into array of segments from low left corner in counter clockwise\r\n     * @returns {Segment[]}\r\n     */\r\n    toSegments() {\r\n        let pts = this.toPoints();\r\n        return [\r\n            new Flatten.Segment(pts[0], pts[1]),\r\n            new Flatten.Segment(pts[1], pts[2]),\r\n            new Flatten.Segment(pts[2], pts[3]),\r\n            new Flatten.Segment(pts[3], pts[0])\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Return string to draw circle in svg\r\n     * @param {Object} attrs - an object with attributes of svg rectangle element,\r\n     * like \"stroke\", \"strokeWidth\", \"fill\" <br/>\r\n     * Defaults are stroke:\"black\", strokeWidth:\"1\", fill:\"none\"\r\n     * @returns {string}\r\n     */\r\n    svg(attrs = {}) {\r\n        let {stroke, strokeWidth, fill, id, className} = attrs;\r\n        // let rest_str = Object.keys(rest).reduce( (acc, key) => acc += ` ${key}=\"${rest[key]}\"`, \"\");\r\n        let id_str = (id && id.length > 0) ? `id=\"${id}\"` : \"\";\r\n        let class_str = (className && className.length > 0) ? `class=\"${className}\"` : \"\";\r\n        let width = this.xmax - this.xmin;\r\n        let height = this.ymax - this.ymin;\r\n\r\n        return `\\n<rect x=\"${this.xmin}\" y=\"${this.ymin}\" width=${width} height=${height} stroke=\"${stroke || \"black\"}\" stroke-width=\"${strokeWidth || 1}\" fill=\"${fill || \"none\"}\" ${id_str} ${class_str} />`;\r\n    };\r\n}\r\nFlatten.Box = Box;\r\n/**\r\n * Shortcut to create new box\r\n * @param args\r\n * @returns {Box}\r\n */\r\nconst box = (...args) => new Flatten.Box(...args);\r\nFlatten.box = box;\r\n\r\n/**\r\n * Created by Alex Bol on 3/17/2017.\r\n */\r\n\r\n/**\r\n * Class representing an edge of polygon. Edge shape may be Segment or Arc.\r\n * Each edge contains references to the next and previous edges in the face of the polygon.\r\n *\r\n * @type {Edge}\r\n */\r\nclass Edge {\r\n    /**\r\n     * Construct new instance of edge\r\n     * @param {Shape} shape Shape of type Segment or Arc\r\n     */\r\n    constructor(shape) {\r\n        /**\r\n         * Shape of the edge: Segment or Arc\r\n         * @type {Segment|Arc}\r\n         */\r\n        this.shape = shape;\r\n        /**\r\n         * Pointer to the next edge in the face\r\n         * @type {Edge}\r\n         */\r\n        this.next = undefined;\r\n        /**\r\n         * Pointer to the previous edge in the face\r\n         * @type {Edge}\r\n         */\r\n        this.prev = undefined;\r\n        /**\r\n         * Pointer to the face containing this edge\r\n         * @type {Face}\r\n         */\r\n        this.face = undefined;\r\n        /**\r\n         * \"Arc distance\" from the face start\r\n         * @type {number}\r\n         */\r\n        this.arc_length = 0;\r\n        /**\r\n         * Start inclusion flag (inside/outside/boundary)\r\n         * @type {*}\r\n         */\r\n        this.bvStart = undefined;\r\n        /**\r\n         * End inclusion flag (inside/outside/boundary)\r\n         * @type {*}\r\n         */\r\n        this.bvEnd = undefined;\r\n        /**\r\n         * Edge inclusion flag (Flatten.INSIDE, Flatten.OUTSIDE, Flatten.BOUNDARY)\r\n         * @type {*}\r\n         */\r\n        this.bv = undefined;\r\n        /**\r\n         * Overlap flag for boundary edge (Flatten.OVERLAP_SAME/Flatten.OVERLAP_OPPOSITE)\r\n         * @type {*}\r\n         */\r\n        this.overlap = undefined;\r\n    }\r\n\r\n    /**\r\n     * Get edge start point\r\n     */\r\n    get start() {\r\n        return this.shape.start;\r\n    }\r\n\r\n    /**\r\n     * Get edge end point\r\n     */\r\n    get end() {\r\n        return this.shape.end;\r\n    }\r\n\r\n    /**\r\n     * Get edge length\r\n     */\r\n    get length() {\r\n        return this.shape.length;\r\n    }\r\n\r\n    /**\r\n     * Get bounding box of the edge\r\n     * @returns {Box}\r\n     */\r\n    get box() {\r\n        return this.shape.box;\r\n    }\r\n\r\n    isSegment() {\r\n        return this.shape instanceof Flatten.Segment;\r\n    }\r\n\r\n    isArc() {\r\n        return this.shape instanceof Flatten.Arc;\r\n    }\r\n\r\n    /**\r\n     * Get middle point of the edge\r\n     * @returns {Point}\r\n     */\r\n    middle() {\r\n        return this.shape.middle();\r\n    }\r\n\r\n    /**\r\n     * Get point at given length\r\n     * @param {number} length - The length along the edge\r\n     * @returns {Point}\r\n     */\r\n    pointAtLength(length) {\r\n        return this.shape.pointAtLength(length);\r\n    }\r\n\r\n    /**\r\n     * Returns true if point belongs to the edge, false otherwise\r\n     * @param {Point} pt - test point\r\n     */\r\n    contains(pt) {\r\n        return this.shape.contains(pt);\r\n    }\r\n\r\n    /**\r\n     * Set inclusion flag of the edge with respect to another polygon\r\n     * Inclusion flag is one of Flatten.INSIDE, Flatten.OUTSIDE, Flatten.BOUNDARY\r\n     * @param polygon\r\n     */\r\n    setInclusion(polygon) {\r\n        if (this.bv !== undefined) return this.bv;\r\n\r\n        if (this.shape instanceof Flatten.Line || this.shape instanceof Flatten.Ray) {\r\n            this.bv = Flatten.OUTSIDE;\r\n            return this.bv;\r\n        }\r\n\r\n        if (this.bvStart === undefined) {\r\n            this.bvStart = ray_shoot(polygon, this.start);\r\n        }\r\n        if (this.bvEnd === undefined) {\r\n            this.bvEnd = ray_shoot(polygon, this.end);\r\n        }\r\n        /* At least one end outside - the whole edge outside */\r\n        if (this.bvStart === Flatten.OUTSIDE || this.bvEnd == Flatten.OUTSIDE) {\r\n            this.bv = Flatten.OUTSIDE;\r\n        }\r\n        /* At least one end inside - the whole edge inside */\r\n        else if (this.bvStart === Flatten.INSIDE || this.bvEnd == Flatten.INSIDE) {\r\n            this.bv = Flatten.INSIDE;\r\n        }\r\n        /* Both are boundary - check the middle point */\r\n        else {\r\n            let bvMiddle = ray_shoot(polygon, this.middle());\r\n            // let boundary = this.middle().distanceTo(polygon)[0] < 10*Flatten.DP_TOL;\r\n            // let bvMiddle = boundary ? Flatten.BOUNDARY : ray_shoot(polygon, this.middle());\r\n            this.bv = bvMiddle;\r\n        }\r\n        return this.bv;\r\n    }\r\n\r\n    /**\r\n     * Set overlapping between two coincident boundary edges\r\n     * Overlapping flag is one of Flatten.OVERLAP_SAME or Flatten.OVERLAP_OPPOSITE\r\n     * @param edge\r\n     */\r\n    setOverlap(edge) {\r\n        let flag = undefined;\r\n        let shape1 = this.shape;\r\n        let shape2 = edge.shape;\r\n\r\n        if (shape1 instanceof Flatten.Segment && shape2 instanceof Flatten.Segment) {\r\n            if (shape1.start.equalTo(shape2.start) && shape1.end.equalTo(shape2.end)) {\r\n                flag = Flatten.OVERLAP_SAME;\r\n            } else if (shape1.start.equalTo(shape2.end) && shape1.end.equalTo(shape2.start)) {\r\n                flag = Flatten.OVERLAP_OPPOSITE;\r\n            }\r\n        } else if (shape1 instanceof Flatten.Arc && shape2 instanceof Flatten.Arc) {\r\n            if (shape1.start.equalTo(shape2.start) && shape1.end.equalTo(shape2.end) && /*shape1.counterClockwise === shape2.counterClockwise &&*/\r\n                shape1.middle().equalTo(shape2.middle())) {\r\n                flag = Flatten.OVERLAP_SAME;\r\n            } else if (shape1.start.equalTo(shape2.end) && shape1.end.equalTo(shape2.start) && /*shape1.counterClockwise !== shape2.counterClockwise &&*/\r\n                shape1.middle().equalTo(shape2.middle())) {\r\n                flag = Flatten.OVERLAP_OPPOSITE;\r\n            }\r\n        } else if (shape1 instanceof Flatten.Segment && shape2 instanceof Flatten.Arc ||\r\n            shape1 instanceof Flatten.Arc && shape2 instanceof Flatten.Segment) {\r\n            if (shape1.start.equalTo(shape2.start) && shape1.end.equalTo(shape2.end) && shape1.middle().equalTo(shape2.middle())) {\r\n                flag = Flatten.OVERLAP_SAME;\r\n            } else if (shape1.start.equalTo(shape2.end) && shape1.end.equalTo(shape2.start) && shape1.middle().equalTo(shape2.middle())) {\r\n                flag = Flatten.OVERLAP_OPPOSITE;\r\n            }\r\n        }\r\n\r\n        /* Do not update overlap flag if already set on previous chain */\r\n        if (this.overlap === undefined) this.overlap = flag;\r\n        if (edge.overlap === undefined) edge.overlap = flag;\r\n    }\r\n\r\n    svg() {\r\n        if (this.shape instanceof Flatten.Segment) {\r\n            return ` L${this.shape.end.x},${this.shape.end.y}`;\r\n        } else if (this.shape instanceof Flatten.Arc) {\r\n            let arc = this.shape;\r\n            let largeArcFlag;\r\n            let sweepFlag = arc.counterClockwise ? \"1\" : \"0\";\r\n\r\n            // Draw full circe arc as special case: split it into two half-circles\r\n            if (Flatten.Utils.EQ(arc.sweep, 2 * Math.PI)) {\r\n                let sign = arc.counterClockwise ? 1 : -1;\r\n                let halfArc1 = new Flatten.Arc(arc.pc, arc.r, arc.startAngle, arc.startAngle + sign * Math.PI, arc.counterClockwise);\r\n                let halfArc2 = new Flatten.Arc(arc.pc, arc.r, arc.startAngle + sign * Math.PI, arc.endAngle, arc.counterClockwise);\r\n\r\n                largeArcFlag = \"0\";\r\n\r\n                return ` A${halfArc1.r},${halfArc1.r} 0 ${largeArcFlag},${sweepFlag} ${halfArc1.end.x},${halfArc1.end.y}\r\n                    A${halfArc2.r},${halfArc2.r} 0 ${largeArcFlag},${sweepFlag} ${halfArc2.end.x},${halfArc2.end.y}`\r\n            } else {\r\n                largeArcFlag = arc.sweep <= Math.PI ? \"0\" : \"1\";\r\n\r\n                return ` A${arc.r},${arc.r} 0 ${largeArcFlag},${sweepFlag} ${arc.end.x},${arc.end.y}`;\r\n            }\r\n        }\r\n    }\r\n\r\n    toJSON() {\r\n        return this.shape.toJSON();\r\n    }\r\n}\r\nFlatten.Edge = Edge;\r\n\r\n/**\r\n * Class implements circular bidirectional linked list <br/>\r\n * LinkedListElement - object of any type that has properties next and prev.\r\n */\r\nclass CircularLinkedList extends LinkedList {\r\n    constructor(first, last) {\r\n        super(first, last);\r\n        this.setCircularLinks();\r\n    }\r\n\r\n    setCircularLinks() {\r\n        if (this.isEmpty()) return;\r\n        this.last.next = this.first;\r\n        this.first.prev = this.last;\r\n    }\r\n\r\n    [Symbol.iterator]() {\r\n        let element = undefined;\r\n        return {\r\n            next: () => {\r\n                let value = element ? element : this.first;\r\n                let done = this.first ? (element ? element === this.first : false) : true;\r\n                element = value ? value.next : undefined;\r\n                return {value: value, done: done};\r\n            }\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Append new element to the end of the list\r\n     * @param {LinkedListElement} element - new element to be appended\r\n     * @returns {CircularLinkedList}\r\n     */\r\n    append(element) {\r\n        super.append(element);\r\n        this.setCircularLinks();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Insert new element to the list after elementBefore\r\n     * @param {LinkedListElement} newElement - new element to be inserted\r\n     * @param {LinkedListElement} elementBefore - element in the list to insert after it\r\n     * @returns {CircularLinkedList}\r\n     */\r\n    insert(newElement, elementBefore) {\r\n        super.insert(newElement, elementBefore);\r\n        this.setCircularLinks();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove element from the list\r\n     * @param {LinkedListElement} element - element to be removed from the list\r\n     * @returns {CircularLinkedList}\r\n     */\r\n    remove(element) {\r\n        super.remove(element);\r\n        // this.setCircularLinks();\r\n        return this;\r\n    }\r\n}\r\n\r\n/**\r\n * Created by Alex Bol on 3/17/2017.\r\n */\r\n\r\n/**\r\n * Class representing a face (closed loop) in a [polygon]{@link Flatten.Polygon} object.\r\n * Face is a circular bidirectional linked list of [edges]{@link Flatten.Edge}.\r\n * Face object cannot be instantiated with a constructor.\r\n * Instead, use [polygon.addFace()]{@link Flatten.Polygon#addFace} method.\r\n * <br/>\r\n * Note, that face only set entry point to the linked list of edges but does not contain edges by itself.\r\n * Container of edges is a property of the polygon object. <br/>\r\n *\r\n * @example\r\n * // Face implements \"next\" iterator which enables to iterate edges in for loop:\r\n * for (let edge of face) {\r\n *      console.log(edge.shape.length)     // do something\r\n * }\r\n *\r\n * // Instead, it is possible to iterate edges as linked list, starting from face.first:\r\n * let edge = face.first;\r\n * do {\r\n *   console.log(edge.shape.length);   // do something\r\n *   edge = edge.next;\r\n * } while (edge != face.first)\r\n */\r\nclass Face extends CircularLinkedList {\r\n    constructor(polygon, ...args) {\r\n        super();            // construct empty list of edges\r\n        /**\r\n         * Reference to the first edge in face\r\n         */\r\n        // this.first;\r\n        /**\r\n         * Reference to the last edge in face\r\n         */\r\n        // this.last;\r\n\r\n        this._box = undefined;  // new Box();\r\n        this._orientation = undefined;\r\n\r\n        if (args.length == 0) {\r\n            return;\r\n        }\r\n\r\n        /* If passed an array it supposed to be:\r\n         1) array of shapes that performs close loop or\r\n         2) array of points that performs set of vertices\r\n         */\r\n        if (args.length == 1) {\r\n            if (args[0] instanceof Array) {\r\n                // let argsArray = args[0];\r\n                let shapes = args[0];  // argsArray[0];\r\n                if (shapes.length == 0)\r\n                    return;\r\n\r\n                /* array of Flatten.Points */\r\n                if (shapes.every((shape) => {return shape instanceof Flatten.Point})) {\r\n                    let segments = Face.points2segments(shapes);\r\n                    this.shapes2face(polygon.edges, segments);\r\n                }\r\n                /* array of points as pairs of numbers */\r\n                else if (shapes.every((shape) => {return shape instanceof Array && shape.length === 2})) {\r\n                    let points = shapes.map((shape) => new Flatten.Point(shape[0],shape[1]));\r\n                    let segments = Face.points2segments(points);\r\n                    this.shapes2face(polygon.edges, segments);\r\n                }\r\n                /* array of segments ot arcs */\r\n                else if (shapes.every((shape) => {\r\n                    return (shape instanceof Flatten.Segment || shape instanceof Flatten.Arc)\r\n                })) {\r\n                    this.shapes2face(polygon.edges, shapes);\r\n                }\r\n                // this is from JSON.parse object\r\n                else if (shapes.every((shape) => {\r\n                    return (shape.name === \"segment\" || shape.name === \"arc\")\r\n                })) {\r\n                    let flattenShapes = [];\r\n                    for (let shape of shapes) {\r\n                        let flattenShape;\r\n                        if (shape.name === \"segment\") {\r\n                            flattenShape = new Flatten.Segment(shape);\r\n                        } else {\r\n                            flattenShape = new Flatten.Arc(shape);\r\n                        }\r\n                        flattenShapes.push(flattenShape);\r\n                    }\r\n                    this.shapes2face(polygon.edges, flattenShapes);\r\n                }\r\n            }\r\n            /* Create new face and copy edges into polygon.edges set */\r\n            else if (args[0] instanceof Face) {\r\n                let face = args[0];\r\n                this.first = face.first;\r\n                this.last = face.last;\r\n                for (let edge of face) {\r\n                    polygon.edges.add(edge);\r\n                }\r\n            }\r\n            /* Instantiate face from a circle in CCW orientation */\r\n            else if (args[0] instanceof Flatten.Circle) {\r\n                this.shapes2face(polygon.edges, [args[0].toArc(Flatten.CCW)]);\r\n            }\r\n            /* Instantiate face from a box in CCW orientation */\r\n            else if (args[0] instanceof Flatten.Box) {\r\n                let box = args[0];\r\n                this.shapes2face(polygon.edges, [\r\n                    new Flatten.Segment(new Flatten.Point(box.xmin, box.ymin), new Flatten.Point(box.xmax, box.ymin)),\r\n                    new Flatten.Segment(new Flatten.Point(box.xmax, box.ymin), new Flatten.Point(box.xmax, box.ymax)),\r\n                    new Flatten.Segment(new Flatten.Point(box.xmax, box.ymax), new Flatten.Point(box.xmin, box.ymax)),\r\n                    new Flatten.Segment(new Flatten.Point(box.xmin, box.ymax), new Flatten.Point(box.xmin, box.ymin))\r\n                ]);\r\n            }\r\n        }\r\n        /* If passed two edges, consider them as start and end of the face loop */\r\n        /* THIS METHOD WILL BE USED BY BOOLEAN OPERATIONS */\r\n        /* Assume that edges already copied to polygon.edges set in the clip algorithm !!! */\r\n        if (args.length == 2 && args[0] instanceof Flatten.Edge && args[1] instanceof Flatten.Edge) {\r\n            this.first = args[0];                          // first edge in face or undefined\r\n            this.last = args[1];                           // last edge in face or undefined\r\n            this.last.next = this.first;\r\n            this.first.prev = this.last;\r\n\r\n            // set arc length\r\n            this.setArcLength();\r\n\r\n            // this.box = this.getBox();\r\n            // this.orientation = this.getOrientation();      // face direction cw or ccw\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return array of edges from first to last\r\n     * @returns {Array}\r\n     */\r\n    get edges() {\r\n        return this.toArray();\r\n    }\r\n\r\n    /**\r\n     * Return array of shapes which comprise face\r\n     * @returns {Array}\r\n     */\r\n    get shapes() {\r\n        return this.edges.map(edge => edge.shape.clone());\r\n    }\r\n\r\n    /**\r\n     * Return bounding box of the face\r\n     * @returns {Box}\r\n     */\r\n    get box() {\r\n        if (this._box === undefined) {\r\n            let box = new Flatten.Box();\r\n            for (let edge of this) {\r\n                box = box.merge(edge.box);\r\n            }\r\n            this._box = box;\r\n        }\r\n        return this._box;\r\n    }\r\n\r\n    /**\r\n     * Get all edges length\r\n     * @returns {number}\r\n     */\r\n    get perimeter() {\r\n        return this.last.arc_length + this.last.length\r\n    }\r\n\r\n    /**\r\n     * Get point on face boundary at given length\r\n     * @param {number} length - The length along the face boundary\r\n     * @returns {Point}\r\n     */\r\n    pointAtLength(length) {\r\n        if (length > this.perimeter || length < 0) return null;\r\n        let point = null;\r\n        for (let edge of this) {\r\n            if (length >= edge.arc_length &&\r\n                (edge === this.last || length < edge.next.arc_length)) {\r\n                point = edge.pointAtLength(length - edge.arc_length);\r\n                break;\r\n            }\r\n        }\r\n        return point;\r\n    }\r\n\r\n    static points2segments(points) {\r\n        let segments = [];\r\n        for (let i = 0; i < points.length; i++) {\r\n            // skip zero length segment\r\n            if (points[i].equalTo(points[(i + 1) % points.length]))\r\n                continue;\r\n            segments.push(new Flatten.Segment(points[i], points[(i + 1) % points.length]));\r\n        }\r\n        return segments;\r\n    }\r\n\r\n    shapes2face(edges, shapes) {\r\n        for (let shape of shapes) {\r\n            let edge = new Flatten.Edge(shape);\r\n            this.append(edge);\r\n            // this.box = this.box.merge(shape.box);\r\n            edges.add(edge);\r\n        }\r\n        // this.orientation = this.getOrientation();              // face direction cw or ccw\r\n    }\r\n\r\n    /**\r\n     * Append edge after the last edge of the face (and before the first edge). <br/>\r\n     * @param {Edge} edge - Edge to be appended to the linked list\r\n     * @returns {Face}\r\n     */\r\n    append(edge) {\r\n        super.append(edge);\r\n        // set arc length\r\n        this.setOneEdgeArcLength(edge);\r\n        edge.face = this;\r\n        // edges.add(edge);      // Add new edges into edges container\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Insert edge newEdge into the linked list after the edge edgeBefore <br/>\r\n     * @param {Edge} newEdge - Edge to be inserted into linked list\r\n     * @param {Edge} edgeBefore - Edge to insert newEdge after it\r\n     * @returns {Face}\r\n     */\r\n    insert(newEdge, edgeBefore) {\r\n        super.insert(newEdge, edgeBefore);\r\n        // set arc length\r\n        this.setOneEdgeArcLength(newEdge);\r\n        newEdge.face = this;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove the given edge from the linked list of the face <br/>\r\n     * @param {Edge} edge - Edge to be removed\r\n     * @returns {Face}\r\n     */\r\n    remove(edge) {\r\n        super.remove(edge);\r\n        // Recalculate arc length\r\n        this.setArcLength();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Reverse orientation of the face: first edge become last and vice a verse,\r\n     * all edges starts and ends swapped, direction of arcs inverted. If face was oriented\r\n     * clockwise, it becomes counter clockwise and vice versa\r\n     */\r\n    reverse() {\r\n        // collect edges in revert order with reverted shapes\r\n        let edges = [];\r\n        let edge_tmp = this.last;\r\n        do {\r\n            // reverse shape\r\n            edge_tmp.shape = edge_tmp.shape.reverse();\r\n            edges.push(edge_tmp);\r\n            edge_tmp = edge_tmp.prev;\r\n        } while (edge_tmp !== this.last);\r\n\r\n        // restore linked list\r\n        this.first = undefined;\r\n        this.last = undefined;\r\n        for (let edge of edges) {\r\n            if (this.first === undefined) {\r\n                edge.prev = edge;\r\n                edge.next = edge;\r\n                this.first = edge;\r\n                this.last = edge;\r\n            } else {\r\n                // append to end\r\n                edge.prev = this.last;\r\n                this.last.next = edge;\r\n\r\n                // update edge to be last\r\n                this.last = edge;\r\n\r\n                // restore circular links\r\n                this.last.next = this.first;\r\n                this.first.prev = this.last;\r\n\r\n            }\r\n            // set arc length\r\n            this.setOneEdgeArcLength(edge);\r\n        }\r\n\r\n        // Recalculate orientation, if set\r\n        if (this._orientation !== undefined) {\r\n            this._orientation = undefined;\r\n            this._orientation = this.orientation();\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Set arc_length property for each of the edges in the face.\r\n     * Arc_length of the edge it the arc length from the first edge of the face\r\n     */\r\n    setArcLength() {\r\n        for (let edge of this) {\r\n            this.setOneEdgeArcLength(edge);\r\n            edge.face = this;\r\n        }\r\n    }\r\n\r\n    setOneEdgeArcLength(edge) {\r\n        if (edge === this.first) {\r\n            edge.arc_length = 0.0;\r\n        } else {\r\n            edge.arc_length = edge.prev.arc_length + edge.prev.length;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the absolute value of the area of the face\r\n     * @returns {number}\r\n     */\r\n    area() {\r\n        return Math.abs(this.signedArea());\r\n    }\r\n\r\n    /**\r\n     * Returns signed area of the simple face.\r\n     * Face is simple if it has no self intersections that change its orientation.\r\n     * Then the area will be positive if the orientation of the face is clockwise,\r\n     * and negative if orientation is counterclockwise.\r\n     * It may be zero if polygon is degenerated.\r\n     * @returns {number}\r\n     */\r\n    signedArea() {\r\n        let sArea = 0;\r\n        let ymin = this.box.ymin;\r\n        for (let edge of this) {\r\n            sArea += edge.shape.definiteIntegral(ymin);\r\n        }\r\n        return sArea;\r\n    }\r\n\r\n    /**\r\n     * Return face orientation: one of Flatten.ORIENTATION.CCW, Flatten.ORIENTATION.CW, Flatten.ORIENTATION.NOT_ORIENTABLE <br/>\r\n     * According to Green theorem the area of a closed curve may be calculated as double integral,\r\n     * and the sign of the integral will be defined by the direction of the curve.\r\n     * When the integral (\"signed area\") will be negative, direction is counter clockwise,\r\n     * when positive - clockwise and when it is zero, polygon is not orientable.\r\n     * See {@link https://mathinsight.org/greens_theorem_find_area}\r\n     * @returns {number}\r\n     */\r\n    orientation() {\r\n        if (this._orientation === undefined) {\r\n            let area = this.signedArea();\r\n            if (Flatten.Utils.EQ_0(area)) {\r\n                this._orientation = Flatten.ORIENTATION.NOT_ORIENTABLE;\r\n            } else if (Flatten.Utils.LT(area, 0)) {\r\n                this._orientation = Flatten.ORIENTATION.CCW;\r\n            } else {\r\n                this._orientation = Flatten.ORIENTATION.CW;\r\n            }\r\n        }\r\n        return this._orientation;\r\n    }\r\n\r\n    /**\r\n     * Returns true if face of the polygon is simple (no self-intersection points found)\r\n     * NOTE: this method is incomplete because it does not exclude touching points.\r\n     * Self intersection test should check if polygon change orientation in the test point.\r\n     * @param {Edges} edges - reference to polygon.edges to provide search index\r\n     * @returns {boolean}\r\n     */\r\n    isSimple(edges) {\r\n        let ip = Face.getSelfIntersections(this, edges, true);\r\n        return ip.length == 0;\r\n    }\r\n\r\n    static getSelfIntersections(face, edges, exitOnFirst = false) {\r\n        let int_points = [];\r\n\r\n        // calculate intersections\r\n        for (let edge1 of face) {\r\n\r\n            // request edges of polygon in the box of edge1\r\n            let resp = edges.search(edge1.box);\r\n\r\n            // for each edge2 in response\r\n            for (let edge2 of resp) {\r\n\r\n                // Skip itself\r\n                if (edge1 === edge2)\r\n                    continue;\r\n\r\n                // Skip is edge2 belongs to another face\r\n                if (edge2.face !== face)\r\n                    continue;\r\n\r\n                // Skip next and previous edge if both are segment (if one of them arc - calc intersection)\r\n                if (edge1.shape instanceof Flatten.Segment && edge2.shape instanceof Flatten.Segment &&\r\n                    (edge1.next === edge2 || edge1.prev === edge2))\r\n                    continue;\r\n\r\n                // calculate intersections between edge1 and edge2\r\n                let ip = edge1.shape.intersect(edge2.shape);\r\n\r\n                // for each intersection point\r\n                for (let pt of ip) {\r\n\r\n                    // skip start-end connections\r\n                    if (pt.equalTo(edge1.start) && pt.equalTo(edge2.end) && edge2 === edge1.prev)\r\n                        continue;\r\n                    if (pt.equalTo(edge1.end) && pt.equalTo(edge2.start) && edge2 === edge1.next)\r\n                        continue;\r\n\r\n                    int_points.push(pt);\r\n\r\n                    if (exitOnFirst)\r\n                        break;\r\n                }\r\n\r\n                if (int_points.length > 0 && exitOnFirst)\r\n                    break;\r\n            }\r\n\r\n            if (int_points.length > 0 && exitOnFirst)\r\n                break;\r\n\r\n        }\r\n        return int_points;\r\n    }\r\n\r\n    /**\r\n     * Returns edge which contains given point\r\n     * @param {Point} pt - test point\r\n     * @returns {Edge}\r\n     */\r\n    findEdgeByPoint(pt) {\r\n        let edgeFound;\r\n        for (let edge of this) {\r\n            if (edge.shape.contains(pt)) {\r\n                edgeFound = edge;\r\n                break;\r\n            }\r\n        }\r\n        return edgeFound;\r\n    }\r\n\r\n    /**\r\n     * Returns new polygon created from one face\r\n     * @returns {Polygon}\r\n     */\r\n    toPolygon() {\r\n        return new Flatten.Polygon(this.shapes);\r\n    }\r\n\r\n    toJSON() {\r\n        return this.edges.map(edge => edge.toJSON());\r\n    }\r\n\r\n    /**\r\n     * Returns string to be assigned to \"d\" attribute inside defined \"path\"\r\n     * @returns {string}\r\n     */\r\n    svg() {\r\n        let svgStr = `\\nM${this.first.start.x},${this.first.start.y}`;\r\n        for (let edge of this) {\r\n            svgStr += edge.svg();\r\n        }\r\n        svgStr += ` z`;\r\n        return svgStr;\r\n    }\r\n\r\n}\r\nFlatten.Face = Face;\r\n\r\n/**\r\n * Class representing a ray (a half-infinite line).\r\n * @type {Ray}\r\n */\r\nclass Ray {\r\n    /**\r\n     * Ray may be constructed by setting an <b>origin</b> point and a <b>normal</b> vector, so that any point <b>x</b>\r\n     * on a ray fit an equation: <br />\r\n     *  (<b>x</b> - <b>origin</b>) * <b>vector</b> = 0 <br />\r\n     * Ray defined by constructor is a right semi-infinite line with respect to the normal vector <br/>\r\n     * If normal vector is omitted ray is considered horizontal (normal vector is (0,1)). <br/>\r\n     * Don't be confused: direction of the normal vector is orthogonal to the ray <br/>\r\n     * @param {Point} pt - start point\r\n     * @param {Vector} norm - normal vector\r\n     */\r\n    constructor(...args) {\r\n        this.pt = new Flatten.Point();\r\n        this.norm = new Flatten.Vector(0,1);\r\n\r\n        if (args.length == 0) {\r\n            return;\r\n        }\r\n\r\n        if (args.length >= 1 && args[0] instanceof Flatten.Point) {\r\n            this.pt = args[0].clone();\r\n        }\r\n\r\n        if (args.length === 1) {\r\n            return;\r\n        }\r\n\r\n        if (args.length === 2 && args[1] instanceof Flatten.Vector) {\r\n            this.norm = args[1].clone();\r\n            return;\r\n        }\r\n\r\n        // if (args.length == 2 && typeof (args[0]) == \"number\" && typeof (args[1]) == \"number\") {\r\n        //     this.pt = new Flatten.Point(args[0], args[1]);\r\n        //     return;\r\n        // }\r\n\r\n        throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n    }\r\n\r\n    /**\r\n     * Return new cloned instance of ray\r\n     * @returns {Ray}\r\n     */\r\n    clone() {\r\n        return new Ray(this.pt, this.norm);\r\n    }\r\n\r\n    /**\r\n     * Slope of the ray - angle in radians between ray and axe x from 0 to 2PI\r\n     * @returns {number} - slope of the line\r\n     */\r\n    get slope() {\r\n        let vec = new Flatten.Vector(this.norm.y, -this.norm.x);\r\n        return vec.slope;\r\n    }\r\n\r\n    /**\r\n     * Returns half-infinite bounding box of the ray\r\n     * @returns {Box} - bounding box\r\n     */\r\n    get box() {\r\n        let slope = this.slope;\r\n        return new Flatten.Box(\r\n            slope > Math.PI/2 && slope < 3*Math.PI/2 ? Number.NEGATIVE_INFINITY : this.pt.x,\r\n            slope >= 0 && slope <= Math.PI ? this.pt.y : Number.NEGATIVE_INFINITY,\r\n            slope >= Math.PI/2 && slope <= 3*Math.PI/2 ? this.pt.x : Number.POSITIVE_INFINITY,\r\n            slope >= Math.PI && slope <= 2*Math.PI || slope == 0 ? this.pt.y : Number.POSITIVE_INFINITY\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Return ray start point\r\n     * @returns {Point} - ray start point\r\n     */\r\n    get start() {\r\n        return this.pt;\r\n    }\r\n\r\n    /**\r\n     * Ray has no end point?\r\n     * @returns {undefined}\r\n     */\r\n    get end() {return undefined;}\r\n\r\n    /**\r\n     * Return positive infinity number as length\r\n     * @returns {number}\r\n     */\r\n    get length() {return Number.POSITIVE_INFINITY;}\r\n\r\n    /**\r\n     * Returns true if point belongs to ray\r\n     * @param {Point} pt Query point\r\n     * @returns {boolean}\r\n     */\r\n    contains(pt) {\r\n        if (this.pt.equalTo(pt)) {\r\n            return true;\r\n        }\r\n        /* Ray contains point if vector to point is orthogonal to the ray normal vector\r\n            and cross product from vector to point is positive */\r\n        let vec = new Flatten.Vector(this.pt, pt);\r\n        return Flatten.Utils.EQ_0(this.norm.dot(vec)) && Flatten.Utils.GE(vec.cross(this.norm),0);\r\n    }\r\n\r\n    /**\r\n     * Split ray with point and return array of segment and new ray\r\n     * @param {Point} pt\r\n     * @returns [Segment,Ray]\r\n     */\r\n    split(pt) {\r\n        if (!this.contains(pt))\r\n            return [];\r\n\r\n        if (this.pt.equalTo(pt)) {\r\n            return [this]\r\n        }\r\n\r\n        return [\r\n            new Flatten.Segment(this.pt, pt),\r\n            new Flatten.Ray(pt, this.norm)\r\n        ]\r\n    }\r\n\r\n    /**\r\n     * Returns array of intersection points between ray and segment or arc\r\n     * @param {Segment|Arc} - Shape to intersect with ray\r\n     * @returns {Array} array of intersection points\r\n     */\r\n    intersect(shape) {\r\n        if (shape instanceof Flatten.Segment) {\r\n            return this.intersectRay2Segment(this, shape);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Arc) {\r\n            return this.intersectRay2Arc(this, shape);\r\n        }\r\n    }\r\n\r\n    intersectRay2Segment(ray, segment) {\r\n        let ip = [];\r\n\r\n        // if (ray.box.not_intersect(segment.box)) {\r\n        //     return ip;\r\n        // }\r\n\r\n        let line = new Flatten.Line(ray.start, ray.norm);\r\n        let ip_tmp = line.intersect(segment);\r\n\r\n        for (let pt of ip_tmp) {\r\n            // if (Flatten.Utils.GE(pt.x, ray.start.x)) {\r\n            if (ray.contains(pt)) {\r\n                ip.push(pt);\r\n            }\r\n        }\r\n\r\n        /* If there were two intersection points between line and ray,\r\n        and now there is exactly one left, it means ray starts between these points\r\n        and there is another intersection point - start of the ray */\r\n        if (ip_tmp.length == 2 && ip.length == 1 && ray.start.on(line)) {\r\n            ip.push(ray.start);\r\n        }\r\n\r\n        return ip;\r\n    }\r\n\r\n    intersectRay2Arc(ray, arc) {\r\n        let ip = [];\r\n\r\n        // if (ray.box.not_intersect(arc.box)) {\r\n        //     return ip;\r\n        // }\r\n\r\n        let line = new Flatten.Line(ray.start, ray.norm);\r\n        let ip_tmp = line.intersect(arc);\r\n\r\n        for (let pt of ip_tmp) {\r\n            // if (Flatten.Utils.GE(pt.x, ray.start.x)) {\r\n            if (ray.contains(pt)) {\r\n                ip.push(pt);\r\n            }\r\n        }\r\n        return ip;\r\n    }\r\n\r\n    /**\r\n     * Return string to draw svg segment representing ray inside given box\r\n     * @param {Box} box Box representing drawing area\r\n     * @param {Object} attrs - an object with attributes of svg segment element\r\n     */\r\n    svg(box, attrs = {}) {\r\n        let line = new Flatten.Line(this.pt, this.norm);\r\n        let ip = intersectLine2Box(line, box);\r\n        ip = ip.filter( pt => this.contains(pt) );\r\n        if (ip.length === 0 || ip.length === 2)\r\n            return \"\";\r\n        let segment = new Flatten.Segment(this.pt, ip[0]);\r\n        return segment.svg(attrs);\r\n    }\r\n\r\n}\r\nFlatten.Ray = Ray;\r\n\r\nconst ray = (...args) => new Flatten.Ray(...args);\r\nFlatten.ray = ray;\r\n\r\n/**\r\n * Created by Alex Bol on 3/15/2017.\r\n */\r\n\r\n/**\r\n * Class representing a polygon.<br/>\r\n * Polygon in FlattenJS is a multipolygon comprised from a set of [faces]{@link Flatten.Face}. <br/>\r\n * Face, in turn, is a closed loop of [edges]{@link Flatten.Edge}, where edge may be segment or circular arc<br/>\r\n * @type {Polygon}\r\n */\r\nclass Polygon {\r\n    /**\r\n     * Constructor creates new instance of polygon. With no arguments new polygon is empty.<br/>\r\n     * Constructor accepts as argument array that define loop of shapes\r\n     * or array of arrays in case of multi polygon <br/>\r\n     * Loop may be defined in different ways: <br/>\r\n     * - array of shapes of type Segment or Arc <br/>\r\n     * - array of points (Flatten.Point) <br/>\r\n     * - array of numeric pairs which represent points <br/>\r\n     * - box or circle object <br/>\r\n     * Alternatively, it is possible to use polygon.addFace method\r\n     * @param {args} - array of shapes or array of arrays\r\n     */\r\n    constructor() {\r\n        /**\r\n         * Container of faces (closed loops), may be empty\r\n         * @type {PlanarSet}\r\n         */\r\n        this.faces = new Flatten.PlanarSet();\r\n        /**\r\n         * Container of edges\r\n         * @type {PlanarSet}\r\n         */\r\n        this.edges = new Flatten.PlanarSet();\r\n\r\n        /* It may be array of something that may represent one loop (face) or\r\n         array of arrays that represent multiple loops\r\n         */\r\n        let args = [...arguments];\r\n        if (args.length === 1 &&\r\n            ((args[0] instanceof Array && args[0].length > 0) ||\r\n                args[0] instanceof Flatten.Circle || args[0] instanceof Flatten.Box)) {\r\n            let argsArray = args[0];\r\n            if (args[0] instanceof Array && args[0].every((loop) => {\r\n                return loop instanceof Array\r\n            })) {\r\n                if (argsArray.every(el => {\r\n                    return el instanceof Array && el.length === 2 && typeof (el[0]) === \"number\" && typeof (el[1]) === \"number\"\r\n                })) {\r\n                    this.faces.add(new Flatten.Face(this, argsArray));    // one-loop polygon as array of pairs of numbers\r\n                } else {\r\n                    for (let loop of argsArray) {   // multi-loop polygon\r\n                        /* Check extra level of nesting for GeoJSON-style multi polygons */\r\n                        if (loop instanceof Array && loop[0] instanceof Array &&\r\n                            loop[0].every(el => {\r\n                                return el instanceof Array && el.length === 2 && typeof (el[0]) === \"number\" && typeof (el[1]) === \"number\"\r\n                            })) {\r\n                            for (let loop1 of loop) {\r\n                                this.faces.add(new Flatten.Face(this, loop1));\r\n                            }\r\n                        } else {\r\n                            this.faces.add(new Flatten.Face(this, loop));\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                this.faces.add(new Flatten.Face(this, argsArray));    // one-loop polygon\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * (Getter) Returns bounding box of the polygon\r\n     * @returns {Box}\r\n     */\r\n    get box() {\r\n        return [...this.faces].reduce((acc, face) => acc.merge(face.box), new Flatten.Box());\r\n    }\r\n\r\n    /**\r\n     * (Getter) Returns array of vertices\r\n     * @returns {Array}\r\n     */\r\n    get vertices() {\r\n        return [...this.edges].map(edge => edge.start);\r\n    }\r\n\r\n    /**\r\n     * Create new cloned instance of the polygon\r\n     * @returns {Polygon}\r\n     */\r\n    clone() {\r\n        let polygon = new Polygon();\r\n        for (let face of this.faces) {\r\n            polygon.addFace(face.shapes);\r\n        }\r\n        return polygon;\r\n    }\r\n\r\n    /**\r\n     * Return true is polygon has no edges\r\n     * @returns {boolean}\r\n     */\r\n    isEmpty() {\r\n        return this.edges.size === 0;\r\n    }\r\n\r\n    /**\r\n     * Return true if polygon is valid for boolean operations\r\n     * Polygon is valid if <br/>\r\n     * 1. All faces are simple polygons (there are no self-intersected polygons) <br/>\r\n     * 2. All faces are orientable and there is no island inside island or hole inside hole - TODO <br/>\r\n     * 3. There is no intersections between faces (excluding touching) - TODO <br/>\r\n     * @returns {boolean}\r\n     */\r\n    isValid() {\r\n        let valid = true;\r\n        // 1. Polygon is invalid if at least one face is not simple\r\n        for (let face of this.faces) {\r\n            if (!face.isSimple(this.edges)) {\r\n                valid = false;\r\n                break;\r\n            }\r\n        }\r\n        // 2. TODO: check if no island inside island and no hole inside hole\r\n        // 3. TODO: check the there is no intersection between faces\r\n        return valid;\r\n    }\r\n\r\n    /**\r\n     * Returns area of the polygon. Area of an island will be added, area of a hole will be subtracted\r\n     * @returns {number}\r\n     */\r\n    area() {\r\n        let signedArea = [...this.faces].reduce((acc, face) => acc + face.signedArea(), 0);\r\n        return Math.abs(signedArea);\r\n    }\r\n\r\n    /**\r\n     * Add new face to polygon. Returns added face\r\n     * @param {Points[]|Segments[]|Arcs[]|Circle|Box} args -  new face may be create with one of the following ways: <br/>\r\n     * 1) array of points that describe closed path (edges are segments) <br/>\r\n     * 2) array of shapes (segments and arcs) which describe closed path <br/>\r\n     * 3) circle - will be added as counterclockwise arc <br/>\r\n     * 4) box - will be added as counterclockwise rectangle <br/>\r\n     * You can chain method face.reverse() is you need to change direction of the creates face\r\n     * @returns {Face}\r\n     */\r\n    addFace(...args) {\r\n        let face = new Flatten.Face(this, ...args);\r\n        this.faces.add(face);\r\n        return face;\r\n    }\r\n\r\n    /**\r\n     * Delete existing face from polygon\r\n     * @param {Face} face Face to be deleted\r\n     * @returns {boolean}\r\n     */\r\n    deleteFace(face) {\r\n        for (let edge of face) {\r\n            this.edges.delete(edge);\r\n        }\r\n        return this.faces.delete(face);\r\n    }\r\n\r\n    /**\r\n     * Clear all faces and create new faces from edges\r\n     */\r\n    recreateFaces() {\r\n        // Remove all faces\r\n        this.faces.clear();\r\n        for (let edge of this.edges) {\r\n            edge.face = null;\r\n        }\r\n\r\n        // Restore faces\r\n        let first;\r\n        let unassignedEdgeFound = true;\r\n        while (unassignedEdgeFound) {\r\n            unassignedEdgeFound = false;\r\n            for (let edge of this.edges) {\r\n                if (edge.face === null) {\r\n                    first = edge;\r\n                    unassignedEdgeFound = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (unassignedEdgeFound) {\r\n                let last = first;\r\n                do {\r\n                    last = last.next;\r\n                } while (last.next !== first)\r\n\r\n                this.addFace(first, last);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete chain of edges from the face.\r\n     * @param {Face} face Face to remove chain\r\n     * @param {Edge} edgeFrom Start of the chain of edges to be removed\r\n     * @param {Edge} edgeTo End of the chain of edges to be removed\r\n     */\r\n    removeChain(face, edgeFrom, edgeTo) {\r\n        // Special case: all edges removed\r\n        if (edgeTo.next === edgeFrom) {\r\n            this.deleteFace(face);\r\n            return;\r\n        }\r\n        for (let edge = edgeFrom; edge !== edgeTo.next; edge = edge.next) {\r\n            face.remove(edge);\r\n            this.edges.delete(edge);      // delete from PlanarSet of edges and update index\r\n            if (face.isEmpty()) {\r\n                this.deleteFace(face);    // delete from PlanarSet of faces and update index\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add point as a new vertex and split edge. Point supposed to belong to an edge.\r\n     * When edge is split, new edge created from the start of the edge to the new vertex\r\n     * and inserted before current edge.\r\n     * Current edge is trimmed and updated.\r\n     * Method returns new edge added. If no edge added, it returns edge before vertex\r\n     * @param {Point} pt Point to be added as a new vertex\r\n     * @param {Edge} edge Edge to be split with new vertex and then trimmed from start\r\n     * @returns {Edge}\r\n     */\r\n    addVertex(pt, edge) {\r\n        let shapes = edge.shape.split(pt);\r\n        // if (shapes.length < 2) return;\r\n\r\n        if (shapes[0] === null)   // point incident to edge start vertex, return previous edge\r\n            return edge.prev;\r\n\r\n        if (shapes[1] === null)   // point incident to edge end vertex, return edge itself\r\n            return edge;\r\n\r\n        let newEdge = new Flatten.Edge(shapes[0]);\r\n        let edgeBefore = edge.prev;\r\n\r\n        /* Insert first split edge into linked list after edgeBefore */\r\n        edge.face.insert(newEdge, edgeBefore);\r\n\r\n        // Remove old edge from edges container and 2d index\r\n        this.edges.delete(edge);\r\n\r\n        // Insert new edge to the edges container and 2d index\r\n        this.edges.add(newEdge);\r\n\r\n        // Update edge shape with second split edge keeping links\r\n        edge.shape = shapes[1];\r\n\r\n        // Add updated edge to the edges container and 2d index\r\n        this.edges.add(edge);\r\n\r\n        return newEdge;\r\n    }\r\n\r\n    /**\r\n     * Cut polygon with multiline and return array of new polygons\r\n     * Multiline should be constructed from a line with intersection point, see notebook:\r\n     * https://next.observablehq.com/@alexbol99/cut-polygon-with-line\r\n     * @param {Multiline} multiline\r\n     * @returns {Polygon[]}\r\n     */\r\n    cut(multiline) {\r\n        let cutPolygons = [this.clone()];\r\n        for (let edge of multiline) {\r\n            if (edge.setInclusion(this) !== INSIDE)\r\n                continue;\r\n\r\n            let cut_edge_start = edge.shape.start;\r\n            let cut_edge_end = edge.shape.end;\r\n\r\n            let newCutPolygons = [];\r\n            for (let polygon of cutPolygons) {\r\n                if (polygon.findEdgeByPoint(cut_edge_start) === undefined) {\r\n                    newCutPolygons.push(polygon);\r\n                } else {\r\n                    let [cutPoly1, cutPoly2] = polygon.cutFace(cut_edge_start, cut_edge_end);\r\n                    newCutPolygons.push(cutPoly1, cutPoly2);\r\n                }\r\n            }\r\n            cutPolygons = newCutPolygons;\r\n        }\r\n        return cutPolygons;\r\n    }\r\n\r\n    /**\r\n     * Cut face of polygon with a segment between two points and create two new polygons\r\n     * Supposed that a segments between points does not intersect any other edge\r\n     * @param {Point} pt1\r\n     * @param {Point} pt2\r\n     * @returns {Polygon[]}\r\n     */\r\n    cutFace(pt1, pt2) {\r\n        let edge1 = this.findEdgeByPoint(pt1);\r\n        let edge2 = this.findEdgeByPoint(pt2);\r\n        if (edge1.face !== edge2.face)\r\n            return [];\r\n\r\n        // Cut face into two and create new polygon with two faces\r\n        let edgeBefore1 = this.addVertex(pt1, edge1);\r\n        edge2 = this.findEdgeByPoint(pt2);\r\n        let edgeBefore2 = this.addVertex(pt2, edge2);\r\n\r\n        let face = edgeBefore1.face;\r\n        let newEdge1 = new Flatten.Edge(\r\n            new Flatten.Segment(edgeBefore1.end, edgeBefore2.end)\r\n        );\r\n        let newEdge2 = new Flatten.Edge(\r\n            new Flatten.Segment(edgeBefore2.end, edgeBefore1.end)\r\n        );\r\n\r\n        // Swap links\r\n        edgeBefore1.next.prev = newEdge2;\r\n        newEdge2.next = edgeBefore1.next;\r\n\r\n        edgeBefore1.next = newEdge1;\r\n        newEdge1.prev = edgeBefore1;\r\n\r\n        edgeBefore2.next.prev = newEdge1;\r\n        newEdge1.next = edgeBefore2.next;\r\n\r\n        edgeBefore2.next = newEdge2;\r\n        newEdge2.prev = edgeBefore2;\r\n\r\n        // Insert new edge to the edges container and 2d index\r\n        this.edges.add(newEdge1);\r\n        this.edges.add(newEdge2);\r\n\r\n        // Add two new faces\r\n        let face1 = this.addFace(newEdge1, edgeBefore1);\r\n        let face2 = this.addFace(newEdge2, edgeBefore2);\r\n\r\n        // Remove old face\r\n        this.faces.delete(face);\r\n\r\n        return [face1.toPolygon(), face2.toPolygon()];\r\n    }\r\n\r\n    /**\r\n     * Return a result of cutting polygon with line\r\n     * @param {Line} line - cutting line\r\n     * @returns {Polygon} newPoly - resulted polygon\r\n     */\r\n    cutWithLine(line) {\r\n        let newPoly = this.clone();\r\n\r\n        let multiline = new Multiline([line]);\r\n\r\n        // smart intersections\r\n        let intersections = {\r\n            int_points1: [],\r\n            int_points2: [],\r\n            int_points1_sorted: [],\r\n            int_points2_sorted: []\r\n        };\r\n\r\n        // intersect line with each edge of the polygon\r\n        // and create smart intersections\r\n        for (let edge of newPoly.edges) {\r\n            let ip = intersectEdge2Line(edge, line);\r\n            // for each intersection point\r\n            for (let pt of ip) {\r\n                addToIntPoints(multiline.first, pt, intersections.int_points1);\r\n                addToIntPoints(edge, pt, intersections.int_points2);\r\n            }\r\n        }\r\n\r\n        // No intersections - return a copy of the original polygon\r\n        if (intersections.int_points1.length === 0)\r\n            return newPoly;\r\n\r\n        // sort smart intersections\r\n        intersections.int_points1_sorted = getSortedArrayOnLine(line, intersections.int_points1);\r\n        intersections.int_points2_sorted = getSortedArray(intersections.int_points2);\r\n\r\n        // split by intersection points\r\n        splitByIntersections(multiline, intersections.int_points1_sorted);\r\n        splitByIntersections(newPoly, intersections.int_points2_sorted);\r\n\r\n        // filter duplicated intersection points\r\n        filterDuplicatedIntersections(intersections);\r\n\r\n        // sort intersection points again after filtering\r\n        intersections.int_points1_sorted = getSortedArrayOnLine(line, intersections.int_points1);\r\n        intersections.int_points2_sorted = getSortedArray(intersections.int_points2);\r\n\r\n        // initialize inclusion flags for edges of multiline incident to intersections\r\n        initializeInclusionFlags(intersections.int_points1);\r\n\r\n        // calculate inclusion flag for edges of multiline incident to intersections\r\n        calculateInclusionFlags(intersections.int_points1, newPoly);\r\n\r\n        // filter intersections between two edges that got same inclusion flag\r\n        for (let int_point1 of intersections.int_points1_sorted) {\r\n            if (int_point1.edge_before.bv === int_point1.edge_after.bv) {\r\n                intersections.int_points2[int_point1.id] = -1;   // to be filtered out\r\n                int_point1.id = -1;                              // to be filtered out\r\n            }\r\n        }\r\n        intersections.int_points1 = intersections.int_points1.filter( int_point => int_point.id >= 0);\r\n        intersections.int_points2 = intersections.int_points2.filter( int_point => int_point.id >= 0);\r\n\r\n        // No intersections left after filtering - return a copy of the original polygon\r\n        if (intersections.int_points1.length === 0)\r\n            return newPoly;\r\n\r\n        // sort intersection points 3d time after filtering\r\n        intersections.int_points1_sorted = getSortedArrayOnLine(line, intersections.int_points1);\r\n        intersections.int_points2_sorted = getSortedArray(intersections.int_points2);\r\n\r\n        // Add 2 new inner edges between intersection points\r\n        let int_point1_prev = intersections.int_points1[0];\r\n        let new_edge;\r\n        for (let int_point1_curr of intersections.int_points1_sorted) {\r\n            if (int_point1_curr.edge_before.bv === INSIDE) {\r\n                new_edge = new Flatten.Edge(new Flatten.Segment(int_point1_prev.pt, int_point1_curr.pt));    // (int_point1_curr.edge_before.shape);\r\n                insertBetweenIntPoints(intersections.int_points2[int_point1_prev.id], intersections.int_points2[int_point1_curr.id], new_edge);\r\n                newPoly.edges.add(new_edge);\r\n\r\n                new_edge = new Flatten.Edge(new Flatten.Segment(int_point1_curr.pt, int_point1_prev.pt));    // (int_point1_curr.edge_before.shape.reverse());\r\n                insertBetweenIntPoints(intersections.int_points2[int_point1_curr.id], intersections.int_points2[int_point1_prev.id], new_edge);\r\n                newPoly.edges.add(new_edge);\r\n            }\r\n            int_point1_prev = int_point1_curr;\r\n        }\r\n\r\n        // Recreate faces\r\n        newPoly.recreateFaces();\r\n        return newPoly;\r\n    }\r\n\r\n    /**\r\n     * Returns the first founded edge of polygon that contains given point\r\n     * @param {Point} pt\r\n     * @returns {Edge}\r\n     */\r\n    findEdgeByPoint(pt) {\r\n        let edge;\r\n        for (let face of this.faces) {\r\n            edge = face.findEdgeByPoint(pt);\r\n            if (edge !== undefined)\r\n                break;\r\n        }\r\n        return edge;\r\n    }\r\n\r\n    /**\r\n     * Split polygon into array of polygons, where each polygon is an island with all\r\n     * hole that it contains\r\n     * @returns {Flatten.Polygon[]}\r\n     */\r\n    splitToIslands() {\r\n        if (this.isEmpty()) return [];      // return empty array if polygon is empty\r\n        let polygons = this.toArray();      // split into array of one-loop polygons\r\n        /* Sort polygons by area in descending order */\r\n        polygons.sort((polygon1, polygon2) => polygon2.area() - polygon1.area());\r\n        /* define orientation of the island by orientation of the first polygon in array */\r\n        let orientation = [...polygons[0].faces][0].orientation();\r\n        /* Create output array from polygons with same orientation as a first polygon (array of islands) */\r\n        let newPolygons = polygons.filter(polygon => [...polygon.faces][0].orientation() === orientation);\r\n        for (let polygon of polygons) {\r\n            let face = [...polygon.faces][0];\r\n            if (face.orientation() === orientation) continue;  // skip same orientation\r\n            /* Proceed with opposite orientation */\r\n            /* Look if any of island polygons contains tested polygon as a hole */\r\n            for (let islandPolygon of newPolygons) {\r\n                if (face.shapes.every(shape => islandPolygon.contains(shape))) {\r\n                    islandPolygon.addFace(face.shapes);      // add polygon as a hole in islandPolygon\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        // TODO: assert if not all polygons added into output\r\n        return newPolygons;\r\n    }\r\n\r\n    /**\r\n     * Reverse orientation of all faces to opposite\r\n     * @returns {Polygon}\r\n     */\r\n    reverse() {\r\n        for (let face of this.faces) {\r\n            face.reverse();\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns true if polygon contains shape: no point of shape lay outside of the polygon,\r\n     * false otherwise\r\n     * @param {Shape} shape - test shape\r\n     * @returns {boolean}\r\n     */\r\n    contains(shape) {\r\n        if (shape instanceof Flatten.Point) {\r\n            let rel = ray_shoot(this, shape);\r\n            return rel === INSIDE || rel === BOUNDARY;\r\n        } else {\r\n            return cover(this, shape);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return distance and shortest segment between polygon and other shape as array [distance, shortest_segment]\r\n     * @param {Shape} shape Shape of one of the types Point, Circle, Line, Segment, Arc or Polygon\r\n     * @returns {Number | Segment}\r\n     */\r\n    distanceTo(shape) {\r\n        // let {Distance} = Flatten;\r\n\r\n        if (shape instanceof Flatten.Point) {\r\n            let [dist, shortest_segment] = Flatten.Distance.point2polygon(shape, this);\r\n            shortest_segment = shortest_segment.reverse();\r\n            return [dist, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Circle ||\r\n            shape instanceof Flatten.Line ||\r\n            shape instanceof Flatten.Segment ||\r\n            shape instanceof Flatten.Arc) {\r\n            let [dist, shortest_segment] = Flatten.Distance.shape2polygon(shape, this);\r\n            shortest_segment = shortest_segment.reverse();\r\n            return [dist, shortest_segment];\r\n        }\r\n\r\n        /* this method is bit faster */\r\n        if (shape instanceof Flatten.Polygon) {\r\n            let min_dist_and_segment = [Number.POSITIVE_INFINITY, new Flatten.Segment()];\r\n            let dist, shortest_segment;\r\n\r\n            for (let edge of this.edges) {\r\n                // let [dist, shortest_segment] = Distance.shape2polygon(edge.shape, shape);\r\n                let min_stop = min_dist_and_segment[0];\r\n                [dist, shortest_segment] = Flatten.Distance.shape2planarSet(edge.shape, shape.edges, min_stop);\r\n                if (Flatten.Utils.LT(dist, min_stop)) {\r\n                    min_dist_and_segment = [dist, shortest_segment];\r\n                }\r\n            }\r\n            return min_dist_and_segment;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return array of intersection points between polygon and other shape\r\n     * @param shape Shape of the one of supported types <br/>\r\n     * @returns {Point[]}\r\n     */\r\n    intersect(shape) {\r\n        if (shape instanceof Flatten.Point) {\r\n            return this.contains(shape) ? [shape] : [];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Line) {\r\n            return intersectLine2Polygon(shape, this);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Circle) {\r\n            return intersectCircle2Polygon(shape, this);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Segment) {\r\n            return intersectSegment2Polygon(shape, this);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Arc) {\r\n            return intersectArc2Polygon(shape, this);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Polygon) {\r\n            return intersectPolygon2Polygon(shape, this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns new polygon translated by vector vec\r\n     * @param {Vector} vec\r\n     * @returns {Polygon}\r\n     */\r\n    translate(vec) {\r\n        let newPolygon = new Polygon();\r\n        for (let face of this.faces) {\r\n            newPolygon.addFace(face.shapes.map(shape => shape.translate(vec)));\r\n        }\r\n        return newPolygon;\r\n    }\r\n\r\n    /**\r\n     * Return new polygon rotated by given angle around given point\r\n     * If point omitted, rotate around origin (0,0)\r\n     * Positive value of angle defines rotation counter clockwise, negative - clockwise\r\n     * @param {number} angle - rotation angle in radians\r\n     * @param {Point} center - rotation center, default is (0,0)\r\n     * @returns {Polygon} - new rotated polygon\r\n     */\r\n    rotate(angle = 0, center = new Flatten.Point()) {\r\n        let newPolygon = new Polygon();\r\n        for (let face of this.faces) {\r\n            newPolygon.addFace(face.shapes.map(shape => shape.rotate(angle, center)));\r\n        }\r\n        return newPolygon;\r\n    }\r\n\r\n    /**\r\n     * Return new polygon transformed using affine transformation matrix\r\n     * @param {Matrix} matrix - affine transformation matrix\r\n     * @returns {Polygon} - new polygon\r\n     */\r\n    transform(matrix = new Flatten.Matrix()) {\r\n        let newPolygon = new Polygon();\r\n        for (let face of this.faces) {\r\n            newPolygon.addFace(face.shapes.map(shape => shape.transform(matrix)));\r\n        }\r\n        return newPolygon;\r\n    }\r\n\r\n    /**\r\n     * This method returns an object that defines how data will be\r\n     * serialized when called JSON.stringify() method\r\n     * @returns {Object}\r\n     */\r\n    toJSON() {\r\n        return [...this.faces].map(face => face.toJSON());\r\n    }\r\n\r\n    /**\r\n     * Transform all faces into array of polygons\r\n     * @returns {Flatten.Polygon[]}\r\n     */\r\n    toArray() {\r\n        return [...this.faces].map(face => face.toPolygon());\r\n    }\r\n\r\n    /**\r\n     * Return string to draw polygon in svg\r\n     * @param attrs  - an object with attributes for svg path element,\r\n     * like \"stroke\", \"strokeWidth\", \"fill\", \"fillRule\", \"fillOpacity\"\r\n     * Defaults are stroke:\"black\", strokeWidth:\"1\", fill:\"lightcyan\", fillRule:\"evenodd\", fillOpacity: \"1\"\r\n     * @returns {string}\r\n     */\r\n    svg(attrs = {}) {\r\n        let {stroke, strokeWidth, fill, fillRule, fillOpacity, id, className} = attrs;\r\n        // let restStr = Object.keys(rest).reduce( (acc, key) => acc += ` ${key}=\"${rest[key]}\"`, \"\");\r\n        let id_str = (id && id.length > 0) ? `id=\"${id}\"` : \"\";\r\n        let class_str = (className && className.length > 0) ? `class=\"${className}\"` : \"\";\r\n\r\n        let svgStr = `\\n<path stroke=\"${stroke || \"black\"}\" stroke-width=\"${strokeWidth || 1}\" fill=\"${fill || \"lightcyan\"}\" fill-rule=\"${fillRule || \"evenodd\"}\" fill-opacity=\"${fillOpacity || 1.0}\" ${id_str} ${class_str} d=\"`;\r\n        for (let face of this.faces) {\r\n            svgStr += face.svg();\r\n        }\r\n        svgStr += `\" >\\n</path>`;\r\n        return svgStr;\r\n    }\r\n}\r\n\r\nFlatten.Polygon = Polygon;\r\n\r\n/**\r\n * Shortcut method to create new polygon\r\n */\r\nconst polygon = (...args) => new Flatten.Polygon(...args);\r\nFlatten.polygon = polygon;\r\n\r\nconst {Circle: Circle$1, Line: Line$1, Point: Point$1, Vector: Vector$1, Utils: Utils$1} = Flatten;\r\n/**\r\n * Class Inversion represent operator of inversion in circle\r\n * Inversion is a transformation of the Euclidean plane that maps generalized circles\r\n * (where line is considered as a circle with infinite radius) into generalized circles\r\n * See also https://en.wikipedia.org/wiki/Inversive_geometry and\r\n * http://mathworld.wolfram.com/Inversion.html <br/>\r\n * @type {Inversion}\r\n */\r\nclass Inversion {\r\n    /**\r\n     * Inversion constructor\r\n     * @param {Circle} inversion_circle inversion circle\r\n     */\r\n    constructor(inversion_circle) {\r\n        this.circle = inversion_circle;\r\n    }\r\n\r\n\r\n    get inversion_circle() {\r\n        return this.circle;\r\n    }\r\n\r\n    static inversePoint(inversion_circle, point) {\r\n        const v = new Vector$1(inversion_circle.pc, point);\r\n        const k2 = inversion_circle.r * inversion_circle.r;\r\n        const len2 = v.dot(v);\r\n        const reflected_point = Utils$1.EQ_0(len2) ?\r\n            new Point$1(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY) :\r\n            inversion_circle.pc.translate(v.multiply(k2 / len2));\r\n        return reflected_point;\r\n    }\r\n\r\n    static inverseCircle(inversion_circle, circle) {\r\n        const dist = inversion_circle.pc.distanceTo(circle.pc)[0];\r\n        if (Utils$1.EQ(dist, circle.r)) {     // Circle passing through inversion center mapped into line\r\n            let d = (inversion_circle.r * inversion_circle.r) / (2 * circle.r);\r\n            let v = new Vector$1(inversion_circle.pc, circle.pc);\r\n            v = v.normalize();\r\n            let pt = inversion_circle.pc.translate(v.multiply(d));\r\n\r\n            return new Line$1(pt, v);\r\n        } else {                           // Circle not passing through inversion center - map into another circle */\r\n            /* Taken from http://mathworld.wolfram.com */\r\n            let v = new Vector$1(inversion_circle.pc, circle.pc);\r\n            let s = inversion_circle.r * inversion_circle.r / (v.dot(v) - circle.r * circle.r);\r\n            let pc = inversion_circle.pc.translate(v.multiply(s));\r\n            let r = Math.abs(s) * circle.r;\r\n\r\n            return new Circle$1(pc, r);\r\n        }\r\n    }\r\n\r\n    static inverseLine(inversion_circle, line) {\r\n        const [dist, shortest_segment] = inversion_circle.pc.distanceTo(line);\r\n        if (Utils$1.EQ_0(dist)) {            // Line passing through inversion center, is mapping to itself\r\n            return line.clone();\r\n        } else {                           // Line not passing through inversion center is mapping into circle\r\n            let r = inversion_circle.r * inversion_circle.r / (2 * dist);\r\n            let v = new Vector$1(inversion_circle.pc, shortest_segment.end);\r\n            v = v.multiply(r / dist);\r\n            return new Circle$1(inversion_circle.pc.translate(v), r);\r\n        }\r\n    }\r\n\r\n    inverse(shape) {\r\n        if (shape instanceof Point$1) {\r\n            return Inversion.inversePoint(this.circle, shape);\r\n        }\r\n        else if (shape instanceof Circle$1) {\r\n            return Inversion.inverseCircle(this.circle, shape);\r\n        }\r\n        else if (shape instanceof Line$1) {\r\n            return Inversion.inverseLine(this.circle, shape);\r\n        }\r\n    }\r\n}\r\nFlatten.Inversion = Inversion;\r\n\r\n/**\r\n * Shortcut to create inversion operator\r\n * @param circle\r\n * @returns {Inversion}\r\n */\r\nconst inversion = (circle) => new Flatten.Inversion(circle);\r\nFlatten.inversion = inversion;\r\n\r\nclass Distance {\r\n    /**\r\n     * Calculate distance and shortest segment between points\r\n     * @param pt1\r\n     * @param pt2\r\n     * @returns {Number | Segment} - distance and shortest segment\r\n     */\r\n    static point2point(pt1, pt2) {\r\n        return pt1.distanceTo(pt2);\r\n    }\r\n\r\n    /**\r\n     * Calculate distance and shortest segment between point and line\r\n     * @param pt\r\n     * @param line\r\n     * @returns {Number | Segment} - distance and shortest segment\r\n     */\r\n    static point2line(pt, line) {\r\n        let closest_point = pt.projectionOn(line);\r\n        let vec = new Flatten.Vector(pt, closest_point);\r\n        return [vec.length, new Flatten.Segment(pt, closest_point)];\r\n    }\r\n\r\n    /**\r\n     * Calculate distance and shortest segment between point and circle\r\n     * @param pt\r\n     * @param circle\r\n     * @returns {Number | Segment} - distance and shortest segment\r\n     */\r\n    static point2circle(pt, circle) {\r\n        let [dist2center, shortest_dist] = pt.distanceTo(circle.center);\r\n        if (Flatten.Utils.EQ_0(dist2center)) {\r\n            return [circle.r, new Flatten.Segment(pt, circle.toArc().start)];\r\n        } else {\r\n            let dist = Math.abs(dist2center - circle.r);\r\n            let v = new Flatten.Vector(circle.pc, pt).normalize().multiply(circle.r);\r\n            let closest_point = circle.pc.translate(v);\r\n            return [dist, new Flatten.Segment(pt, closest_point)];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate distance and shortest segment between point and segment\r\n     * @param pt\r\n     * @param segment\r\n     * @returns {Number | Segment} - distance and shortest segment\r\n     */\r\n    static point2segment(pt, segment) {\r\n        /* Degenerated case of zero-length segment */\r\n        if (segment.start.equalTo(segment.end)) {\r\n            return Distance.point2point(pt, segment.start);\r\n        }\r\n\r\n        let v_seg = new Flatten.Vector(segment.start, segment.end);\r\n        let v_ps2pt = new Flatten.Vector(segment.start, pt);\r\n        let v_pe2pt = new Flatten.Vector(segment.end, pt);\r\n        let start_sp = v_seg.dot(v_ps2pt);\r\n        /* dot product v_seg * v_ps2pt */\r\n        let end_sp = -v_seg.dot(v_pe2pt);\r\n        /* minus dot product v_seg * v_pe2pt */\r\n\r\n        let dist;\r\n        let closest_point;\r\n        if (Flatten.Utils.GE(start_sp, 0) && Flatten.Utils.GE(end_sp, 0)) {    /* point inside segment scope */\r\n            let v_unit = segment.tangentInStart(); // new Flatten.Vector(v_seg.x / this.length, v_seg.y / this.length);\r\n            /* unit vector ||v_unit|| = 1 */\r\n            dist = Math.abs(v_unit.cross(v_ps2pt));\r\n            /* dist = abs(v_unit x v_ps2pt) */\r\n            closest_point = segment.start.translate(v_unit.multiply(v_unit.dot(v_ps2pt)));\r\n            return [dist, new Flatten.Segment(pt, closest_point)];\r\n        } else if (start_sp < 0) {                             /* point is out of scope closer to ps */\r\n            return pt.distanceTo(segment.start);\r\n        } else {                                               /* point is out of scope closer to pe */\r\n            return pt.distanceTo(segment.end);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Calculate distance and shortest segment between point and arc\r\n     * @param pt\r\n     * @param arc\r\n     * @returns {Number | Segment} - distance and shortest segment\r\n     */\r\n    static point2arc(pt, arc) {\r\n        let circle = new Flatten.Circle(arc.pc, arc.r);\r\n        let dist_and_segment = [];\r\n        let dist, shortest_segment;\r\n        [dist, shortest_segment] = Distance.point2circle(pt, circle);\r\n        if (shortest_segment.end.on(arc)) {\r\n            dist_and_segment.push(Distance.point2circle(pt, circle));\r\n        }\r\n        dist_and_segment.push(Distance.point2point(pt, arc.start));\r\n        dist_and_segment.push(Distance.point2point(pt, arc.end));\r\n\r\n        Distance.sort(dist_and_segment);\r\n\r\n        return dist_and_segment[0];\r\n    }\r\n\r\n    /**\r\n     * Calculate distance and shortest segment between segment and line\r\n     * @param seg\r\n     * @param line\r\n     * @returns {Number | Segment}\r\n     */\r\n    static segment2line(seg, line) {\r\n        let ip = seg.intersect(line);\r\n        if (ip.length > 0) {\r\n            return [0, new Flatten.Segment(ip[0], ip[0])];   // distance = 0, closest point is the first point\r\n        }\r\n        let dist_and_segment = [];\r\n        dist_and_segment.push(Distance.point2line(seg.start, line));\r\n        dist_and_segment.push(Distance.point2line(seg.end, line));\r\n\r\n        Distance.sort(dist_and_segment);\r\n        return dist_and_segment[0];\r\n\r\n    }\r\n\r\n    /**\r\n     * Calculate distance and shortest segment between two segments\r\n     * @param seg1\r\n     * @param seg2\r\n     * @returns {Number | Segment} - distance and shortest segment\r\n     */\r\n    static segment2segment(seg1, seg2) {\r\n        let ip = intersectSegment2Segment(seg1, seg2);\r\n        if (ip.length > 0) {\r\n            return [0, new Flatten.Segment(ip[0], ip[0])];   // distance = 0, closest point is the first point\r\n        }\r\n\r\n        // Seg1 and seg2 not intersected\r\n        let dist_and_segment = [];\r\n        let dist_tmp, shortest_segment_tmp;\r\n        [dist_tmp, shortest_segment_tmp] = Distance.point2segment(seg2.start, seg1);\r\n        dist_and_segment.push([dist_tmp, shortest_segment_tmp.reverse()]);\r\n        [dist_tmp, shortest_segment_tmp] = Distance.point2segment(seg2.end, seg1);\r\n        dist_and_segment.push([dist_tmp, shortest_segment_tmp.reverse()]);\r\n        dist_and_segment.push(Distance.point2segment(seg1.start, seg2));\r\n        dist_and_segment.push(Distance.point2segment(seg1.end, seg2));\r\n\r\n        Distance.sort(dist_and_segment);\r\n        return dist_and_segment[0];\r\n    }\r\n\r\n    /**\r\n     * Calculate distance and shortest segment between segment and circle\r\n     * @param seg\r\n     * @param circle\r\n     * @returns {Number | Segment} - distance and shortest segment\r\n     */\r\n    static segment2circle(seg, circle) {\r\n        /* Case 1 Segment and circle intersected. Return the first point and zero distance */\r\n        let ip = seg.intersect(circle);\r\n        if (ip.length > 0) {\r\n            return [0, new Flatten.Segment(ip[0], ip[0])];\r\n        }\r\n\r\n        // No intersection between segment and circle\r\n\r\n        /* Case 2. Distance to projection of center point to line bigger than radius\r\n         * And projection point belong to segment\r\n          * Then measure again distance from projection to circle and return it */\r\n        let line = new Flatten.Line(seg.ps, seg.pe);\r\n        let [dist, shortest_segment] = Distance.point2line(circle.center, line);\r\n        if (Flatten.Utils.GE(dist, circle.r) && shortest_segment.end.on(seg)) {\r\n            return Distance.point2circle(shortest_segment.end, circle);\r\n        }\r\n        /* Case 3. Otherwise closest point is one of the end points of the segment */\r\n        else {\r\n            let [dist_from_start, shortest_segment_from_start] = Distance.point2circle(seg.start, circle);\r\n            let [dist_from_end, shortest_segment_from_end] = Distance.point2circle(seg.end, circle);\r\n            return Flatten.Utils.LT(dist_from_start, dist_from_end) ?\r\n                [dist_from_start, shortest_segment_from_start] :\r\n                [dist_from_end, shortest_segment_from_end];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate distance and shortest segment between segment and arc\r\n     * @param seg\r\n     * @param arc\r\n     * @returns {Number | Segment} - distance and shortest segment\r\n     */\r\n    static segment2arc(seg, arc) {\r\n        /* Case 1 Segment and arc intersected. Return the first point and zero distance */\r\n        let ip = seg.intersect(arc);\r\n        if (ip.length > 0) {\r\n            return [0, new Flatten.Segment(ip[0], ip[0])];\r\n        }\r\n\r\n        // No intersection between segment and arc\r\n        let line = new Flatten.Line(seg.ps, seg.pe);\r\n        let circle = new Flatten.Circle(arc.pc, arc.r);\r\n\r\n        /* Case 2. Distance to projection of center point to line bigger than radius AND\r\n         * projection point belongs to segment AND\r\n           * distance from projection point to circle belongs to arc  =>\r\n           * return this distance from projection to circle */\r\n        let [dist_from_center, shortest_segment_from_center] = Distance.point2line(circle.center, line);\r\n        if (Flatten.Utils.GE(dist_from_center, circle.r) && shortest_segment_from_center.end.on(seg)) {\r\n            let [dist_from_projection, shortest_segment_from_projection] =\r\n                Distance.point2circle(shortest_segment_from_center.end, circle);\r\n            if (shortest_segment_from_projection.end.on(arc)) {\r\n                return [dist_from_projection, shortest_segment_from_projection];\r\n            }\r\n        }\r\n        /* Case 3. Otherwise closest point is one of the end points of the segment */\r\n        let dist_and_segment = [];\r\n        dist_and_segment.push(Distance.point2arc(seg.start, arc));\r\n        dist_and_segment.push(Distance.point2arc(seg.end, arc));\r\n\r\n        let dist_tmp, segment_tmp;\r\n        [dist_tmp, segment_tmp] = Distance.point2segment(arc.start, seg);\r\n        dist_and_segment.push([dist_tmp, segment_tmp.reverse()]);\r\n\r\n        [dist_tmp, segment_tmp] = Distance.point2segment(arc.end, seg);\r\n        dist_and_segment.push([dist_tmp, segment_tmp.reverse()]);\r\n\r\n        Distance.sort(dist_and_segment);\r\n        return dist_and_segment[0];\r\n    }\r\n\r\n    /**\r\n     * Calculate distance and shortest segment between two circles\r\n     * @param circle1\r\n     * @param circle2\r\n     * @returns {Number | Segment} - distance and shortest segment\r\n     */\r\n    static circle2circle(circle1, circle2) {\r\n        let ip = circle1.intersect(circle2);\r\n        if (ip.length > 0) {\r\n            return [0, new Flatten.Segment(ip[0], ip[0])];\r\n        }\r\n\r\n        // Case 1. Concentric circles. Convert to arcs and take distance between two arc starts\r\n        if (circle1.center.equalTo(circle2.center)) {\r\n            let arc1 = circle1.toArc();\r\n            let arc2 = circle2.toArc();\r\n            return Distance.point2point(arc1.start, arc2.start);\r\n        } else {\r\n            // Case 2. Not concentric circles\r\n            let line = new Flatten.Line(circle1.center, circle2.center);\r\n            let ip1 = line.intersect(circle1);\r\n            let ip2 = line.intersect(circle2);\r\n\r\n            let dist_and_segment = [];\r\n\r\n            dist_and_segment.push(Distance.point2point(ip1[0], ip2[0]));\r\n            dist_and_segment.push(Distance.point2point(ip1[0], ip2[1]));\r\n            dist_and_segment.push(Distance.point2point(ip1[1], ip2[0]));\r\n            dist_and_segment.push(Distance.point2point(ip1[1], ip2[1]));\r\n\r\n            Distance.sort(dist_and_segment);\r\n            return dist_and_segment[0];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate distance and shortest segment between two circles\r\n     * @param circle\r\n     * @param line\r\n     * @returns {Number | Segment} - distance and shortest segment\r\n     */\r\n    static circle2line(circle, line) {\r\n        let ip = circle.intersect(line);\r\n        if (ip.length > 0) {\r\n            return [0, new Flatten.Segment(ip[0], ip[0])];\r\n        }\r\n\r\n        let [dist_from_center, shortest_segment_from_center] = Distance.point2line(circle.center, line);\r\n        let [dist, shortest_segment] = Distance.point2circle(shortest_segment_from_center.end, circle);\r\n        shortest_segment = shortest_segment.reverse();\r\n        return [dist, shortest_segment];\r\n    }\r\n\r\n    /**\r\n     * Calculate distance and shortest segment between arc and line\r\n     * @param arc\r\n     * @param line\r\n     * @returns {Number | Segment} - distance and shortest segment\r\n     */\r\n    static arc2line(arc, line) {\r\n        /* Case 1 Line and arc intersected. Return the first point and zero distance */\r\n        let ip = line.intersect(arc);\r\n        if (ip.length > 0) {\r\n            return [0, new Flatten.Segment(ip[0], ip[0])];\r\n        }\r\n\r\n        let circle = new Flatten.Circle(arc.center, arc.r);\r\n\r\n        /* Case 2. Distance to projection of center point to line bigger than radius AND\r\n         * projection point belongs to segment AND\r\n           * distance from projection point to circle belongs to arc  =>\r\n           * return this distance from projection to circle */\r\n        let [dist_from_center, shortest_segment_from_center] = Distance.point2line(circle.center, line);\r\n        if (Flatten.Utils.GE(dist_from_center, circle.r)) {\r\n            let [dist_from_projection, shortest_segment_from_projection] =\r\n                Distance.point2circle(shortest_segment_from_center.end, circle);\r\n            if (shortest_segment_from_projection.end.on(arc)) {\r\n                return [dist_from_projection, shortest_segment_from_projection];\r\n            }\r\n        } else {\r\n            let dist_and_segment = [];\r\n            dist_and_segment.push(Distance.point2line(arc.start, line));\r\n            dist_and_segment.push(Distance.point2line(arc.end, line));\r\n\r\n            Distance.sort(dist_and_segment);\r\n            return dist_and_segment[0];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate distance and shortest segment between arc and circle\r\n     * @param arc\r\n     * @param circle2\r\n     * @returns {Number | Segment} - distance and shortest segment\r\n     */\r\n    static arc2circle(arc, circle2) {\r\n        let ip = arc.intersect(circle2);\r\n        if (ip.length > 0) {\r\n            return [0, new Flatten.Segment(ip[0], ip[0])];\r\n        }\r\n\r\n        let circle1 = new Flatten.Circle(arc.center, arc.r);\r\n\r\n        let [dist, shortest_segment] = Distance.circle2circle(circle1, circle2);\r\n        if (shortest_segment.start.on(arc)) {\r\n            return [dist, shortest_segment];\r\n        } else {\r\n            let dist_and_segment = [];\r\n\r\n            dist_and_segment.push(Distance.point2circle(arc.start, circle2));\r\n            dist_and_segment.push(Distance.point2circle(arc.end, circle2));\r\n\r\n            Distance.sort(dist_and_segment);\r\n\r\n            return dist_and_segment[0];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate distance and shortest segment between two arcs\r\n     * @param arc1\r\n     * @param arc2\r\n     * @returns {Number | Segment} - distance and shortest segment\r\n     */\r\n    static arc2arc(arc1, arc2) {\r\n        let ip = arc1.intersect(arc2);\r\n        if (ip.length > 0) {\r\n            return [0, new Flatten.Segment(ip[0], ip[0])];\r\n        }\r\n\r\n        let circle1 = new Flatten.Circle(arc1.center, arc1.r);\r\n        let circle2 = new Flatten.Circle(arc2.center, arc2.r);\r\n\r\n        let [dist, shortest_segment] = Distance.circle2circle(circle1, circle2);\r\n        if (shortest_segment.start.on(arc1) && shortest_segment.end.on(arc2)) {\r\n            return [dist, shortest_segment];\r\n        } else {\r\n            let dist_and_segment = [];\r\n\r\n            let dist_tmp, segment_tmp;\r\n\r\n            [dist_tmp, segment_tmp] = Distance.point2arc(arc1.start, arc2);\r\n            if (segment_tmp.end.on(arc2)) {\r\n                dist_and_segment.push([dist_tmp, segment_tmp]);\r\n            }\r\n\r\n            [dist_tmp, segment_tmp] = Distance.point2arc(arc1.end, arc2);\r\n            if (segment_tmp.end.on(arc2)) {\r\n                dist_and_segment.push([dist_tmp, segment_tmp]);\r\n            }\r\n\r\n            [dist_tmp, segment_tmp] = Distance.point2arc(arc2.start, arc1);\r\n            if (segment_tmp.end.on(arc1)) {\r\n                dist_and_segment.push([dist_tmp, segment_tmp.reverse()]);\r\n            }\r\n\r\n            [dist_tmp, segment_tmp] = Distance.point2arc(arc2.end, arc1);\r\n            if (segment_tmp.end.on(arc1)) {\r\n                dist_and_segment.push([dist_tmp, segment_tmp.reverse()]);\r\n            }\r\n\r\n            [dist_tmp, segment_tmp] = Distance.point2point(arc1.start, arc2.start);\r\n            dist_and_segment.push([dist_tmp, segment_tmp]);\r\n\r\n            [dist_tmp, segment_tmp] = Distance.point2point(arc1.start, arc2.end);\r\n            dist_and_segment.push([dist_tmp, segment_tmp]);\r\n\r\n            [dist_tmp, segment_tmp] = Distance.point2point(arc1.end, arc2.start);\r\n            dist_and_segment.push([dist_tmp, segment_tmp]);\r\n\r\n            [dist_tmp, segment_tmp] = Distance.point2point(arc1.end, arc2.end);\r\n            dist_and_segment.push([dist_tmp, segment_tmp]);\r\n\r\n            Distance.sort(dist_and_segment);\r\n\r\n            return dist_and_segment[0];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate distance and shortest segment between point and polygon\r\n     * @param point\r\n     * @param polygon\r\n     * @returns {Number | Segment} - distance and shortest segment\r\n     */\r\n    static point2polygon(point, polygon) {\r\n        let min_dist_and_segment = [Number.POSITIVE_INFINITY, new Flatten.Segment()];\r\n        for (let edge of polygon.edges) {\r\n            let [dist, shortest_segment] = (edge.shape instanceof Flatten.Segment) ?\r\n                Distance.point2segment(point, edge.shape) : Distance.point2arc(point, edge.shape);\r\n            if (Flatten.Utils.LT(dist, min_dist_and_segment[0])) {\r\n                min_dist_and_segment = [dist, shortest_segment];\r\n            }\r\n        }\r\n        return min_dist_and_segment;\r\n    }\r\n\r\n    static shape2polygon(shape, polygon) {\r\n        let min_dist_and_segment = [Number.POSITIVE_INFINITY, new Flatten.Segment()];\r\n        for (let edge of polygon.edges) {\r\n            let [dist, shortest_segment] = shape.distanceTo(edge.shape);\r\n            if (Flatten.Utils.LT(dist, min_dist_and_segment[0])) {\r\n                min_dist_and_segment = [dist, shortest_segment];\r\n            }\r\n        }\r\n        return min_dist_and_segment;\r\n    }\r\n\r\n    /**\r\n     * Calculate distance and shortest segment between two polygons\r\n     * @param polygon1\r\n     * @param polygon2\r\n     * @returns {Number | Segment} - distance and shortest segment\r\n     */\r\n    static polygon2polygon(polygon1, polygon2) {\r\n        let min_dist_and_segment = [Number.POSITIVE_INFINITY, new Flatten.Segment()];\r\n        for (let edge1 of polygon1.edges) {\r\n            for (let edge2 of polygon2.edges) {\r\n                let [dist, shortest_segment] = edge1.shape.distanceTo(edge2.shape);\r\n                if (Flatten.Utils.LT(dist, min_dist_and_segment[0])) {\r\n                    min_dist_and_segment = [dist, shortest_segment];\r\n                }\r\n            }\r\n        }\r\n        return min_dist_and_segment;\r\n    }\r\n\r\n    /**\r\n     * Returns [mindist, maxdist] array of squared minimal and maximal distance between boxes\r\n     * Minimal distance by x is\r\n     *    (box2.xmin - box1.xmax), if box1 is left to box2\r\n     *    (box1.xmin - box2.xmax), if box2 is left to box1\r\n     *    0,                       if box1 and box2 are intersected by x\r\n     * Minimal distance by y is defined in the same way\r\n     *\r\n     * Maximal distance is estimated as a sum of squared dimensions of the merged box\r\n     *\r\n     * @param box1\r\n     * @param box2\r\n     * @returns {Number | Number} - minimal and maximal distance\r\n     */\r\n    static box2box_minmax(box1, box2) {\r\n        let mindist_x = Math.max(Math.max(box1.xmin - box2.xmax, 0), Math.max(box2.xmin - box1.xmax, 0));\r\n        let mindist_y = Math.max(Math.max(box1.ymin - box2.ymax, 0), Math.max(box2.ymin - box1.ymax, 0));\r\n        let mindist = mindist_x * mindist_x + mindist_y * mindist_y;\r\n\r\n        let box = box1.merge(box2);\r\n        let dx = box.xmax - box.xmin;\r\n        let dy = box.ymax - box.ymin;\r\n        let maxdist = dx * dx + dy * dy;\r\n\r\n        return [mindist, maxdist];\r\n    }\r\n\r\n    static minmax_tree_process_level(shape, level, min_stop, tree) {\r\n        // Calculate minmax distance to each shape in current level\r\n        // Insert result into the interval tree for further processing\r\n        // update min_stop with maxdist, it will be the new stop distance\r\n        let mindist, maxdist;\r\n        for (let node of level) {\r\n\r\n            // [mindist, maxdist] = Distance.box2box_minmax(shape.box, node.max);\r\n            // if (Flatten.Utils.GT(mindist, min_stop))\r\n            //     continue;\r\n\r\n            // Estimate min-max dist to the shape stored in the node.item, using node.item.key which is shape's box\r\n            [mindist, maxdist] = Distance.box2box_minmax(shape.box, node.item.key);\r\n            if (node.item.value instanceof Flatten.Edge) {\r\n                tree.insert([mindist, maxdist], node.item.value.shape);\r\n            } else {\r\n                tree.insert([mindist, maxdist], node.item.value);\r\n            }\r\n            if (Flatten.Utils.LT(maxdist, min_stop)) {\r\n                min_stop = maxdist;                       // this will be the new distance estimation\r\n            }\r\n        }\r\n\r\n        if (level.length === 0)\r\n            return min_stop;\r\n\r\n        // Calculate new level from left and right children of the current\r\n        let new_level_left = level.map(node => node.left.isNil() ? undefined : node.left).filter(node => node !== undefined);\r\n        let new_level_right = level.map(node => node.right.isNil() ? undefined : node.right).filter(node => node !== undefined);\r\n        // Merge left and right subtrees and leave only relevant subtrees\r\n        let new_level = [...new_level_left, ...new_level_right].filter(node => {\r\n            // Node subtree quick reject, node.max is a subtree box\r\n            let [mindist, maxdist] = Distance.box2box_minmax(shape.box, node.max);\r\n            return (Flatten.Utils.LE(mindist, min_stop));\r\n        });\r\n\r\n        min_stop = Distance.minmax_tree_process_level(shape, new_level, min_stop, tree);\r\n        return min_stop;\r\n    }\r\n\r\n    /**\r\n     * Calculates sorted tree of [mindist, maxdist] intervals between query shape\r\n     * and shapes of the planar set.\r\n     * @param shape\r\n     * @param set\r\n     */\r\n    static minmax_tree(shape, set, min_stop) {\r\n        let tree = new IntervalTree();\r\n        let level = [set.index.root];\r\n        let squared_min_stop = min_stop < Number.POSITIVE_INFINITY ? min_stop * min_stop : Number.POSITIVE_INFINITY;\r\n        squared_min_stop = Distance.minmax_tree_process_level(shape, level, squared_min_stop, tree);\r\n        return tree;\r\n    }\r\n\r\n    static minmax_tree_calc_distance(shape, node, min_dist_and_segment) {\r\n        let min_dist_and_segment_new, stop;\r\n        if (node != null && !node.isNil()) {\r\n            [min_dist_and_segment_new, stop] = Distance.minmax_tree_calc_distance(shape, node.left, min_dist_and_segment);\r\n\r\n            if (stop) {\r\n                return [min_dist_and_segment_new, stop];\r\n            }\r\n\r\n            if (Flatten.Utils.LT(min_dist_and_segment_new[0], Math.sqrt(node.item.key.low))) {\r\n                return [min_dist_and_segment_new, true];   // stop condition\r\n            }\r\n\r\n            let [dist, shortest_segment] = Distance.distance(shape, node.item.value);\r\n            // console.log(dist)\r\n            if (Flatten.Utils.LT(dist, min_dist_and_segment_new[0])) {\r\n                min_dist_and_segment_new = [dist, shortest_segment];\r\n            }\r\n\r\n            [min_dist_and_segment_new, stop] = Distance.minmax_tree_calc_distance(shape, node.right, min_dist_and_segment_new);\r\n\r\n            return [min_dist_and_segment_new, stop];\r\n        }\r\n\r\n        return [min_dist_and_segment, false];\r\n    }\r\n\r\n    /**\r\n     * Calculates distance between shape and Planar Set of shapes\r\n     * @param shape\r\n     * @param {PlanarSet} set\r\n     * @param {Number} min_stop\r\n     * @returns {*}\r\n     */\r\n    static shape2planarSet(shape, set, min_stop = Number.POSITIVE_INFINITY) {\r\n        let min_dist_and_segment = [min_stop, new Flatten.Segment()];\r\n        let stop = false;\r\n        if (set instanceof Flatten.PlanarSet) {\r\n            let tree = Distance.minmax_tree(shape, set, min_stop);\r\n            [min_dist_and_segment, stop] = Distance.minmax_tree_calc_distance(shape, tree.root, min_dist_and_segment);\r\n        }\r\n        return min_dist_and_segment;\r\n    }\r\n\r\n    static sort(dist_and_segment) {\r\n        dist_and_segment.sort((d1, d2) => {\r\n            if (Flatten.Utils.LT(d1[0], d2[0])) {\r\n                return -1;\r\n            }\r\n            if (Flatten.Utils.GT(d1[0], d2[0])) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        });\r\n    }\r\n\r\n    static distance(shape1, shape2) {\r\n        return shape1.distanceTo(shape2);\r\n    }\r\n}\r\n\r\nFlatten.Distance = Distance;\r\n\r\n/**\r\n * Created by Alex Bol on 2/18/2017.\r\n */\r\n\r\nFlatten.BooleanOperations = BooleanOperations;\r\nFlatten.Relations = Relations;\r\n\r\nexport default Flatten;\r\nexport { Arc, BOUNDARY, BooleanOperations, Box, CCW, CW, Circle, Distance, Edge, errors as Errors, Face, INSIDE, Inversion, Line, Matrix, Multiline, ORIENTATION, OUTSIDE, PlanarSet, Point, Polygon, Ray, Relations, Segment, Utils, Vector, arc, box, circle, inversion, line, matrix, multiline, point, polygon, ray, ray_shoot, segment, vector };\r\n","import type {LatLngExpression} from 'leaflet';\nimport L, {Bounds, LatLng, LatLngBounds, Path, Point, Util} from 'leaflet';\nimport Flatten from '@flatten-js/core';\nimport Matrix = Flatten.Matrix;\nimport type {Points, Shape, ShapeSet, Units} from './types';\nimport type {ShapeOptions, TrackSymbolOptions} from './options';\n\nconst DEFAULT_SIZE = 24;\nconst DEFAULT_LEADER_TIME = 60;\n\n/**\n * Track symbol.\n */\nexport class TrackSymbol\n    extends Path {\n\n    /** Default 'withHeading' shape points. */\n    public static DEFAULT_HEADING_SHAPE_POINTS: Points = [[0.75, 0], [-0.25, 0.3], [-0.25, -0.3]];\n\n    /** Default 'withoutHeading' shape points. */\n    public static DEFAULT_NOHEADING_SHAPE_POINTS: Points = [[0.3, 0], [0, 0.3], [-0.3, 0], [0, -0.3]];\n\n    /** Default shape set. */\n    private static DEFAULT_SHAPE_SET: ShapeSet = {\n        withHeading: {\n            points: TrackSymbol.DEFAULT_HEADING_SHAPE_POINTS,\n            length: DEFAULT_SIZE,\n            breadth: DEFAULT_SIZE,\n            units: \"pixels\",\n        },\n        withoutHeading: {\n            points: TrackSymbol.DEFAULT_NOHEADING_SHAPE_POINTS,\n            length: DEFAULT_SIZE,\n            breadth: DEFAULT_SIZE,\n            units: \"pixels\",\n        },\n    };\n\n    /** Location. */\n    private _latLng: LatLng;\n    /** Heading (radians, from north, clockwise. */\n    private _heading?: number;\n    /** Course (radians, from north, clockwise. */\n    private _course?: number;\n    /** Speed (m/s). */\n    private _speed?: number;\n     /** Shape options. */\n    private _shapeOptions: ShapeOptions;\n\n    /** Current shape points. */\n    private _currentShapePoints: Point[] | undefined;\n    /** Current leader points. */\n    private _currentLeaderPoints: Point[] | undefined;\n    /** Current bounds. */\n    private _currentBounds: Bounds | undefined;\n    /** Current lat/lng bounds. */\n    private _currentLatLngBounds: LatLngBounds | undefined;\n\n    /**\n     * TrackSymbol constructor.\n     *\n     * @param latLng - Initial location.\n     * @param options - Options.\n     */\n    constructor(latLng: LatLngExpression, options?: TrackSymbolOptions) {\n        super();\n\n        Util.setOptions(this, options);\n        if (latLng == undefined) {\n            throw Error(\"latLng required\");\n        }\n        options = options || {};\n        this._latLng = L.latLng(latLng);\n        this._heading = options.heading;\n        this._course = options.course;\n        this._speed = options.speed;\n        this._setShapeOptions(options.shapeOptions);\n    }\n\n    // ---- Leaflet\n\n    /**\n     * Project to layer.\n     *\n     * [Leaflet internal]\n     */\n    protected _project() {\n        this._currentShapePoints = this._getProjectedShapePoints();\n        this._currentLeaderPoints = this._getLeaderShapePoints();\n\n        const bounds = new Bounds();\n        for (let i = 0; i < this._currentShapePoints.length; i++) {\n            const point = this._currentShapePoints[i];\n            bounds.extend(point);\n        }\n        if (this._currentLeaderPoints !== undefined) {\n            for (let i = 0; i < this._currentLeaderPoints.length; i++) {\n                const point = this._currentShapePoints[i];\n                bounds.extend(point);\n            }\n        }\n        this._currentBounds = bounds;\n        this._currentLatLngBounds = new LatLngBounds(\n            this._map.layerPointToLatLng(bounds.getBottomLeft()),\n            this._map.layerPointToLatLng(bounds.getTopRight())\n        );\n    }\n\n    /**\n     * Update element.\n     *\n     * [Leaflet internal]\n     */\n    protected _update() {\n        if (!this._map) {\n            return;\n        }\n        let viewPath = TrackSymbol._toSVGPath(this._currentShapePoints, true);\n        if (this._currentLeaderPoints !== undefined) {\n            viewPath += ' ' + TrackSymbol._toSVGPath(this._currentLeaderPoints, false);\n        }\n        this.getElement().setAttribute('d', viewPath);\n    }\n\n    // ----\n\n    /**\n     * Set shape options.\n     *\n     * @param shapeOptions - Shape options.\n     */\n    private _setShapeOptions(shapeOptions: ShapeOptions | undefined) {\n        this._shapeOptions = shapeOptions || {\n            leaderTime: DEFAULT_LEADER_TIME,\n            defaultShapeSet: TrackSymbol.DEFAULT_SHAPE_SET,\n        };\n        if (this._shapeOptions.leaderTime === undefined) {\n            this._shapeOptions.leaderTime = DEFAULT_LEADER_TIME;\n        }\n        if (this._shapeOptions.defaultShapeSet === undefined) {\n            this._shapeOptions.defaultShapeSet = TrackSymbol.DEFAULT_SHAPE_SET;\n        }\n        if (this._shapeOptions.shapeSetEntries !== undefined) {\n            this._shapeOptions.shapeSetEntries\n                .sort((a, b) => b.minZoomLevel - a.minZoomLevel);\n        }\n    }\n\n    // ---\n\n    /**\n     * Sets the location.\n     *\n     * @param latLng - Location.\n     * @returns this\n     */\n    public setLatLng(latLng: LatLngExpression): this {\n        const oldLatLng = this._latLng;\n        this._latLng = L.latLng(latLng);\n        this.fire('move', {\n            oldLatLng: oldLatLng,\n            latlng: this._latLng,\n        });\n        return this.redraw();\n    }\n\n    /**\n     * Sets the heading.\n     *\n     * @param heading - Heading (unit: radians, from north, clockwise).\n     * @returns this\n     */\n    public setHeading(heading: number | undefined): this {\n        this._heading = heading;\n        return this.redraw();\n    }\n\n    /**\n     * Sets the course over ground.\n     *\n     * @param course - Course over ground (unit: radians, from north, clockwise).\n     * @returns this\n     */\n    public setCourse(course: number | undefined): this {\n        this._course = course;\n        return this.redraw();\n    }\n\n    /**\n     * Sets the speed.\n     *\n     * @param speed - Speed (unit: m/s).\n     * @returns this\n     */\n    public setSpeed(speed: number | undefined): this {\n        this._speed = speed;\n        return this.redraw();\n    }\n\n    /**\n     * Sets the shape options.\n     *\n     * @param shapeOptions - Shape options.\n     * @returns this\n     */\n    public setShapeOptions(shapeOptions: ShapeOptions): this {\n        this._setShapeOptions(shapeOptions);\n        return this.redraw();\n    }\n\n    /**\n     * Returns the bounding box.\n     *\n     * @returns The bounding box.\n     */\n    public getBounds(): LatLngBounds {\n        return this._currentLatLngBounds;\n    }\n\n    /**\n     * Returns the location.\n     *\n     * @returns The location.\n     */\n    public getLatLng(): LatLng {\n        return this._latLng;\n    }\n\n    /**\n     * Returns the speed.\n     *\n     * @returns The speed (m/s).\n     */\n    public getSpeed(): number | undefined {\n        return this._speed;\n    }\n\n    /**\n     * Returns the heading.\n     *\n     * @returns The heading (radians, from north, clockwise).\n     */\n    public getHeading(): number | undefined {\n        return this._heading;\n    }\n\n    /**\n     * Returns the course.\n     *\n     * @returns The course (radians, from north, clockwise).\n     */\n    public getCourse(): number | undefined {\n        return this._course;\n    }\n\n    /**\n     * Creates a shape.\n     *\n     * @param points - Points.\n     * @param size - Size (units: pixels).\n     * @returns The new shape.\n     */\n    public static createShape(points: Points, size: number): Shape {\n        return {\n            points: points,\n            length: size,\n            breadth: size,\n            units: \"pixels\",\n        };\n    }\n\n    /**\n     * Creates a shape set.\n     *\n     * @param size - Size (units: pixels).\n     * @returns The new shape set.\n     */\n    public static createShapeSet(size: number): ShapeSet {\n        return {\n            withHeading: TrackSymbol.createShape(TrackSymbol.DEFAULT_HEADING_SHAPE_POINTS, size),\n            withoutHeading: TrackSymbol.createShape(TrackSymbol.DEFAULT_NOHEADING_SHAPE_POINTS, size),\n        };\n    }\n\n    /**\n     * Get latitude size of y-distance.\n     *\n     * @param value - Y distance (m).\n     * @returns dLat\n     */\n    private _getLatSizeOf(value): number {\n        return (value / 40075017) * 360;\n    }\n\n    /**\n     * Get longitude size of x-distance.\n     *\n     * @param value - X distance (m).\n     * @returns dLng\n     */\n    private _getLngSizeOf(value): number {\n        return ((value / 40075017) * 360) / Math.cos((Math.PI / 180) * this._latLng.lat);\n    }\n\n    /**\n     * Get view angle from model.\n     *\n     * @param modelAngle - Model angle (radians).\n     * @returns View angle from model (radians).\n     */\n    private _getViewAngleFromModel(modelAngle: number): number {\n        return modelAngle - Math.PI / 2.0;\n    }\n\n    /**\n     * Get leader shape points.\n     *\n     * @returns Points.\n     */\n    private _getLeaderShapePoints(): Point[] | undefined {\n        if ((this._course === undefined) || (this._speed === undefined)) {\n            return undefined;\n        }\n        const angle = this._getViewAngleFromModel(this._course);\n        const leaderLength = this._speed * this._shapeOptions.leaderTime;\n        const leaderEndLatLng = this._calcRelativeLatLng(this._latLng, leaderLength, angle);\n        return this._latLngsToLayerPoints(this._latLng, leaderEndLatLng);\n    }\n\n    /**\n     * Calculate relative lat/lng.\n     *\n     * @param latLng - LatLng.\n     * @param distance - Distance (meters).\n     * @param angle - Angle (radians).\n     * @returns Calculated LatLng.\n     */\n    private _calcRelativeLatLng(latLng: LatLng, distance: number, angle: number): LatLng {\n        return new LatLng(\n            latLng.lat - this._getLatSizeOf(distance * Math.sin(angle)),\n            latLng.lng + this._getLngSizeOf(distance * Math.cos(angle))\n        );\n    }\n\n    /**\n     * Convert LatLngs to map layer points.\n     *\n     * @param latLngs - LatLngs.\n     * @returns Points.\n     */\n    private _latLngsToLayerPoints(...latLngs: LatLng[]): Point[] {\n        return latLngs.map(latLng => this._map.latLngToLayerPoint(latLng));\n    }\n\n    /**\n     * Gets the shape set.\n     *\n     * @returns The shape set.\n     */\n    private _getShapeSet(): ShapeSet {\n        if ((this._shapeOptions.shapeSetEntries === undefined)\n            || (this._shapeOptions.shapeSetEntries.length == 0)) {\n            return this._shapeOptions.defaultShapeSet;\n        }\n        const zoomLevel = this._map.getZoom();\n        const shapeSetEntriesFiltered = this._shapeOptions.shapeSetEntries\n            .sort((a, b) => b.minZoomLevel - a.minZoomLevel)\n            .filter(shapeSetEntry => zoomLevel >= shapeSetEntry.minZoomLevel);\n        if (shapeSetEntriesFiltered.length > 0) {\n            return shapeSetEntriesFiltered[0].shapeSet;\n        } else {\n            return this._shapeOptions.defaultShapeSet;\n        }\n    }\n\n    /**\n     * Gets the shape.\n     *\n     * @returns The shape.\n     */\n    private _getShape(): Shape {\n        const shapeSet = this._getShapeSet();\n        return (this._heading !== undefined) ? shapeSet.withHeading : shapeSet.withoutHeading;\n    }\n\n    /**\n     * Get transformed shape points.\n     *\n     * @returns Transformed points and units.\n     */\n    private _getTransformedShapePoints(): [Points, Units] {\n        const shape = this._getShape();\n        let m = new Matrix();\n        if (this._heading !== undefined) {\n            const headingAngle = this._getViewAngleFromModel(this._heading);\n            m = m.rotate(headingAngle);\n        }\n        if (shape.center !== undefined) {\n            m = m.translate(-shape.center[0], -shape.center[1]);\n        }\n        m = m.scale(shape.length, shape.breadth);\n        const points = shape.points.map(point => m.transform(point));\n        return [points, shape.units];\n    }\n\n    /**\n     * Get projected shape points.\n     *\n     * @returns Points projected to map layer.\n     */\n    private _getProjectedShapePoints(): Point[] {\n        const [points, units] = this._getTransformedShapePoints();\n        switch (units) {\n            case \"pixels\": {\n                const p = this._map.latLngToLayerPoint(this._latLng);\n                const m = new Matrix().translate(p.x, p.y);\n                return points.map(point => {\n                    const p1 = m.transform(point);\n                    return new Point(p1[0], p1[1]);\n                });\n            }\n            case \"meters\": {\n                return points.map(point => this._map.latLngToLayerPoint(\n                    new LatLng(\n                        this._latLng.lat - this._getLatSizeOf(point[1]),\n                        this._latLng.lng + this._getLngSizeOf(point[0])\n                    )\n                ));\n            }\n            default:\n                break;\n        }\n    }\n\n    /**\n     * Converts points to an SVG path string.\n     *\n     * @param points - Points.\n     * @param close - Close path.\n     * @returns SVG path string.\n     */\n    private static _toSVGPath(points: Point[], close: boolean): string {\n        let result = '';\n        for (let i = 0; i < points.length; i++) {\n            const point = points[i];\n            if (result === '') {\n                result = `M ${point.x} ${point.y} `;\n            } else {\n                result += `L ${point.x} ${point.y} `;\n            }\n        }\n        if (close) {\n            result += 'Z';\n        }\n        return result;\n    }\n}\n","import {TrackSymbol} from '../trackSymbol';\nimport type {ShapeOptions} from '../options';\nimport type {Points, ShapeSet} from '../types';\nimport type {AISTrackSymbolOptions} from './options';\nimport type {Dimension, ETA, PositionReport, ShipStaticData} from './types';\nimport {DomUtil, Util} from 'leaflet';\n\nconst DEFAULT_SIZE = 24;\nconst DEFAULT_MIN_ZOOM_LEVEL = 14;\nconst DEFAULT_LEADER_TIME = 60;\nconst KNOTS_PER_METER_PER_SECOND = 1.944;\nconst MAX_SOG_EXCLUSIVE = 102.3;\nconst MAX_COG_EXCLUSIVE = 360;\nconst MAX_HEADING_EXCLUSIVE = 360;\n\ninterface ShipType {\n    name: string;\n    color: string;\n    fillColor: string;\n}\n\nconst RESERVED_COLOR = \"#000000\";\nconst RESERVED_FILL_COLOR = \"#d3d3d3\";\nconst WIG_COLOR = \"#000000\";\nconst WIG_FILL_COLOR = \"#d3d3d3\";\nconst TYPE_3X_COLOR = \"#8b008b\";\nconst TYPE_3X_FILL_COLOR = \"#ff00ff\";\nconst HSC_COLOR = \"#00008b\";\nconst HSC_FILL_COLOR = \"#ffff00\";\nconst TYPE_5X_COLOR = \"#008b8b\";\nconst TYPE_5X_FILL_COLOR = \"#00ffff\";\nconst PASSENGER_COLOR = \"#00008b\";\nconst PASSENGER_FILL_COLOR = \"#0000ff\";\nconst CARGO_COLOR = \"#006400\";\nconst CARGO_FILL_COLOR = \"#90ee90\";\nconst TANKER_COLOR = \"#8b0000\";\nconst TANKER_FILL_COLOR = \"#ff0000\";\nconst OTHER_COLOR = \"#008b8b\";\nconst OTHER_FILL_COLOR = \"#00ffff\";\n\nconst TYPES: { [key: number]: ShipType } = {\n    0: newShipType('Not available', WIG_COLOR, WIG_FILL_COLOR),\n    20: newShipType('Wing in ground (WIG), all ships of this type', WIG_COLOR, WIG_FILL_COLOR),\n    21: newShipType('Wing in ground (WIG), Hazardous category A', WIG_COLOR, WIG_FILL_COLOR),\n    22: newShipType('Wing in ground (WIG), Hazardous category B', WIG_COLOR, WIG_FILL_COLOR),\n    23: newShipType('Wing in ground (WIG), Hazardous category C', WIG_COLOR, WIG_FILL_COLOR),\n    24: newShipType('Wing in ground (WIG), Hazardous category D', WIG_COLOR, WIG_FILL_COLOR),\n    25: newShipType('Wing in ground (WIG), Reserved for future use', WIG_COLOR, WIG_FILL_COLOR),\n    26: newShipType('Wing in ground (WIG), Reserved for future use', WIG_COLOR, WIG_FILL_COLOR),\n    27: newShipType('Wing in ground (WIG), Reserved for future use', WIG_COLOR, WIG_FILL_COLOR),\n    28: newShipType('Wing in ground (WIG), Reserved for future use', WIG_COLOR, WIG_FILL_COLOR),\n    29: newShipType('Wing in ground (WIG), Reserved for future use', WIG_COLOR, WIG_FILL_COLOR),\n    30: newShipType('Fishing', TYPE_3X_COLOR, TYPE_3X_FILL_COLOR),\n    31: newShipType('Towing', TYPE_3X_COLOR, TYPE_3X_FILL_COLOR),\n    32: newShipType('Towing: length exceeds 200m or breadth exceeds 25m', TYPE_3X_COLOR, TYPE_3X_FILL_COLOR),\n    33: newShipType('Dredging or underwater ops', TYPE_3X_COLOR, TYPE_3X_FILL_COLOR),\n    34: newShipType('Diving ops', TYPE_3X_COLOR, TYPE_3X_FILL_COLOR),\n    35: newShipType('Military ops', TYPE_3X_COLOR, TYPE_3X_FILL_COLOR),\n    36: newShipType('Sailing', TYPE_3X_COLOR, TYPE_3X_FILL_COLOR),\n    37: newShipType('Pleasure Craft', TYPE_3X_COLOR, TYPE_3X_FILL_COLOR),\n    40: newShipType('High speed craft (HSC), all ships of this type', HSC_COLOR, HSC_FILL_COLOR),\n    41: newShipType('High speed craft (HSC), Hazardous category A', HSC_COLOR, HSC_FILL_COLOR),\n    42: newShipType('High speed craft (HSC), Hazardous category B', HSC_COLOR, HSC_FILL_COLOR),\n    43: newShipType('High speed craft (HSC), Hazardous category C', HSC_COLOR, HSC_FILL_COLOR),\n    44: newShipType('High speed craft (HSC), Hazardous category D', HSC_COLOR, HSC_FILL_COLOR),\n    45: newShipType('High speed craft (HSC), Reserved for future use', HSC_COLOR, HSC_FILL_COLOR),\n    46: newShipType('High speed craft (HSC), Reserved for future use', HSC_COLOR, HSC_FILL_COLOR),\n    47: newShipType('High speed craft (HSC), Reserved for future use', HSC_COLOR, HSC_FILL_COLOR),\n    48: newShipType('High speed craft (HSC), Reserved for future use', HSC_COLOR, HSC_FILL_COLOR),\n    49: newShipType('High speed craft (HSC), No additional information', HSC_COLOR, HSC_FILL_COLOR),\n    50: newShipType('Pilot Vessel', TYPE_5X_COLOR, TYPE_5X_FILL_COLOR),\n    51: newShipType('Search and Rescue vessel', TYPE_5X_COLOR, TYPE_5X_FILL_COLOR),\n    52: newShipType('Tug', TYPE_5X_COLOR, TYPE_5X_FILL_COLOR),\n    53: newShipType('Port Tender', TYPE_5X_COLOR, TYPE_5X_FILL_COLOR),\n    54: newShipType('Anti-pollution equipment', TYPE_5X_COLOR, TYPE_5X_FILL_COLOR),\n    55: newShipType('Law Enforcement', TYPE_5X_COLOR, TYPE_5X_FILL_COLOR),\n    56: newShipType('Spare - Local Vessel', TYPE_5X_COLOR, TYPE_5X_FILL_COLOR),\n    57: newShipType('Spare - Local Vessel', TYPE_5X_COLOR, TYPE_5X_FILL_COLOR),\n    58: newShipType('Medical Transport', TYPE_5X_COLOR, TYPE_5X_FILL_COLOR),\n    59: newShipType('Noncombatant ship according to RR Resolution No. 18', '', ''),\n    60: newShipType('Passenger, all ships of this type', PASSENGER_COLOR, PASSENGER_FILL_COLOR),\n    61: newShipType('Passenger, Hazardous category A', PASSENGER_COLOR, PASSENGER_FILL_COLOR),\n    62: newShipType('Passenger, Hazardous category B', PASSENGER_COLOR, PASSENGER_FILL_COLOR),\n    63: newShipType('Passenger, Hazardous category C', PASSENGER_COLOR, PASSENGER_FILL_COLOR),\n    64: newShipType('Passenger, Hazardous category D', PASSENGER_COLOR, PASSENGER_FILL_COLOR),\n    65: newShipType('Passenger, Reserved for future use', PASSENGER_COLOR, PASSENGER_FILL_COLOR),\n    66: newShipType('Passenger, Reserved for future use', PASSENGER_COLOR, PASSENGER_FILL_COLOR),\n    67: newShipType('Passenger, Reserved for future use', PASSENGER_COLOR, PASSENGER_FILL_COLOR),\n    68: newShipType('Passenger, Reserved for future use', PASSENGER_COLOR, PASSENGER_FILL_COLOR),\n    69: newShipType('Passenger, No additional information', PASSENGER_COLOR, PASSENGER_FILL_COLOR),\n    70: newShipType('Cargo, all ships of this type', CARGO_COLOR, CARGO_FILL_COLOR),\n    71: newShipType('Cargo, Hazardous category A', CARGO_COLOR, CARGO_FILL_COLOR),\n    72: newShipType('Cargo, Hazardous category B', CARGO_COLOR, CARGO_FILL_COLOR),\n    73: newShipType('Cargo, Hazardous category C', CARGO_COLOR, CARGO_FILL_COLOR),\n    74: newShipType('Cargo, Hazardous category D', CARGO_COLOR, CARGO_FILL_COLOR),\n    75: newShipType('Cargo, Reserved for future use', CARGO_COLOR, CARGO_FILL_COLOR),\n    76: newShipType('Cargo, Reserved for future use', CARGO_COLOR, CARGO_FILL_COLOR),\n    77: newShipType('Cargo, Reserved for future use', CARGO_COLOR, CARGO_FILL_COLOR),\n    78: newShipType('Cargo, Reserved for future use', CARGO_COLOR, CARGO_FILL_COLOR),\n    79: newShipType('Cargo, No additional information', CARGO_COLOR, CARGO_FILL_COLOR),\n    80: newShipType('Tanker, all ships of this type', TANKER_COLOR, TANKER_FILL_COLOR),\n    81: newShipType('Tanker, Hazardous category A', TANKER_COLOR, TANKER_FILL_COLOR),\n    82: newShipType('Tanker, Hazardous category B', TANKER_COLOR, TANKER_FILL_COLOR),\n    83: newShipType('Tanker, Hazardous category C', TANKER_COLOR, TANKER_FILL_COLOR),\n    84: newShipType('Tanker, Hazardous category D', TANKER_COLOR, TANKER_FILL_COLOR),\n    85: newShipType('Tanker, Reserved for future use', TANKER_COLOR, TANKER_FILL_COLOR),\n    86: newShipType('Tanker, Reserved for future use', TANKER_COLOR, TANKER_FILL_COLOR),\n    87: newShipType('Tanker, Reserved for future use', TANKER_COLOR, TANKER_FILL_COLOR),\n    88: newShipType('Tanker, Reserved for future use', TANKER_COLOR, TANKER_FILL_COLOR),\n    89: newShipType('Tanker, No additional information', TANKER_COLOR, TANKER_FILL_COLOR),\n    90: newShipType('Other Type, all ships of this type', OTHER_COLOR, OTHER_FILL_COLOR),\n    91: newShipType('Other Type, Hazardous category A', OTHER_COLOR, OTHER_FILL_COLOR),\n    92: newShipType('Other Type, Hazardous category B', OTHER_COLOR, OTHER_FILL_COLOR),\n    93: newShipType('Other Type, Hazardous category C', OTHER_COLOR, OTHER_FILL_COLOR),\n    94: newShipType('Other Type, Hazardous category D', OTHER_COLOR, OTHER_FILL_COLOR),\n    95: newShipType('Other Type, Reserved for future use', OTHER_COLOR, OTHER_FILL_COLOR),\n    96: newShipType('Other Type, Reserved for future use', OTHER_COLOR, OTHER_FILL_COLOR),\n    97: newShipType('Other Type, Reserved for future use', OTHER_COLOR, OTHER_FILL_COLOR),\n    98: newShipType('Other Type, Reserved for future use', OTHER_COLOR, OTHER_FILL_COLOR),\n    99: newShipType('Other Type, no additional information', OTHER_COLOR, OTHER_FILL_COLOR),\n};\nconst RESERVED_TYPE = newShipType('Reserved', RESERVED_COLOR, RESERVED_FILL_COLOR);\nconst UNKNOWN_TYPE = newShipType('Unknown', RESERVED_COLOR, RESERVED_FILL_COLOR);\n\nexport class AISTrackSymbol\n    extends TrackSymbol {\n\n    /** Default silhouette shape points. */\n    public static DEFAULT_SILHOUETTE_SHAPE_POINTS: Points = [[1, 0.5], [0.75, 1], [0, 1], [0, 0], [0.75, 0]];\n\n    private readonly _leaderTime: number;\n    private readonly _minZoomLevel: number;\n    private readonly _size: number;\n    private _positionReport: PositionReport;\n    private _shipStaticData?: ShipStaticData;\n\n    /**\n     * AISTrackSymbol constructor.\n     *\n     * @param positionReport - Position report.\n     * @param options - Options.\n     */\n    constructor(positionReport: PositionReport, options?: AISTrackSymbolOptions) {\n        super([positionReport.latitude, positionReport.longitude], options);\n\n        Util.setOptions(this, options);\n        options = options || {};\n        this._leaderTime = options.leaderTime || DEFAULT_LEADER_TIME;\n        this._minZoomLevel = options.minZoomLevel || DEFAULT_MIN_ZOOM_LEVEL;\n        this._size = options.size || DEFAULT_SIZE;\n        this.setPositionReport(positionReport);\n        this.setShipStaticData(options.shipStaticData);\n    }\n\n    /**\n     * Sets the position report.\n     *\n     * @param positionReport - Position report.\n     * @returns this\n     */\n    public setPositionReport(positionReport: PositionReport): this {\n        this._positionReport = positionReport;\n        this.setLatLng([positionReport.latitude, positionReport.longitude]);\n        if (!isNullOrUndefined(positionReport.trueHeading) && (positionReport.trueHeading < MAX_HEADING_EXCLUSIVE)) {\n            this.setHeading(toRadians(positionReport.trueHeading));\n        } else {\n            this.setHeading(undefined);\n        }\n        if (!isNullOrUndefined(positionReport.cog) && (positionReport.cog < MAX_COG_EXCLUSIVE)) {\n            this.setCourse(toRadians(positionReport.cog));\n        } else {\n            this.setCourse(undefined);\n        }\n        if (!isNullOrUndefined(positionReport.sog) && (positionReport.sog < MAX_SOG_EXCLUSIVE)) {\n            this.setSpeed(positionReport.sog / KNOTS_PER_METER_PER_SECOND);\n        } else {\n            this.setSpeed(undefined);\n        }\n        this.bindPopup(this._getPopupContent(this._positionReport, this._shipStaticData));\n        return this.redraw();\n    }\n\n    /**\n     * Sets the ship static data.\n     *\n     * @param shipStaticData - Ship static data.\n     * @returns this\n     */\n    public setShipStaticData(shipStaticData?: ShipStaticData): this {\n        this._shipStaticData = shipStaticData;\n        const shipType = !isNullOrUndefined(shipStaticData) && !isNullOrUndefined(shipStaticData.type)\n            ? getShipType(shipStaticData.type) : TYPES[0];\n        this.setStyle({\n            color: shipType.color,\n            fill: true,\n            fillOpacity: 1.0,\n            fillColor: shipType.fillColor,\n        });\n        this.bindPopup(this._getPopupContent(this._positionReport, this._shipStaticData));\n        return this.setShapeOptions(AISTrackSymbol._getShapeOptions(this._leaderTime, this._minZoomLevel, this._size,\n            shipStaticData));\n    }\n\n    private static _getShapeOptions(leaderTime: number, minZoomLevel: number, size: number,\n                                    shipStaticData?: ShipStaticData): ShapeOptions {\n        const shapeOptions: ShapeOptions = {\n            leaderTime: leaderTime,\n            defaultShapeSet: TrackSymbol.createShapeSet(size),\n        };\n        const shapeSet = AISTrackSymbol._getShapeSet(size, shipStaticData);\n        if (shapeSet !== null) {\n            shapeOptions.shapeSetEntries = [{\n                shapeSet: shapeSet,\n                minZoomLevel: minZoomLevel,\n            }];\n        }\n        return shapeOptions;\n    }\n\n    private static _getShapeSet(size: number, shipStaticData?: ShipStaticData): ShapeSet | null {\n        if (isNullOrUndefined(shipStaticData) || isNullOrUndefined(shipStaticData.dimension)\n            || !isDimensionValid(shipStaticData.dimension)) {\n            return null;\n        }\n        return {\n            withHeading: {\n                points: AISTrackSymbol.DEFAULT_SILHOUETTE_SHAPE_POINTS,\n                center: [shipStaticData.dimension.B, shipStaticData.dimension.D],\n                length: shipStaticData.dimension.A + shipStaticData.dimension.B,\n                breadth: shipStaticData.dimension.C + shipStaticData.dimension.D,\n                units: \"meters\",\n            },\n            withoutHeading: TrackSymbol.createShape(TrackSymbol.DEFAULT_NOHEADING_SHAPE_POINTS, size),\n        };\n    }\n\n    private _getPopupContent(positionReport?: PositionReport, shipStaticData?: ShipStaticData): HTMLElement {\n        let content = \"<table>\";\n        if (!isNullOrUndefined(shipStaticData)) {\n            content += createTableRow(\"User ID\", shipStaticData.userId);\n            content += createTableRow(\"IMO Number\", shipStaticData.imoNumber);\n            content += createTableRow(\"Call sign\", shipStaticData.callSign);\n            content += createTableRow(\"Name\", shipStaticData.name);\n        }\n        if (!isNullOrUndefined(positionReport)) {\n            content += createTableRow(\"Location\", `${positionReport.latitude.toFixed(5)}, ${positionReport.longitude.toFixed(5)}`);\n            content += createTableRow(\"SOG\",\n                !isNullOrUndefined(positionReport.sog) && (positionReport.sog < MAX_SOG_EXCLUSIVE)\n                    ? positionReport.sog.toFixed(2) : undefined, \"knots\");\n            content += createTableRow(\"COG\",\n                !isNullOrUndefined(positionReport.cog) && (positionReport.cog < MAX_COG_EXCLUSIVE)\n                    ? positionReport.cog.toFixed(1) : undefined, \"°\");\n            content += createTableRow(\"Heading\",\n                !isNullOrUndefined(positionReport.trueHeading) && (positionReport.trueHeading < MAX_HEADING_EXCLUSIVE)\n                    ? positionReport.trueHeading.toFixed(1) : undefined, \"°\");\n            content += createTableRow(\"Navigation status\",\n                toNavigationStatusString(positionReport.navigationalStatus));\n        }\n        if (!isNullOrUndefined(shipStaticData)) {\n            content += createTableRow(\"Type\", toTypeString(shipStaticData.type));\n            if (!isNullOrUndefined(shipStaticData.dimension) && isDimensionValid(shipStaticData.dimension)) {\n                content += createTableRow(\"Ship length\",\n                    shipStaticData.dimension.A + shipStaticData.dimension.B, \"m\");\n                content += createTableRow(\"Ship width\",\n                    shipStaticData.dimension.C + shipStaticData.dimension.D, \"m\");\n            }\n            content += createTableRow(\"Fix type\", toFixTypeString(shipStaticData.fixType));\n            content += createTableRow(\"ETA\", toETAString(shipStaticData.eta));\n            content += createTableRow(\"Maximum static draught\",\n                !isNullOrUndefined(shipStaticData.maximumStaticDraught)\n                    ? shipStaticData.maximumStaticDraught.toFixed(1) : undefined, \"m\");\n            content += createTableRow(\"Destination\", shipStaticData.destination);\n            content += createTableRow(\"DTE\", shipStaticData.dte);\n        }\n        content += \"</table>\";\n        const popupContent = DomUtil.create(\"div\");\n        popupContent.innerHTML = content;\n        return popupContent;\n    }\n}\n\nfunction toTypeString(type: number): string | undefined {\n    if (isNullOrUndefined(type)) {\n        return undefined;\n    }\n    const shipType = getShipType(type);\n    return shipType.name;\n}\n\nfunction toFixTypeString(fixType: number): string | undefined {\n    if (isNullOrUndefined(fixType)) {\n        return undefined;\n    }\n    switch (fixType) {\n        case 0:\n            return undefined;\n        case 1:\n            return 'GPS';\n        case 2:\n            return 'GLONASS';\n        case 3:\n            return 'combined GPS/GLONASS';\n        case 4:\n            return 'Loran-C';\n        case 5:\n            return 'Chayka';\n        case 6:\n            return 'integrated navigation system';\n        case 7:\n            return 'surveyed';\n        case 8:\n            return 'Galileo';\n        case 9:\n        case 10:\n        case 11:\n        case 12:\n        case 13:\n        case 14:\n            return `not used (${fixType})`;\n        case 15:\n            return \"internal GNSS\";\n        default:\n            return `unknown (${fixType})`;\n    }\n}\n\nfunction toNavigationStatusString(navigationStatus: number): string | undefined {\n    if (isNullOrUndefined(navigationStatus)) {\n        return undefined;\n    }\n    switch (navigationStatus) {\n        case 0:\n            return 'Under way using engine';\n        case 1:\n            return 'At anchor';\n        case 2:\n            return 'Not under command';\n        case 3:\n            return 'Restricted manoeuverability';\n        case 4:\n            return 'Constrained by her draught';\n        case 5:\n            return 'Moored';\n        case 6:\n            return 'Aground';\n        case 7:\n            return 'Engaged in Fishing';\n        case 8:\n            return 'Under way sailing';\n        case 9:\n            return 'Reserved for future amendment of Navigational Status for HSC';\n        case 10:\n            return 'Reserved for future amendment of Navigational Status for WIG';\n        case 11:\n            return 'Reserved for future use';\n        case 12:\n            return 'Reserved for future use';\n        case 13:\n            return 'Reserved for future use';\n        case 14:\n            return 'AIS-SART is active';\n        case 15:\n            return 'Not defined (default)';\n        default:\n            return `unknown (${navigationStatus})`;\n    }\n}\n\nfunction toETAString(eta: ETA): string | undefined {\n    if (isNullOrUndefined(eta)) {\n        return undefined;\n    }\n    return `${eta.month.toString().padStart(2, '0')}/${eta.day.toString().padStart(2, '0')} ${eta.hour.toString().padStart(2, '0')}:${eta.minute.toString().padStart(2, '0')} UTC`;\n}\n\nfunction toRadians(degs: number | null | undefined): number | undefined {\n    if ((degs === null) || (degs === undefined)) {\n        return undefined;\n    }\n    return degs * Math.PI / 180;\n}\n\nfunction isNullOrUndefined(v): boolean {\n    return (v === null) || (v === undefined);\n}\n\nfunction isDimensionValid(dimension?: Dimension): boolean {\n    return !isNullOrUndefined(dimension)\n        && (dimension.A > 0) && (dimension.B > 0) && (dimension.C > 0) && (dimension.D > 0);\n}\n\nfunction createTableRow(name: string, value, unit?: string): string {\n    if (isNullOrUndefined(value)) {\n        return '';\n    }\n    const sValue = String(value);\n    return `<tr><td>${name}</td><td>${sValue} ${isNullOrUndefined(unit) ? \"\" : unit}</td></tr>`;\n}\n\nfunction newShipType(name: string, color: string, fillColor: string): ShipType {\n    return {\n        name: name,\n        color: color,\n        fillColor: fillColor,\n    };\n}\n\nfunction getShipType(type: number): ShipType {\n    if ((type < 0) || (type > 99)) {\n        return UNKNOWN_TYPE;\n    }\n    const shipType = TYPES[type];\n    if (!isNullOrUndefined(shipType)) {\n        return shipType;\n    }\n    return RESERVED_TYPE;\n}\n","import L from 'leaflet';\nimport type {LatLngExpression} from 'leaflet';\nimport {TrackSymbol} from './trackSymbol';\nimport type {ShapeSetEntry, ShapeOptions, TrackSymbolOptions} from './options';\nimport type {Points, Shape, ShapeSet, Units} from './types';\nimport {AISTrackSymbol} from './ais/aisTrackSymbol';\nimport type {AISTrackSymbolOptions} from './ais/options';\nimport type {AISMessage, Dimension, ETA, PositionReport, ShipStaticData} from './ais/types';\n\nexport {\n    Points,\n    Shape,\n    ShapeOptions,\n    ShapeSet,\n    ShapeSetEntry,\n    TrackSymbol,\n    TrackSymbolOptions,\n    Units,\n};\n\nexport {\n    AISMessage,\n    AISTrackSymbol,\n    AISTrackSymbolOptions,\n    Dimension,\n    ETA,\n    PositionReport,\n    ShipStaticData,\n};\n\nL['trackSymbol'] = function(latLng: LatLngExpression, options?: TrackSymbolOptions): TrackSymbol {\n    return new TrackSymbol(latLng, options);\n}\nL['TrackSymbol'] = TrackSymbol;\n\nL['aisTrackSymbol'] = function(positionReport: PositionReport, options?: AISTrackSymbolOptions): AISTrackSymbol {\n    return new AISTrackSymbol(positionReport, options);\n}\nL['AISTrackSymbol'] = AISTrackSymbol;\n\nexport default TrackSymbol;\n"],"names":["ORIENTATION","PIx2","INSIDE","OUTSIDE","BOUNDARY","CONTAINS","INTERLACE","OVERLAP_SAME","OVERLAP_OPPOSITE","NOT_VERTEX","START_VERTEX","END_VERTEX","Constants","DP_TOL","setTolerance","tolerance","getTolerance","DECIMALS","EQ_0","x","EQ","y","GT","GE","LT","LE","Utils","Errors","Flatten","c","value","LinkedList","first","last","edge","controlEdge","counter","start","end","elements","from","to","element","newElement","elementBefore","elementAfter","addToIntPoints","pt","int_points","id","shapes","len","is_vertex","arc_length","sortIntersections","intersections","getSortedArray","faceMap","ip","compareFn","ip1","ip2","getSortedArrayOnLine","line","int_point1","int_point2","filterDuplicatedIntersections","do_squeeze","int_point_ref1","int_point_ref2","int_point_cur1","int_point_cur2","i","j","int_point","index","initializeInclusionFlags","calculateInclusionFlags","polygon","setOverlappingFlags","cur_face","first_int_point_in_face_id","next_int_point1","num_int_points","cur_int_point1","int_points_cur_pool_start","int_points_cur_pool_num","intPointsPoolCount","next_int_point_id","int_points_next_pool_num","next_int_point1_tmp","edge_from1","edge_to1","cur_int_point2","next_int_point2","edge_from2","edge_to2","cur_int_point_num","int_point_current","int_point_next","int_points_pool_num","splitByIntersections","newEdge","insertBetweenIntPoints","new_edge","edge_before","edge_after","INSIDE$1","OUTSIDE$1","BOUNDARY$1","OVERLAP_SAME$1","OVERLAP_OPPOSITE$1","NOT_VERTEX$1","START_VERTEX$1","END_VERTEX$1","BOOLEAN_UNION","BOOLEAN_INTERSECT","BOOLEAN_SUBTRACT","unify","polygon1","polygon2","res_poly","wrk_poly","booleanOpBinary","subtract","polygon2_reversed","intersect","innerClip","clip_shapes1","face","clip_shapes2","outerClip","calculateIntersections","getIntersections","ip_sorted1","ip_sorted2","filterNotRelevantEdges","op","notIntersectedFacesRes","getNotIntersectedFaces","notIntersectedFacesWrk","calcInclusionForNotIntersectedFaces","fixBoundaryConflicts","removeNotRelevantChains","removeNotRelevantNotIntersectedFaces","swapLinksAndRestore","copyWrkToRes","swapLinks","removeOldFaces","restoreFaces","restore","edge1","resp","edge2","poly","notIntersected","notIntersectedFaces","poly2","poly1","int_points1","int_points1_sorted","int_points2","iterate_more","edge_tmp","new_bv","dist","segment","newEdge1","int_point2_edge_after","newEdge2","is_res_polygon","first_int_point_in_face_num","int_points_from_pull_start","int_points_from_pull_num","next_int_point_num","int_points_to_pull_start","int_points_to_pull_num","edge_from","edge_to","k","res_polygon","wrk_polygon","other_int_points","int_point_tmp","rel","BooleanOperations","EQUAL","INTERSECT","TOUCH","INSIDE$2","COVERED","DE9IM","geom","e","intersectLine2Line","line1","line2","A1","B1","C1","A2","B2","C2","det","detX","detY","intersectLine2Circle","circle","prj","delta","v_trans","intersectLine2Box","box","ips","seg","ips_tmp","intersectSegment2Line","ptInIntPoints","intersectLine2Arc","arc","ip_tmp","intersectSegment2Segment","seg1","seg2","new_ip","intersectSegment2Circle","shortest_segment","intersectSegment2Arc","intersectSegment2Box","intersectCircle2Circle","circle1","circle2","vec","r1","r2","a","mid_pt","h","intersectCircle2Box","intersectArc2Arc","arc1","arc2","intersectArc2Circle","intersectArc2Box","intersectEdge2Segment","intersectEdge2Arc","intersectEdge2Line","intersectEdge2Circle","intersectSegment2Polygon","intersectArc2Polygon","intersectLine2Polygon","intersectCircle2Polygon","intersectEdge2Edge","shape1","shape2","intersectEdge2Polygon","resp_edges","resp_edge","intersectPolygon2Polygon","intersectShape2Polygon","shape","new_pt","Multiline","args","acc","v","edgeBefore","edgeFound","angle","center","matrix","attrs","stroke","strokeWidth","fill","fillRule","fillOpacity","className","id_str","class_str","svgStr","multiline","ray_shoot","point","contains","ray","searchBox","i1","i2","intersection","prev_edge","prev_tangent","prev_point","cur_tangent","cur_point","prev_on_the_left","cur_on_the_left","next_edge","next_tangent","next_point","next_on_the_left","equal","relate","intersect$1","touch","disjoint","inside","covered","contain","cover","relateLine2Line","relateLine2Circle","relateLine2Box","relateLine2Polygon","relateShape2Polygon","relatePolygon2Polygon","denim","ip_sorted","splitShapes","boolean_intersection","boolean_difference1","boolean_difference2","inner_clip_shapes1","inner_clip_shapes2","outer_clip_shapes1","outer_clip_shapes2","Relations","Matrix$1","Matrix","b","d","tx","ty","vector","other_matrix","cos","sin","sx","sy","Interval","low","high","other_interval","interval1","interval2","val1","val2","RB_TREE_COLOR_RED","RB_TREE_COLOR_BLACK","Node","key","left","right","parent","color","other_node","value_less_than","value_equal","comparable_max","search_node","comparable_less_than","IntervalTree","count","res","node","insert_node","delete_node","interval","outputMapperFn","resp_nodes","visitor","callback","tree","node_current","current_node","parent_node","uncle_node","cut_node","fix_node","brother_node","found","node_min","node_max","node_successor","action","height","heightLeft","heightRight","PlanarSet","size","deleted","Point","arr","x_rot","y_rot","m","proj_vec","dx","dy","r","Vector","a1","a2","scalar","rpoint","norm1","norm2","n","Segment","coords","ps","pe","length","factor","rest","ymin","dy1","dy2","pts","vector$1","Line","norm","A","B","C","other_line","distance","sorted_points","pt1","pt2","Circle","pc","counterclockwise","Arc","startAngle","endAngle","counterClockwise","sweep","test_arc","func_arcs_array","angles","test_arcs","prev_arc","new_arc","scaleX","scaleY","newStart","newEnd","newCenter","newDirection","onLeftSide","areaTrapez","areaCircularSegment","slope1","slope2","largeArcFlag","sweepFlag","Box","xmin","xmax","ymax","other_box","box1","box2","width","Edge","bvMiddle","flag","sign","halfArc1","halfArc2","CircularLinkedList","done","Face","segments","points","flattenShapes","flattenShape","edges","sArea","area","exitOnFirst","Ray","slope","Polygon","argsArray","loop","el","loop1","valid","signedArea","unassignedEdgeFound","edgeFrom","edgeTo","cutPolygons","cut_edge_start","cut_edge_end","newCutPolygons","cutPoly1","cutPoly2","edgeBefore1","edgeBefore2","face1","face2","newPoly","int_point1_prev","int_point1_curr","polygons","orientation","newPolygons","islandPolygon","min_dist_and_segment","min_stop","newPolygon","Circle$1","Line$1","Point$1","Vector$1","Utils$1","Inversion","inversion_circle","k2","len2","s","inversion","Distance","closest_point","dist2center","shortest_dist","v_seg","v_ps2pt","v_pe2pt","start_sp","end_sp","v_unit","dist_and_segment","dist_tmp","shortest_segment_tmp","dist_from_start","shortest_segment_from_start","dist_from_end","shortest_segment_from_end","dist_from_center","shortest_segment_from_center","dist_from_projection","shortest_segment_from_projection","segment_tmp","mindist_x","mindist_y","mindist","maxdist","level","new_level_left","new_level_right","new_level","set","squared_min_stop","min_dist_and_segment_new","stop","d1","d2","DEFAULT_SIZE","DEFAULT_LEADER_TIME","_TrackSymbol","Path","latLng","options","Util","L","bounds","Bounds","LatLngBounds","viewPath","shapeOptions","oldLatLng","heading","course","speed","modelAngle","leaderLength","leaderEndLatLng","LatLng","latLngs","zoomLevel","shapeSetEntriesFiltered","shapeSetEntry","shapeSet","headingAngle","units","p","p1","close","result","TrackSymbol","DEFAULT_MIN_ZOOM_LEVEL","KNOTS_PER_METER_PER_SECOND","MAX_SOG_EXCLUSIVE","MAX_COG_EXCLUSIVE","MAX_HEADING_EXCLUSIVE","RESERVED_COLOR","RESERVED_FILL_COLOR","WIG_COLOR","WIG_FILL_COLOR","TYPE_3X_COLOR","TYPE_3X_FILL_COLOR","HSC_COLOR","HSC_FILL_COLOR","TYPE_5X_COLOR","TYPE_5X_FILL_COLOR","PASSENGER_COLOR","PASSENGER_FILL_COLOR","CARGO_COLOR","CARGO_FILL_COLOR","TANKER_COLOR","TANKER_FILL_COLOR","OTHER_COLOR","OTHER_FILL_COLOR","TYPES","newShipType","RESERVED_TYPE","UNKNOWN_TYPE","_AISTrackSymbol","positionReport","isNullOrUndefined","toRadians","shipStaticData","shipType","getShipType","leaderTime","minZoomLevel","isDimensionValid","content","createTableRow","toNavigationStatusString","toTypeString","toFixTypeString","toETAString","popupContent","DomUtil","AISTrackSymbol","type","fixType","navigationStatus","eta","degs","dimension","name","unit","sValue","fillColor"],"mappings":"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","x_google_ignoreList":[0]}