{"version":3,"file":"leaflet-tracksymbol2.es.js","sources":["../node_modules/.pnpm/@flatten-js+core@1.4.7/node_modules/@flatten-js/core/dist/main.mjs","../src/trackSymbol.ts","../src/ais/aisTrackSymbol.ts","../src/index.ts"],"sourcesContent":["/**\n * Global constant CCW defines counterclockwise direction of arc\n * @type {boolean}\n */\nconst CCW = true;\n\n/**\n * Global constant CW defines clockwise direction of arc\n * @type {boolean}\n */\nconst CW = false;\n\n/**\n * Defines orientation for face of the polygon: clockwise, counterclockwise\n * or not orientable in the case of self-intersection\n * @type {{CW: number, CCW: number, NOT_ORIENTABLE: number}}\n */\nconst ORIENTATION = {CCW:-1, CW:1, NOT_ORIENTABLE: 0};\n\nconst PIx2 = 2 * Math.PI;\n\nconst INSIDE$2 = 1;\nconst OUTSIDE$1 = 0;\nconst BOUNDARY$1 = 2;\nconst CONTAINS = 3;\nconst INTERLACE = 4;\n\nconst OVERLAP_SAME$1 = 1;\nconst OVERLAP_OPPOSITE$1 = 2;\n\nconst NOT_VERTEX$1 = 0;\nconst START_VERTEX$1 = 1;\nconst END_VERTEX$1 = 2;\n\nvar Constants = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    BOUNDARY: BOUNDARY$1,\n    CCW: CCW,\n    CONTAINS: CONTAINS,\n    CW: CW,\n    END_VERTEX: END_VERTEX$1,\n    INSIDE: INSIDE$2,\n    INTERLACE: INTERLACE,\n    NOT_VERTEX: NOT_VERTEX$1,\n    ORIENTATION: ORIENTATION,\n    OUTSIDE: OUTSIDE$1,\n    OVERLAP_OPPOSITE: OVERLAP_OPPOSITE$1,\n    OVERLAP_SAME: OVERLAP_SAME$1,\n    PIx2: PIx2,\n    START_VERTEX: START_VERTEX$1\n});\n\n/**\n * Created by Alex Bol on 2/18/2017.\n */\n\n/**\n * Floating point comparison tolerance.\n * Default value is 0.000001 (10e-6)\n * @type {number}\n */\nlet DP_TOL = 0.000001;\n\n/**\n * Set new floating point comparison tolerance\n * @param {number} tolerance\n */\nfunction setTolerance(tolerance) {DP_TOL = tolerance;}\n\n/**\n * Get floating point comparison tolerance\n * @returns {number}\n */\nfunction getTolerance() {return DP_TOL;}\n\nconst DECIMALS = 3;\n\n/**\n * Returns *true* if value comparable to zero\n * @param {number} x\n * @param {number} y\n * @return {boolean}\n */\nfunction EQ_0(x) {\n    return (x < DP_TOL && x > -DP_TOL);\n}\n\n/**\n * Returns *true* if two values are equal up to DP_TOL\n * @param {number} x\n * @param {number} y\n * @return {boolean}\n */\nfunction EQ(x, y) {\n    return (x - y < DP_TOL && x - y > -DP_TOL);\n}\n\n/**\n * Returns *true* if first argument greater than second argument up to DP_TOL\n * @param {number} x\n * @param {number} y\n * @return {boolean}\n */\nfunction GT(x, y) {\n    return (x - y > DP_TOL);\n}\n\n/**\n * Returns *true* if first argument greater than or equal to second argument up to DP_TOL\n * @param {number} x\n * @param {number} y\n * @returns {boolean}\n */\nfunction GE(x, y) {\n    return (x - y > -DP_TOL);\n}\n\n/**\n * Returns *true* if first argument less than second argument up to DP_TOL\n * @param {number} x\n * @param {number} y\n * @return {boolean}\n */\nfunction LT(x, y) {\n    return (x - y < -DP_TOL)\n}\n\n/**\n * Returns *true* if first argument less than or equal to second argument up to DP_TOL\n * @param {number} x\n * @param {number} y\n * @return {boolean}\n */\nfunction LE(x, y) {\n    return (x - y < DP_TOL);\n}\n\nvar Utils$1 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    DECIMALS: DECIMALS,\n    EQ: EQ,\n    EQ_0: EQ_0,\n    GE: GE,\n    GT: GT,\n    LE: LE,\n    LT: LT,\n    getTolerance: getTolerance,\n    setTolerance: setTolerance\n});\n\nlet Flatten = {\n    Utils: Utils$1,\n    Errors: undefined,\n    Matrix: undefined,\n    Planar_set: undefined,\n    Point: undefined,\n    Vector: undefined,\n    Line: undefined,\n    Circle: undefined,\n    Segment: undefined,\n    Arc: undefined,\n    Box: undefined,\n    Edge: undefined,\n    Face: undefined,\n    Ray: undefined,\n    Ray_shooting: undefined,\n    Multiline: undefined,\n    Polygon: undefined,\n    Distance: undefined,\n    Inversion: undefined\n};\n\nfor (let c in Constants) {Flatten[c] = Constants[c];}\n\nObject.defineProperty(Flatten, 'DP_TOL', {\n    get:function(){return getTolerance()}, \n    set:function(value){setTolerance(value);}\n});\n\n/**\n * Created by Alex Bol on 2/19/2017.\n */\n\n\n/**\n * Class of system errors\n */\nclass Errors {\n    /**\n     * Throw error ILLEGAL_PARAMETERS when cannot instantiate from given parameter\n     * @returns {ReferenceError}\n     */\n    static get ILLEGAL_PARAMETERS() {\n        return new ReferenceError('Illegal Parameters');\n    }\n\n    /**\n     * Throw error ZERO_DIVISION to catch situation of zero division\n     * @returns {Error}\n     */\n    static get ZERO_DIVISION() {\n        return new Error('Zero division');\n    }\n\n    /**\n     * Error to throw from BooleanOperations module in case when fixBoundaryConflicts not capable to fix it\n     * @returns {Error}\n     */\n    static get UNRESOLVED_BOUNDARY_CONFLICT() {\n        return new Error('Unresolved boundary conflict in boolean operation');\n    }\n\n    /**\n     * Error to throw from LinkedList:testInfiniteLoop static method\n     * in case when circular loop detected in linked list\n     * @returns {Error}\n     */\n    static get INFINITE_LOOP() {\n        return new Error('Infinite loop');\n    }\n\n    static get CANNOT_COMPLETE_BOOLEAN_OPERATION() {\n        return new Error('Cannot complete boolean operation')\n    }\n\n    static get CANNOT_INVOKE_ABSTRACT_METHOD() {\n        return new Error('Abstract method cannot be invoked');\n    }\n\n    static get OPERATION_IS_NOT_SUPPORTED() {\n        return new Error('Operation is not supported')\n    }\n}\n\nFlatten.Errors = Errors;\n\n/**\n * Class implements bidirectional non-circular linked list. <br/>\n * LinkedListElement - object of any type that has properties next and prev.\n */\nclass LinkedList {\n    constructor(first, last) {\n        this.first = first;\n        this.last = last || this.first;\n    }\n\n    [Symbol.iterator]() {\n        let value = undefined;\n        return {\n            next: () => {\n                value = value ? value.next : this.first;\n                return {value: value, done: value === undefined};\n            }\n        };\n    };\n\n    /**\n     * Return number of elements in the list\n     * @returns {number}\n     */\n    get size() {\n        let counter = 0;\n        for (let edge of this) {\n            counter++;\n        }\n        return counter;\n    }\n\n    /**\n     * Return array of elements from start to end,\n     * If start or end not defined, take first as start, last as end\n     * @returns {Array}\n     */\n    toArray(start=undefined, end=undefined) {\n        let elements = [];\n        let from = start || this.first;\n        let to = end || this.last;\n        let element = from;\n        if (element === undefined) return elements;\n        do {\n            elements.push(element);\n            element = element.next;\n        } while (element !== to.next);\n        return elements;\n    }\n\n\n    /**\n     * Append new element to the end of the list\n     * @param {LinkedListElement} element\n     * @returns {LinkedList}\n     */\n    append(element) {\n        if (this.isEmpty()) {\n            this.first = element;\n        } else {\n            element.prev = this.last;\n            this.last.next = element;\n        }\n\n        // update edge to be last\n        this.last = element;\n\n        // nullify non-circular links\n        this.last.next = undefined;\n        this.first.prev = undefined;\n        return this;\n    }\n\n    /**\n     * Insert new element to the list after elementBefore\n     * @param {LinkedListElement} newElement\n     * @param {LinkedListElement} elementBefore\n     * @returns {LinkedList}\n     */\n    insert(newElement, elementBefore) {\n        if (this.isEmpty()) {\n            this.first = newElement;\n            this.last = newElement;\n        }\n        else if (elementBefore === null || elementBefore === undefined) {\n            newElement.next = this.first;\n            this.first.prev = newElement;\n            this.first = newElement;\n        }\n        else {\n            /* set links to new element */\n            let elementAfter = elementBefore.next;\n            elementBefore.next = newElement;\n            if (elementAfter) elementAfter.prev = newElement;\n\n            /* set links from new element */\n            newElement.prev = elementBefore;\n            newElement.next = elementAfter;\n\n            /* extend list if new element added after the last element */\n            if (this.last === elementBefore)\n                this.last = newElement;\n        }\n        // nullify non-circular links\n        this.last.next = undefined;\n        this.first.prev = undefined;\n        return this;\n    }\n\n    /**\n     * Remove element from the list\n     * @param {LinkedListElement} element\n     * @returns {LinkedList}\n     */\n    remove(element) {\n        // special case if last edge removed\n        if (element === this.first && element === this.last) {\n            this.first = undefined;\n            this.last = undefined;\n        } else {\n            // update linked list\n            if (element.prev) element.prev.next = element.next;\n            if (element.next) element.next.prev = element.prev;\n            // update first if need\n            if (element === this.first) {\n                this.first = element.next;\n            }\n            // update last if need\n            if (element === this.last) {\n                this.last = element.prev;\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Return true if list is empty\n     * @returns {boolean}\n     */\n    isEmpty() {\n        return this.first === undefined;\n    }\n\n    /**\n     * Throw an error if circular loop detected in the linked list\n     * @param {LinkedListElement} first element to start iteration\n     * @throws {Errors.INFINITE_LOOP}\n     */\n    static testInfiniteLoop(first) {\n        let edge = first;\n        let controlEdge = first;\n        do {\n            if (edge != first && edge === controlEdge) {\n                throw Errors.INFINITE_LOOP;  // new Error(\"Infinite loop\")\n            }\n            edge = edge.next;\n            controlEdge = controlEdge.next.next;\n        } while (edge != first)\n    }\n}\n\n/*\n    Smart intersections describe intersection points that refers to the edges they intersect\n    This function are supposed for internal usage by morphing and relation methods between\n */\n\nfunction addToIntPoints(edge, pt, int_points)\n{\n    let id = int_points.length;\n    let shapes = edge.shape.split(pt);\n\n    // if (shapes.length < 2) return;\n    if (shapes.length === 0) return;     // Point does not belong to edge ?\n\n    let len = 0;\n    if (shapes[0] === null) {   // point incident to edge start vertex\n        len = 0;\n    }\n    else if (shapes[1] === null) {   // point incident to edge end vertex\n        len = edge.shape.length;\n    }\n    else {                             // Edge was split into to edges\n        len = shapes[0].length;\n    }\n\n    let is_vertex = NOT_VERTEX$1;\n    if (EQ(len, 0)) {\n        is_vertex |= START_VERTEX$1;\n    }\n    if (EQ(len, edge.shape.length)) {\n        is_vertex |= END_VERTEX$1;\n    }\n    // Fix intersection point which is end point of the last edge\n    let arc_length = (is_vertex & END_VERTEX$1) && edge.next.arc_length === 0 ? 0 : edge.arc_length + len;\n\n    int_points.push({\n        id: id,\n        pt: pt,\n        arc_length: arc_length,\n        edge_before: edge,\n        edge_after: undefined,\n        face: edge.face,\n        is_vertex: is_vertex\n    });\n}\n\nfunction sortIntersections(intersections)\n{\n    // if (intersections.int_points1.length === 0) return;\n\n    // augment intersections with new sorted arrays\n    // intersections.int_points1_sorted = intersections.int_points1.slice().sort(compareFn);\n    // intersections.int_points2_sorted = intersections.int_points2.slice().sort(compareFn);\n    intersections.int_points1_sorted = getSortedArray(intersections.int_points1);\n    intersections.int_points2_sorted = getSortedArray(intersections.int_points2);\n}\n\nfunction getSortedArray(int_points)\n{\n    let faceMap = new Map;\n    let id = 0;\n    // Create integer id's for faces\n    for (let ip of int_points) {\n        if (!faceMap.has(ip.face)) {\n            faceMap.set(ip.face, id);\n            id++;\n        }\n    }\n    // Augment intersection points with face id's\n    for (let ip of int_points) {\n        ip.faceId = faceMap.get(ip.face);\n    }\n    // Clone and sort\n    let int_points_sorted = int_points.slice().sort(compareFn);\n    return int_points_sorted;\n}\n\nfunction compareFn(ip1, ip2)\n{\n    // compare face id's\n    if (ip1.faceId < ip2.faceId) {\n        return -1;\n    }\n    if (ip1.faceId > ip2.faceId) {\n        return 1;\n    }\n    // same face - compare arc_length\n    if (ip1.arc_length < ip2.arc_length) {\n        return -1;\n    }\n    if (ip1.arc_length > ip2.arc_length) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction getSortedArrayOnLine(line, int_points) {\n    return int_points.slice().sort( (int_point1, int_point2) => {\n        if (line.coord(int_point1.pt) < line.coord(int_point2.pt)) {\n            return -1;\n        }\n        if (line.coord(int_point1.pt) > line.coord(int_point2.pt)) {\n            return 1;\n        }\n        return 0;\n    })\n}\n\nfunction filterDuplicatedIntersections(intersections)\n{\n    if (intersections.int_points1.length < 2) return;\n\n    let do_squeeze = false;\n\n    let int_point_ref1;\n    let int_point_ref2;\n    let int_point_cur1;\n    let int_point_cur2;\n    for (let i = 0; i < intersections.int_points1_sorted.length; i++) {\n\n        if (intersections.int_points1_sorted[i].id === -1)\n            continue;\n\n        int_point_ref1 = intersections.int_points1_sorted[i];\n        int_point_ref2 = intersections.int_points2[int_point_ref1.id];\n\n        for (let j=i+1; j < intersections.int_points1_sorted.length; j++) {\n            int_point_cur1 = intersections.int_points1_sorted[j];\n            if (!EQ(int_point_cur1.arc_length, int_point_ref1.arc_length)) {\n                break;\n            }\n            if (int_point_cur1.id === -1)\n                continue;\n            int_point_cur2 = intersections.int_points2[int_point_cur1.id];\n            if (int_point_cur2.id === -1)\n                continue;\n            if (int_point_cur1.edge_before === int_point_ref1.edge_before &&\n                int_point_cur1.edge_after === int_point_ref1.edge_after &&\n                int_point_cur2.edge_before === int_point_ref2.edge_before &&\n                int_point_cur2.edge_after === int_point_ref2.edge_after) {\n                int_point_cur1.id = -1;\n                /* to be deleted */\n                int_point_cur2.id = -1;\n                /* to be deleted */\n                do_squeeze = true;\n            }\n        }\n    }\n\n    int_point_ref2 = intersections.int_points2_sorted[0];\n    int_point_ref1 = intersections.int_points1[int_point_ref2.id];\n    for (let i = 1; i < intersections.int_points2_sorted.length; i++) {\n        let int_point_cur2 = intersections.int_points2_sorted[i];\n\n        if (int_point_cur2.id == -1) continue;\n        /* already deleted */\n\n        if (int_point_ref2.id == -1 || /* can't be reference if already deleted */\n            !(EQ(int_point_cur2.arc_length, int_point_ref2.arc_length))) {\n            int_point_ref2 = int_point_cur2;\n            int_point_ref1 = intersections.int_points1[int_point_ref2.id];\n            continue;\n        }\n\n        let int_point_cur1 = intersections.int_points1[int_point_cur2.id];\n        if (int_point_cur1.edge_before === int_point_ref1.edge_before &&\n            int_point_cur1.edge_after === int_point_ref1.edge_after &&\n            int_point_cur2.edge_before === int_point_ref2.edge_before &&\n            int_point_cur2.edge_after === int_point_ref2.edge_after) {\n            int_point_cur1.id = -1;\n            /* to be deleted */\n            int_point_cur2.id = -1;\n            /* to be deleted */\n            do_squeeze = true;\n        }\n    }\n\n    if (do_squeeze) {\n        intersections.int_points1 = intersections.int_points1.filter((int_point) => int_point.id >= 0);\n        intersections.int_points2 = intersections.int_points2.filter((int_point) => int_point.id >= 0);\n\n        // update id's\n        intersections.int_points1.forEach((int_point, index) => int_point.id = index);\n        intersections.int_points2.forEach((int_point, index) => int_point.id = index);\n    }\n}\n\nfunction initializeInclusionFlags(int_points)\n{\n    for (let int_point of int_points) {\n        int_point.edge_before.bvStart = undefined;\n        int_point.edge_before.bvEnd = undefined;\n        int_point.edge_before.bv = undefined;\n        int_point.edge_before.overlap = undefined;\n\n        int_point.edge_after.bvStart = undefined;\n        int_point.edge_after.bvEnd = undefined;\n        int_point.edge_after.bv = undefined;\n        int_point.edge_after.overlap = undefined;\n    }\n\n    for (let int_point of int_points) {\n        int_point.edge_before.bvEnd = BOUNDARY$1;\n        int_point.edge_after.bvStart = BOUNDARY$1;\n    }\n}\n\nfunction calculateInclusionFlags(int_points, polygon)\n{\n    for (let int_point of int_points) {\n        int_point.edge_before.setInclusion(polygon);\n        int_point.edge_after.setInclusion(polygon);\n    }\n}\n\nfunction setOverlappingFlags(intersections)\n{\n    let cur_face = undefined;\n    let first_int_point_in_face_id = undefined;\n    let next_int_point1 = undefined;\n    let num_int_points = intersections.int_points1.length;\n\n    for (let i = 0; i < num_int_points; i++) {\n        let cur_int_point1 = intersections.int_points1_sorted[i];\n\n        // Find boundary chain in the polygon1\n        if (cur_int_point1.face !== cur_face) {                               // next chain started\n            first_int_point_in_face_id = i; // cur_int_point1;\n            cur_face = cur_int_point1.face;\n        }\n\n        // Skip duplicated points with same <x,y> in \"cur_int_point1\" pool\n        let int_points_cur_pool_start = i;\n        let int_points_cur_pool_num = intPointsPoolCount(intersections.int_points1_sorted, i, cur_face);\n        let next_int_point_id;\n        if (int_points_cur_pool_start + int_points_cur_pool_num < num_int_points &&\n            intersections.int_points1_sorted[int_points_cur_pool_start + int_points_cur_pool_num].face === cur_face) {\n            next_int_point_id = int_points_cur_pool_start + int_points_cur_pool_num;\n        } else {                                         // get first point from the same face\n            next_int_point_id = first_int_point_in_face_id;\n        }\n\n        // From all points with same ,x,y. in 'next_int_point1' pool choose one that\n        // has same face both in res_poly and in wrk_poly\n        let int_points_next_pool_num = intPointsPoolCount(intersections.int_points1_sorted, next_int_point_id, cur_face);\n        next_int_point1 = null;\n        for (let j=next_int_point_id; j < next_int_point_id + int_points_next_pool_num; j++) {\n            let next_int_point1_tmp = intersections.int_points1_sorted[j];\n            if (next_int_point1_tmp.face === cur_face &&\n                intersections.int_points2[next_int_point1_tmp.id].face === intersections.int_points2[cur_int_point1.id].face) {\n                next_int_point1 = next_int_point1_tmp;\n                break;\n            }\n        }\n        if (next_int_point1 === null)\n            continue;\n\n        let edge_from1 = cur_int_point1.edge_after;\n        let edge_to1 = next_int_point1.edge_before;\n\n        if (!(edge_from1.bv === BOUNDARY$1 && edge_to1.bv === BOUNDARY$1))      // not a boundary chain - skip\n            continue;\n\n        if (edge_from1 !== edge_to1)                    //  one edge chain    TODO: support complex case\n            continue;\n\n        /* Find boundary chain in polygon2 between same intersection points */\n        let cur_int_point2 = intersections.int_points2[cur_int_point1.id];\n        let next_int_point2 = intersections.int_points2[next_int_point1.id];\n\n        let edge_from2 = cur_int_point2.edge_after;\n        let edge_to2 = next_int_point2.edge_before;\n\n        /* if [edge_from2..edge_to2] is not a boundary chain, invert it */\n        /* check also that chain consist of one or two edges */\n        if (!(edge_from2.bv === BOUNDARY$1 && edge_to2.bv === BOUNDARY$1 && edge_from2 === edge_to2)) {\n            cur_int_point2 = intersections.int_points2[next_int_point1.id];\n            next_int_point2 = intersections.int_points2[cur_int_point1.id];\n\n            edge_from2 = cur_int_point2.edge_after;\n            edge_to2 = next_int_point2.edge_before;\n        }\n\n        if (!(edge_from2.bv === BOUNDARY$1 && edge_to2.bv === BOUNDARY$1 && edge_from2 === edge_to2))\n            continue;                           // not an overlapping chain - skip   TODO: fix boundary conflict\n\n        // Set overlapping flag - one-to-one case\n        edge_from1.setOverlap(edge_from2);\n    }\n}\n\nfunction intPointsPoolCount(int_points, cur_int_point_num, cur_face)\n{\n    let int_point_current;\n    let int_point_next;\n\n    let int_points_pool_num = 1;\n\n    if (int_points.length == 1) return 1;\n\n    int_point_current = int_points[cur_int_point_num];\n\n    for (let i = cur_int_point_num + 1; i < int_points.length; i++) {\n        if (int_point_current.face != cur_face) {      /* next face started */\n            break;\n        }\n\n        int_point_next = int_points[i];\n\n        if (!(int_point_next.pt.equalTo(int_point_current.pt) &&\n            int_point_next.edge_before === int_point_current.edge_before &&\n            int_point_next.edge_after === int_point_current.edge_after)) {\n            break;         /* next point is different - break and exit */\n        }\n\n        int_points_pool_num++;     /* duplicated intersection point - increase counter */\n    }\n    return int_points_pool_num;\n}\n\nfunction splitByIntersections(polygon, int_points)\n{\n    if (!int_points) return;\n    for (let int_point of int_points) {\n        let edge = int_point.edge_before;\n\n        // recalculate vertex flag: it may be changed after previous split\n        int_point.is_vertex = NOT_VERTEX$1;\n        if (edge.shape.start && edge.shape.start.equalTo(int_point.pt)) {\n            int_point.is_vertex |= START_VERTEX$1;\n        }\n        if (edge.shape.end && edge.shape.end.equalTo(int_point.pt)) {\n            int_point.is_vertex |= END_VERTEX$1;\n        }\n\n        if (int_point.is_vertex & START_VERTEX$1) {  // nothing to split\n            int_point.edge_before = edge.prev;\n            int_point.is_vertex = END_VERTEX$1;\n            continue;\n        }\n        if (int_point.is_vertex & END_VERTEX$1) {    // nothing to split\n            continue;\n        }\n\n        let newEdge = polygon.addVertex(int_point.pt, edge);\n        int_point.edge_before = newEdge;\n    }\n\n    for (let int_point of int_points) {\n        int_point.edge_after = int_point.edge_before.next;\n    }\n}\n\nfunction insertBetweenIntPoints(int_point1, int_point2, new_edge) {\n    let edge_before = int_point1.edge_before;\n    let edge_after = int_point2.edge_after;\n\n    edge_before.next = new_edge;\n    new_edge.prev = edge_before;\n\n    new_edge.next = edge_after;\n    edge_after.prev = new_edge;\n}\n\nvar smart_intersections = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    addToIntPoints: addToIntPoints,\n    calculateInclusionFlags: calculateInclusionFlags,\n    filterDuplicatedIntersections: filterDuplicatedIntersections,\n    getSortedArray: getSortedArray,\n    getSortedArrayOnLine: getSortedArrayOnLine,\n    initializeInclusionFlags: initializeInclusionFlags,\n    insertBetweenIntPoints: insertBetweenIntPoints,\n    intPointsPoolCount: intPointsPoolCount,\n    setOverlappingFlags: setOverlappingFlags,\n    sortIntersections: sortIntersections,\n    splitByIntersections: splitByIntersections\n});\n\n/**\n * Created by Alex Bol on 12/02/2018.\n */\n/**\n * @module BooleanOperations\n */\n\nconst {INSIDE: INSIDE$1, OUTSIDE, BOUNDARY, OVERLAP_SAME, OVERLAP_OPPOSITE} = Constants;\nconst {NOT_VERTEX, START_VERTEX, END_VERTEX} = Constants;\n\nconst BOOLEAN_UNION = 1;\nconst BOOLEAN_INTERSECT = 2;\nconst BOOLEAN_SUBTRACT = 3;\n\n\n/**\n * Unify two polygons polygons and returns new polygon. <br/>\n * Point belongs to the resulted polygon if it belongs to the first OR to the second polygon\n * @param {Polygon} polygon1 - first operand\n * @param {Polygon} polygon2 - second operand\n * @returns {Polygon}\n */\nfunction unify(polygon1, polygon2) {\n    let [res_poly, wrk_poly] = booleanOpBinary(polygon1, polygon2, BOOLEAN_UNION, true);\n    return res_poly;\n}\n\n/**\n * Subtract second polygon from the first and returns new polygon\n * Point belongs to the resulted polygon if it belongs to the first polygon AND NOT to the second polygon\n * @param {Polygon} polygon1 - first operand\n * @param {Polygon} polygon2 - second operand\n * @returns {Polygon}\n */\nfunction subtract(polygon1, polygon2) {\n    let polygon2_tmp = polygon2.clone();\n    let polygon2_reversed = polygon2_tmp.reverse();\n    let [res_poly, wrk_poly] = booleanOpBinary(polygon1, polygon2_reversed, BOOLEAN_SUBTRACT, true);\n    return res_poly;\n}\n\n/**\n * Intersect two polygons and returns new polygon\n * Point belongs to the resulted polygon is it belongs to the first AND to the second polygon\n * @param {Polygon} polygon1 - first operand\n * @param {Polygon} polygon2 - second operand\n * @returns {Polygon}\n */\nfunction intersect$1(polygon1, polygon2) {\n    let [res_poly, wrk_poly] = booleanOpBinary(polygon1, polygon2, BOOLEAN_INTERSECT, true);\n    return res_poly;\n}\n\n/**\n * Returns boundary of intersection between two polygons as two arrays of shapes (Segments/Arcs) <br/>\n * The first array are shapes from the first polygon, the second array are shapes from the second\n * @param {Polygon} polygon1 - first operand\n * @param {Polygon} polygon2 - second operand\n * @returns {Shape[][]}\n */\nfunction innerClip(polygon1, polygon2) {\n    let [res_poly, wrk_poly] = booleanOpBinary(polygon1, polygon2, BOOLEAN_INTERSECT, false);\n\n    let clip_shapes1 = [];\n    for (let face of res_poly.faces) {\n        clip_shapes1 = [...clip_shapes1, ...[...face.edges].map(edge => edge.shape)];\n    }\n    let clip_shapes2 = [];\n    for (let face of wrk_poly.faces) {\n        clip_shapes2 = [...clip_shapes2, ...[...face.edges].map(edge => edge.shape)];\n    }\n    return [clip_shapes1, clip_shapes2];\n}\n\n/**\n * Returns boundary of subtraction of the second polygon from first polygon as array of shapes\n * @param {Polygon} polygon1 - first operand\n * @param {Polygon} polygon2 - second operand\n * @returns {Shape[]}\n */\nfunction outerClip(polygon1, polygon2) {\n    let [res_poly, wrk_poly] = booleanOpBinary(polygon1, polygon2, BOOLEAN_SUBTRACT, false);\n\n    let clip_shapes1 = [];\n    for (let face of res_poly.faces) {\n        clip_shapes1 = [...clip_shapes1, ...[...face.edges].map(edge => edge.shape)];\n    }\n\n    return clip_shapes1;\n}\n\n/**\n * Returns intersection points between boundaries of two polygons as two array of points <br/>\n * Points in the first array belong to first polygon, points from the second - to the second.\n * Points in each array are ordered according to the direction of the correspondent polygon\n * @param {Polygon} polygon1 - first operand\n * @param {Polygon} polygon2 - second operand\n * @returns {Point[][]}\n */\nfunction calculateIntersections(polygon1, polygon2) {\n    let res_poly = polygon1.clone();\n    let wrk_poly = polygon2.clone();\n\n    // get intersection points\n    let intersections = getIntersections(res_poly, wrk_poly);\n\n    // sort intersection points\n    sortIntersections(intersections);\n\n    // split by intersection points\n    splitByIntersections(res_poly, intersections.int_points1_sorted);\n    splitByIntersections(wrk_poly, intersections.int_points2_sorted);\n\n    // filter duplicated intersection points\n    filterDuplicatedIntersections(intersections);\n\n    // sort intersection points again after filtering\n    sortIntersections(intersections);\n\n    let ip_sorted1 = intersections.int_points1_sorted.map( int_point => int_point.pt);\n    let ip_sorted2 = intersections.int_points2_sorted.map( int_point => int_point.pt);\n    return [ip_sorted1, ip_sorted2];\n}\n\nfunction filterNotRelevantEdges(res_poly, wrk_poly, intersections, op) {\n    // keep not intersected faces for further remove and merge\n    let notIntersectedFacesRes = getNotIntersectedFaces(res_poly, intersections.int_points1);\n    let notIntersectedFacesWrk = getNotIntersectedFaces(wrk_poly, intersections.int_points2);\n\n    // calculate inclusion flag for not intersected faces\n    calcInclusionForNotIntersectedFaces(notIntersectedFacesRes, wrk_poly);\n    calcInclusionForNotIntersectedFaces(notIntersectedFacesWrk, res_poly);\n\n    // initialize inclusion flags for edges incident to intersections\n    initializeInclusionFlags(intersections.int_points1);\n    initializeInclusionFlags(intersections.int_points2);\n\n    // calculate inclusion flags only for edges incident to intersections\n    calculateInclusionFlags(intersections.int_points1, wrk_poly);\n    calculateInclusionFlags(intersections.int_points2, res_poly);\n\n    // fix boundary conflicts\n    while (fixBoundaryConflicts(res_poly, wrk_poly, intersections.int_points1, intersections.int_points1_sorted, intersections.int_points2, intersections));\n    // while (fixBoundaryConflicts(wrk_poly, res_poly, intersections.int_points2, intersections.int_points2_sorted, intersections.int_points1, intersections));\n\n    // Set overlapping flags for boundary chains: SAME or OPPOSITE\n    setOverlappingFlags(intersections);\n\n    // remove not relevant chains between intersection points\n    removeNotRelevantChains(res_poly, op, intersections.int_points1_sorted, true);\n    removeNotRelevantChains(wrk_poly, op, intersections.int_points2_sorted, false);\n\n    // remove not relevant not intersected faces from res_polygon and wrk_polygon\n    // if op == UNION, remove faces that are included in wrk_polygon without intersection\n    // if op == INTERSECT, remove faces that are not included into wrk_polygon\n    removeNotRelevantNotIntersectedFaces(res_poly, notIntersectedFacesRes, op, true);\n    removeNotRelevantNotIntersectedFaces(wrk_poly, notIntersectedFacesWrk, op, false);\n}\n\nfunction swapLinksAndRestore(res_poly, wrk_poly, intersections, op) {\n\n    // add edges of wrk_poly into the edge container of res_poly\n    copyWrkToRes(res_poly, wrk_poly, op, intersections.int_points2);\n\n    // swap links from res_poly to wrk_poly and vice versa\n    swapLinks(res_poly, wrk_poly, intersections);\n\n    // remove old faces\n    removeOldFaces(res_poly, intersections.int_points1);\n    removeOldFaces(wrk_poly, intersections.int_points2);\n\n    // restore faces\n    restoreFaces(res_poly, intersections.int_points1, intersections.int_points2);\n    restoreFaces(res_poly, intersections.int_points2, intersections.int_points1);\n\n    // merge relevant not intersected faces from wrk_polygon to res_polygon\n    // mergeRelevantNotIntersectedFaces(res_poly, wrk_poly);\n}\n\n\nfunction booleanOpBinary(polygon1, polygon2, op, restore)\n{\n    let res_poly = polygon1.clone();\n    let wrk_poly = polygon2.clone();\n\n    // get intersection points\n    let intersections = getIntersections(res_poly, wrk_poly);\n\n    // sort intersection points\n    sortIntersections(intersections);\n\n    // split by intersection points\n    splitByIntersections(res_poly, intersections.int_points1_sorted);\n    splitByIntersections(wrk_poly, intersections.int_points2_sorted);\n\n    // filter duplicated intersection points\n    filterDuplicatedIntersections(intersections);\n\n    // sort intersection points again after filtering\n    sortIntersections(intersections);\n\n    // calculate inclusion and remove not relevant edges\n    filterNotRelevantEdges(res_poly, wrk_poly, intersections, op);\n\n    if (restore) {\n        swapLinksAndRestore(res_poly, wrk_poly, intersections, op);\n    }\n\n    return [res_poly, wrk_poly];\n}\n\nfunction getIntersections(polygon1, polygon2)\n{\n    let intersections = {\n        int_points1: [],\n        int_points2: []\n    };\n\n    // calculate intersections\n    for (let edge1 of polygon1.edges) {\n\n        // request edges of polygon2 in the box of edge1\n        let resp = polygon2.edges.search(edge1.box);\n\n        // for each edge2 in response\n        for (let edge2 of resp) {\n\n            // calculate intersections between edge1 and edge2\n            let ip = edge1.shape.intersect(edge2.shape);\n\n            // for each intersection point\n            for (let pt of ip) {\n                addToIntPoints(edge1, pt, intersections.int_points1);\n                addToIntPoints(edge2, pt, intersections.int_points2);\n            }\n        }\n    }\n    return intersections;\n}\n\nfunction getNotIntersectedFaces(poly, int_points)\n{\n    let notIntersected = [];\n    for (let face of poly.faces) {\n        if (!int_points.find((ip) => ip.face === face)) {\n            notIntersected.push(face);\n        }\n    }\n    return notIntersected;\n}\n\nfunction calcInclusionForNotIntersectedFaces(notIntersectedFaces, poly2)\n{\n    for (let face of notIntersectedFaces) {\n        face.first.bv = face.first.bvStart = face.first.bvEnd = undefined;\n        face.first.setInclusion(poly2);\n    }\n}\n\nfunction fixBoundaryConflicts(poly1, poly2, int_points1, int_points1_sorted, int_points2, intersections )\n{\n    let cur_face;\n    let first_int_point_in_face_id;\n    let next_int_point1;\n    let num_int_points = int_points1_sorted.length;\n    let iterate_more = false;\n\n    for (let i = 0; i < num_int_points; i++) {\n        let cur_int_point1 = int_points1_sorted[i];\n\n        // Find boundary chain in the polygon1\n        if (cur_int_point1.face !== cur_face) {                               // next chain started\n            first_int_point_in_face_id = i; // cur_int_point1;\n            cur_face = cur_int_point1.face;\n        }\n\n        // Skip duplicated points with same <x,y> in \"cur_int_point1\" pool\n        let int_points_cur_pool_start = i;\n        let int_points_cur_pool_num = intPointsPoolCount(int_points1_sorted, i, cur_face);\n        let next_int_point_id;\n        if (int_points_cur_pool_start + int_points_cur_pool_num < num_int_points &&\n            int_points1_sorted[int_points_cur_pool_start + int_points_cur_pool_num].face === cur_face) {\n            next_int_point_id = int_points_cur_pool_start + int_points_cur_pool_num;\n        } else {                                         // get first point from the same face\n            next_int_point_id = first_int_point_in_face_id;\n        }\n\n        // From all points with same ,x,y. in 'next_int_point1' pool choose one that\n        // has same face both in res_poly and in wrk_poly\n        let int_points_next_pool_num = intPointsPoolCount(int_points1_sorted, next_int_point_id, cur_face);\n        next_int_point1 = null;\n        for (let j=next_int_point_id; j < next_int_point_id + int_points_next_pool_num; j++) {\n            let next_int_point1_tmp = int_points1_sorted[j];\n            if (next_int_point1_tmp.face === cur_face &&\n                int_points2[next_int_point1_tmp.id].face === int_points2[cur_int_point1.id].face) {\n                next_int_point1 = next_int_point1_tmp;\n                break;\n            }\n        }\n        if (next_int_point1 === null)\n            continue;\n\n        let edge_from1 = cur_int_point1.edge_after;\n        let edge_to1 = next_int_point1.edge_before;\n\n        // Case #1. One of the ends is not boundary - probably tiny edge wrongly marked as boundary\n        if (edge_from1.bv === BOUNDARY && edge_to1.bv != BOUNDARY) {\n            edge_from1.bv = edge_to1.bv;\n            continue;\n        }\n\n        if (edge_from1.bv != BOUNDARY && edge_to1.bv === BOUNDARY) {\n            edge_to1.bv = edge_from1.bv;\n            continue;\n        }\n\n        // Set up all boundary values for middle edges. Need for cases 2 and 3\n        if ( (edge_from1.bv === BOUNDARY && edge_to1.bv === BOUNDARY && edge_from1 != edge_to1) ||\n        (edge_from1.bv === INSIDE$1 && edge_to1.bv === OUTSIDE  || edge_from1.bv === OUTSIDE && edge_to1.bv === INSIDE$1 ) ) {\n            let edge_tmp = edge_from1.next;\n            while (edge_tmp != edge_to1) {\n                edge_tmp.bvStart = undefined;\n                edge_tmp.bvEnd = undefined;\n                edge_tmp.bv = undefined;\n                edge_tmp.setInclusion(poly2);\n                edge_tmp = edge_tmp.next;\n            }\n        }\n\n        // Case #2. Both of the ends boundary. Check all the edges in the middle\n        // If some edges in the middle are not boundary then update bv of 'from' and 'to' edges\n        if (edge_from1.bv === BOUNDARY && edge_to1.bv === BOUNDARY && edge_from1 != edge_to1) {\n            let edge_tmp = edge_from1.next;\n            let new_bv;\n            while (edge_tmp != edge_to1) {\n                if (edge_tmp.bv != BOUNDARY) {\n                    if (new_bv === undefined) {        // first not boundary edge between from and to\n                        new_bv = edge_tmp.bv;\n                    }\n                    else {                            // another not boundary edge between from and to\n                        if (edge_tmp.bv != new_bv) {  // and it has different bv - can't resolve conflict\n                            throw Errors.UNRESOLVED_BOUNDARY_CONFLICT;\n                        }\n                    }\n                }\n                edge_tmp = edge_tmp.next;\n            }\n\n            if (new_bv != undefined) {\n                edge_from1.bv = new_bv;\n                edge_to1.bv = new_bv;\n            }\n            continue;         // all middle edges are boundary, proceed with this\n        }\n\n        // Case 3. One of the ends is inner, another is outer\n        if (edge_from1.bv === INSIDE$1 && edge_to1.bv === OUTSIDE  || edge_from1.bv === OUTSIDE && edge_to1.bv === INSIDE$1 ) {\n            let edge_tmp = edge_from1;\n            // Find missing intersection point\n            while (edge_tmp != edge_to1) {\n                if (edge_tmp.bvStart === edge_from1.bv && edge_tmp.bvEnd === edge_to1.bv) {\n                    let [dist, segment] = edge_tmp.shape.distanceTo(poly2);\n                    if (dist < 10*Flatten.DP_TOL) {  // it should be very close\n                        // let pt = edge_tmp.end;\n                        // add to the list of intersections of poly1\n                        addToIntPoints(edge_tmp, segment.ps, int_points1);\n\n                        // split edge_tmp in poly1 if need\n                        let int_point1 = int_points1[int_points1.length-1];\n                        if (int_point1.is_vertex & START_VERTEX) {        // nothing to split\n                            int_point1.edge_after = edge_tmp;\n                            int_point1.edge_before = edge_tmp.prev;\n                            edge_tmp.bvStart = BOUNDARY;\n                            edge_tmp.bv = undefined;\n                            edge_tmp.setInclusion(poly2);\n                        }\n                        else if (int_point1.is_vertex & END_VERTEX) {    // nothing to split\n                            int_point1.edge_after = edge_tmp.next;\n                            edge_tmp.bvEnd = BOUNDARY;\n                            edge_tmp.bv = undefined;\n                            edge_tmp.setInclusion(poly2);\n                        }\n                        else {        // split edge here\n                            let newEdge1 = poly2.addVertex(int_point1.pt, edge_tmp);\n                            int_point1.edge_before = newEdge1;\n                            int_point1.edge_after = newEdge1.next;\n\n                            newEdge1.setInclusion(poly2);\n\n                            newEdge1.next.bvStart = BOUNDARY;\n                            newEdge1.next.bvEnd = undefined;\n                            newEdge1.next.bv = undefined;\n                            newEdge1.next.setInclusion(poly2);\n                        }\n\n                        // add to the list of intersections of poly2\n                        let edge2 = poly2.findEdgeByPoint(segment.pe);\n                        addToIntPoints(edge2, segment.pe, int_points2);\n                        // split edge2 in poly2 if need\n                        let int_point2 = int_points2[int_points2.length-1];\n                        if (int_point2.is_vertex & START_VERTEX) {        // nothing to split\n                            int_point2.edge_after = edge2;\n                            int_point2.edge_before = edge2.prev;\n                        }\n                        else if (int_point2.is_vertex & END_VERTEX) {    // nothing to split\n                            int_point2.edge_after = edge2.next;\n                        }\n                        else {        // split edge here\n                            // first locate int_points that may refer to edge2 as edge.after\n                            // let int_point2_edge_before = int_points2.find( int_point => int_point.edge_before === edge2)\n                            let int_point2_edge_after = int_points2.find( int_point => int_point.edge_after === edge2 );\n\n                            let newEdge2 = poly2.addVertex(int_point2.pt, edge2);\n                            int_point2.edge_before = newEdge2;\n                            int_point2.edge_after = newEdge2.next;\n\n                            if (int_point2_edge_after)\n                                int_point2_edge_after.edge_after = newEdge2;\n\n                            newEdge2.bvStart = undefined;\n                            newEdge2.bvEnd = BOUNDARY;\n                            newEdge2.bv = undefined;\n                            newEdge2.setInclusion(poly1);\n\n                            newEdge2.next.bvStart = BOUNDARY;\n                            newEdge2.next.bvEnd = undefined;\n                            newEdge2.next.bv = undefined;\n                            newEdge2.next.setInclusion(poly1);\n                        }\n\n                        sortIntersections(intersections);\n\n                        iterate_more = true;\n                        break;\n                    }\n                }\n                edge_tmp = edge_tmp.next;\n            }\n\n            // we changed intersections inside loop, have to exit and repair again\n            if (iterate_more)\n                break;\n\n            throw Errors.UNRESOLVED_BOUNDARY_CONFLICT;\n        }\n    }\n\n    return iterate_more;\n}\n\nfunction removeNotRelevantChains(polygon, op, int_points, is_res_polygon)\n{\n    if (!int_points) return;\n    let cur_face = undefined;\n    let first_int_point_in_face_num = undefined;\n    let int_point_current;\n    let int_point_next;\n\n    for (let i = 0; i < int_points.length; i++) {\n        int_point_current = int_points[i];\n\n        if (int_point_current.face !== cur_face) {   // next face started\n            first_int_point_in_face_num = i;\n            cur_face = int_point_current.face;\n        }\n\n        if (cur_face.isEmpty())                // ??\n            continue;\n\n        // Get next int point from the same face that current\n\n        // Count how many duplicated points with same <x,y> in \"points from\" pool ?\n        let int_points_from_pull_start = i;\n        let int_points_from_pull_num = intPointsPoolCount(int_points, i, cur_face);\n        let next_int_point_num;\n        if (int_points_from_pull_start + int_points_from_pull_num < int_points.length &&\n            int_points[int_points_from_pull_start + int_points_from_pull_num].face === int_point_current.face) {\n            next_int_point_num = int_points_from_pull_start + int_points_from_pull_num;\n        } else {                                         // get first point from the same face\n            next_int_point_num = first_int_point_in_face_num;\n        }\n        int_point_next = int_points[next_int_point_num];\n\n        /* Count how many duplicated points with same <x,y> in \"points to\" pull ? */\n        let int_points_to_pull_start = next_int_point_num;\n        let int_points_to_pull_num = intPointsPoolCount(int_points, int_points_to_pull_start, cur_face);\n\n\n        let edge_from = int_point_current.edge_after;\n        let edge_to = int_point_next.edge_before;\n\n        if ((edge_from.bv === INSIDE$1 && edge_to.bv === INSIDE$1 && op === BOOLEAN_UNION) ||\n            (edge_from.bv === OUTSIDE && edge_to.bv === OUTSIDE && op === BOOLEAN_INTERSECT) ||\n            ((edge_from.bv === OUTSIDE || edge_to.bv === OUTSIDE) && op === BOOLEAN_SUBTRACT && !is_res_polygon) ||\n            ((edge_from.bv === INSIDE$1 || edge_to.bv === INSIDE$1) && op === BOOLEAN_SUBTRACT && is_res_polygon) ||\n            (edge_from.bv === BOUNDARY && edge_to.bv === BOUNDARY && (edge_from.overlap & OVERLAP_SAME) && is_res_polygon) ||\n            (edge_from.bv === BOUNDARY && edge_to.bv === BOUNDARY && (edge_from.overlap & OVERLAP_OPPOSITE))) {\n\n            polygon.removeChain(cur_face, edge_from, edge_to);\n\n            /* update all points in \"points from\" pull */\n            for (let k = int_points_from_pull_start; k < int_points_from_pull_start + int_points_from_pull_num; k++) {\n                int_points[k].edge_after = undefined;\n            }\n\n            /* update all points in \"points to\" pull */\n            for (let k = int_points_to_pull_start; k < int_points_to_pull_start + int_points_to_pull_num; k++) {\n                int_points[k].edge_before = undefined;\n            }\n        }\n\n        /* skip to the last point in \"points from\" group */\n        i += int_points_from_pull_num - 1;\n    }\n}\nfunction copyWrkToRes(res_polygon, wrk_polygon, op, int_points)\n{\n    for (let face of wrk_polygon.faces) {\n        for (let edge of face) {\n            res_polygon.edges.add(edge);\n        }\n        // If union - add face from wrk_polygon that is not intersected with res_polygon\n        if ( /*(op === BOOLEAN_UNION || op == BOOLEAN_SUBTRACT) &&*/\n            int_points.find((ip) => (ip.face === face)) === undefined) {\n            res_polygon.addFace(face.first, face.last);\n        }\n    }\n}\n\nfunction swapLinks(res_polygon, wrk_polygon, intersections)\n{\n    if (intersections.int_points1.length === 0) return;\n\n    for (let i = 0; i < intersections.int_points1.length; i++) {\n        let int_point1 = intersections.int_points1[i];\n        let int_point2 = intersections.int_points2[i];\n\n        // Simple case - find continuation on the other polygon\n\n        // Process edge from res_polygon\n        if (int_point1.edge_before !== undefined && int_point1.edge_after === undefined) {    // swap need\n            if (int_point2.edge_before === undefined && int_point2.edge_after !== undefined) {  // simple case\n                // Connect edges\n                int_point1.edge_before.next = int_point2.edge_after;\n                int_point2.edge_after.prev = int_point1.edge_before;\n\n                // Fill in missed links in intersection points\n                int_point1.edge_after = int_point2.edge_after;\n                int_point2.edge_before = int_point1.edge_before;\n            }\n        }\n        // Process edge from wrk_polygon\n        if (int_point2.edge_before !== undefined && int_point2.edge_after === undefined) {    // swap need\n            if (int_point1.edge_before === undefined && int_point1.edge_after !== undefined) {  // simple case\n                // Connect edges\n                int_point2.edge_before.next = int_point1.edge_after;\n                int_point1.edge_after.prev = int_point2.edge_before;\n\n                // Complete missed links\n                int_point2.edge_after = int_point1.edge_after;\n                int_point1.edge_before = int_point2.edge_before;\n            }\n        }\n\n        // Continuation not found - complex case\n        // Continuation will be found on the same polygon.\n        // It happens when intersection point is actually touching point\n        // Polygon1\n        if (int_point1.edge_before !== undefined && int_point1.edge_after === undefined) {    // still swap need\n            for (let int_point of intersections.int_points1_sorted) {\n                if (int_point === int_point1) continue;     // skip same\n                if (int_point.edge_before === undefined && int_point.edge_after !== undefined) {\n                    if (int_point.pt.equalTo(int_point1.pt)) {\n                        // Connect edges\n                        int_point1.edge_before.next = int_point.edge_after;\n                        int_point.edge_after.prev = int_point1.edge_before;\n\n                        // Complete missed links\n                        int_point1.edge_after = int_point.edge_after;\n                        int_point.edge_before = int_point1.edge_before;\n                    }\n                }\n            }\n        }\n        // Polygon2\n        if (int_point2.edge_before !== undefined && int_point2.edge_after === undefined) {    // still swap need\n            for (let int_point of intersections.int_points2_sorted) {\n                if (int_point === int_point2) continue;     // skip same\n                if (int_point.edge_before === undefined && int_point.edge_after !== undefined) {\n                    if (int_point.pt.equalTo(int_point2.pt)) {\n                        // Connect edges\n                        int_point2.edge_before.next = int_point.edge_after;\n                        int_point.edge_after.prev = int_point2.edge_before;\n\n                        // Complete missed links\n                        int_point2.edge_after = int_point.edge_after;\n                        int_point.edge_before = int_point2.edge_before;\n                    }\n                }\n            }\n        }\n    }\n    // Sanity check that no dead ends left\n}\n\nfunction removeOldFaces(polygon, int_points)\n{\n    for (let int_point of int_points) {\n        polygon.faces.delete(int_point.face);\n        int_point.face = undefined;\n        if (int_point.edge_before)\n            int_point.edge_before.face = undefined;\n        if (int_point.edge_after)\n            int_point.edge_after.face = undefined;\n    }\n}\n\nfunction restoreFaces(polygon, int_points, other_int_points)\n{\n    // For each intersection point - create new face\n    for (let int_point of int_points) {\n        if (int_point.edge_before === undefined || int_point.edge_after === undefined)  // completely deleted\n            continue;\n        if (int_point.face)            // already restored\n            continue;\n\n        if (int_point.edge_after.face || int_point.edge_before.face)        // Face already created. Possible case in duplicated intersection points\n            continue;\n\n        let first = int_point.edge_after;      // face start\n        let last = int_point.edge_before;      // face end;\n\n        try {\n            LinkedList.testInfiniteLoop(first);    // check and throw error if infinite loop found\n        }\n        catch (error) {\n            throw Errors.CANNOT_COMPLETE_BOOLEAN_OPERATION\n        }\n\n        let face = polygon.addFace(first, last);\n\n        // Mark intersection points from the newly create face\n        // to avoid multiple creation of the same face.\n        // Face was assigned to each edge of new face in addFace function\n        for (let int_point_tmp of int_points) {\n            if (int_point_tmp.edge_before && int_point_tmp.edge_after &&\n                int_point_tmp.edge_before.face === face && int_point_tmp.edge_after.face === face) {\n                int_point_tmp.face = face;\n            }\n        }\n        // Mark other intersection points as well\n        for (let int_point_tmp of other_int_points) {\n            if (int_point_tmp.edge_before && int_point_tmp.edge_after &&\n                int_point_tmp.edge_before.face === face && int_point_tmp.edge_after.face === face) {\n                int_point_tmp.face = face;\n            }\n        }\n    }\n}\n\nfunction removeNotRelevantNotIntersectedFaces(polygon, notIntersectedFaces, op, is_res_polygon)\n{\n    for (let face of notIntersectedFaces) {\n        let rel = face.first.bv;\n        if (op === BOOLEAN_UNION && rel === INSIDE$1 ||\n            op === BOOLEAN_SUBTRACT && rel === INSIDE$1 && is_res_polygon ||\n            op === BOOLEAN_SUBTRACT && rel === OUTSIDE && !is_res_polygon ||\n            op === BOOLEAN_INTERSECT && rel === OUTSIDE) {\n\n            polygon.deleteFace(face);\n        }\n    }\n}\n\nvar BooleanOperations = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    BOOLEAN_INTERSECT: BOOLEAN_INTERSECT,\n    BOOLEAN_SUBTRACT: BOOLEAN_SUBTRACT,\n    BOOLEAN_UNION: BOOLEAN_UNION,\n    calculateIntersections: calculateIntersections,\n    innerClip: innerClip,\n    intersect: intersect$1,\n    outerClip: outerClip,\n    removeNotRelevantChains: removeNotRelevantChains,\n    removeOldFaces: removeOldFaces,\n    restoreFaces: restoreFaces,\n    subtract: subtract,\n    unify: unify\n});\n\n/*\n    Dimensionally extended 9-intersected model\n    See https://en.wikipedia.org/wiki/DE-9IM for more details\n */\n// const DISJOINT = RegExp('FF.FF....');\nconst EQUAL = RegExp('T.F..FFF.|T.F...F..');\nconst INTERSECT = RegExp('T........|.T.......|...T.....|....T....');\nconst TOUCH = RegExp('FT.......|F..T.....|F...T....');\nconst INSIDE = RegExp('T.F..F...');\nconst COVERED = RegExp('T.F..F...|.TF..F...|..FT.F...|..F.TF...');\n\nclass DE9IM {\n    /**\n     * Create new instance of DE9IM matrix\n     */\n    constructor() {\n        /**\n         * Array representing 3x3 intersection matrix\n         * @type {Shape[]}\n         */\n        this.m = new Array(9).fill(undefined);\n    }\n\n    /**\n     * Get Interior To Interior intersection\n     * @returns {Shape[] | undefined}\n     */\n    get I2I() {\n        return this.m[0];\n    }\n\n    /**\n     * Set Interior To Interior intersection\n     * @param geom\n     */\n    set I2I(geom) {\n        this.m[0] = geom;\n    }\n\n    /**\n     * Get Interior To Boundary intersection\n     * @returns {Shape[] | undefined}\n     */\n    get I2B() {\n        return this.m[1];\n    }\n\n    /**\n     * Set Interior to Boundary intersection\n     * @param geomc\n     */\n    set I2B(geom) {\n        this.m[1] = geom;\n    }\n\n    /**\n     * Get Interior To Exterior intersection\n     * @returns {Shape[] | undefined}\n     */\n    get I2E() {\n        return this.m[2];\n    }\n\n    /**\n     * Set Interior to Exterior intersection\n     * @param geom\n     */\n    set I2E(geom) {\n        this.m[2] = geom;\n    }\n\n    /**\n     * Get Boundary To Interior intersection\n     * @returns {Shape[] | undefined}\n     */\n    get B2I() {\n        return this.m[3];\n    }\n\n    /**\n     * Set Boundary to Interior intersection\n     * @param geom\n     */\n    set B2I(geom) {\n        this.m[3] = geom;\n    }\n\n    /**\n     * Get Boundary To Boundary intersection\n     * @returns {Shape[] | undefined}\n     */\n    get B2B() {\n        return this.m[4];\n    }\n\n    /**\n     * Set Boundary to Boundary intersection\n     * @param geom\n     */\n    set B2B(geom) {\n        this.m[4] = geom;\n    }\n\n    /**\n     * Get Boundary To Exterior intersection\n     * @returns {Shape[] | undefined}\n     */\n    get B2E() {\n        return this.m[5];\n    }\n\n    /**\n     * Set Boundary to Exterior intersection\n     * @param geom\n     */\n    set B2E(geom) {\n        this.m[5] = geom;\n    }\n\n    /**\n     * Get Exterior To Interior intersection\n     * @returns {Shape[] | undefined}\n     */\n    get E2I() {\n        return this.m[6];\n    }\n\n    /**\n     * Set Exterior to Interior intersection\n     * @param geom\n     */\n    set E2I(geom) {\n        this.m[6] = geom;\n    }\n\n    /**\n     * Get Exterior To Boundary intersection\n     * @returns {Shape[] | undefined}\n     */\n    get E2B() {\n        return this.m[7];\n    }\n\n    /**\n     * Set Exterior to Boundary intersection\n     * @param geom\n     */\n    set E2B(geom) {\n        this.m[7] = geom;\n    }\n\n    /**\n     * Get Exterior to Exterior intersection\n     * @returns {Shape[] | undefined}\n     */\n    get E2E() {\n        return this.m[8];\n    }\n\n    /**\n     * Set Exterior to Exterior intersection\n     * @param geom\n     */\n    set E2E(geom) {\n        this.m[8] = geom;\n    }\n\n    /**\n     * Return de9im matrix as string where<br/>\n     * - intersection is 'T'<br/>\n     * - not intersected is 'F'<br/>\n     * - not relevant is '*'<br/>\n     * For example, string 'FF**FF****' means 'DISJOINT'\n     * @returns {string}\n     */\n    toString() {\n        return this.m.map( e => {\n            if (e instanceof Array && e.length > 0) {\n                return 'T'\n            }\n            else if (e instanceof Array && e.length === 0) {\n                return 'F'\n            }\n            else {\n                return '*'\n            }\n        }).join(\"\")\n    }\n\n    equal() {\n        return EQUAL.test(this.toString());\n    }\n\n    intersect() {\n        return INTERSECT.test(this.toString());\n    }\n\n    touch() {\n        return TOUCH.test(this.toString());\n    }\n\n    inside() {\n        return INSIDE.test(this.toString());\n    }\n\n    covered() {\n        return COVERED.test(this.toString());\n    }\n}\n\n/**\n * Intersection\n *\n * */\n\n\nfunction intersectLine2Line(line1, line2) {\n    let ip = [];\n\n    let [A1, B1, C1] = line1.standard;\n    let [A2, B2, C2] = line2.standard;\n\n    /* Cramer's rule */\n    let det = A1 * B2 - B1 * A2;\n    let detX = C1 * B2 - B1 * C2;\n    let detY = A1 * C2 - C1 * A2;\n\n    if (!Flatten.Utils.EQ_0(det)) {\n        let x, y;\n\n        if (B1 === 0) {        // vertical line x  = C1/A1, where A1 == +1 or -1\n            x = C1/A1;\n            y = detY / det;\n        }\n        else if (B2 === 0) {   // vertical line x = C2/A2, where A2 = +1 or -1\n            x = C2/A2;\n            y = detY / det;\n        }\n        else if (A1 === 0) {   // horizontal line y = C1/B1, where B1 = +1 or -1\n            x = detX / det;\n            y = C1/B1;\n        }\n        else if (A2 === 0) {   // horizontal line y = C2/B2, where B2 = +1 or -1\n            x = detX / det;\n            y = C2/B2;\n        }\n        else {\n            x = detX / det;\n            y = detY / det;\n        }\n\n        ip.push(new Flatten.Point(x, y));\n    }\n\n    return ip;\n}\n\nfunction intersectLine2Circle(line, circle) {\n    let ip = [];\n    let prj = circle.pc.projectionOn(line);            // projection of circle center on a line\n    let dist = circle.pc.distanceTo(prj)[0];           // distance from circle center to projection\n\n    if (Flatten.Utils.EQ(dist, circle.r)) {            // line tangent to circle - return single intersection point\n        ip.push(prj);\n    } else if (Flatten.Utils.LT(dist, circle.r)) {       // return two intersection points\n        let delta = Math.sqrt(circle.r * circle.r - dist * dist);\n        let v_trans, pt;\n\n        v_trans = line.norm.rotate90CCW().multiply(delta);\n        pt = prj.translate(v_trans);\n        ip.push(pt);\n\n        v_trans = line.norm.rotate90CW().multiply(delta);\n        pt = prj.translate(v_trans);\n        ip.push(pt);\n    }\n    return ip;\n}\n\nfunction intersectLine2Box(line, box) {\n    let ips = [];\n    for (let seg of box.toSegments()) {\n        let ips_tmp = intersectSegment2Line(seg, line);\n        for (let pt of ips_tmp) {\n            if (!ptInIntPoints(pt, ips)) {\n                ips.push(pt);\n            }\n        }\n    }\n    return ips;\n}\n\nfunction intersectLine2Arc(line, arc) {\n    let ip = [];\n\n    if (intersectLine2Box(line, arc.box).length === 0) {\n        return ip;\n    }\n\n    let circle = new Flatten.Circle(arc.pc, arc.r);\n    let ip_tmp = intersectLine2Circle(line, circle);\n    for (let pt of ip_tmp) {\n        if (pt.on(arc)) {\n            ip.push(pt);\n        }\n    }\n\n    return ip;\n}\n\nfunction intersectSegment2Line(seg, line) {\n    let ip = [];\n\n    // Boundary cases\n    if (seg.ps.on(line)) {\n        ip.push(seg.ps);\n    }\n    // If both ends lay on line, return two intersection points\n    if (seg.pe.on(line) && !seg.isZeroLength()) {\n        ip.push(seg.pe);\n    }\n\n    if (ip.length > 0) {\n        return ip;          // done, intersection found\n    }\n\n    // If zero-length segment and nothing found, return no intersections\n    if (seg.isZeroLength()) {\n        return ip;\n    }\n\n    // Not a boundary case, check if both points are on the same side and\n    // hence there is no intersection\n    if (seg.ps.leftTo(line) && seg.pe.leftTo(line) ||\n        !seg.ps.leftTo(line) && !seg.pe.leftTo(line)) {\n        return ip;\n    }\n\n    // Calculate intersection between lines\n    let line1 = new Flatten.Line(seg.ps, seg.pe);\n    return intersectLine2Line(line1, line);\n}\n\nfunction intersectSegment2Segment(seg1, seg2) {\n    let ip = [];\n\n    // quick reject\n    if (seg1.box.not_intersect(seg2.box)) {\n        return ip;\n    }\n\n    // Special case of seg1 zero length\n    if (seg1.isZeroLength()) {\n        if (seg1.ps.on(seg2)) {\n            ip.push(seg1.ps);\n        }\n        return ip;\n    }\n\n    // Special case of seg2 zero length\n    if (seg2.isZeroLength()) {\n        if (seg2.ps.on(seg1)) {\n            ip.push(seg2.ps);\n        }\n        return ip;\n    }\n\n    // Neither seg1 nor seg2 is zero length\n    let line1 = new Flatten.Line(seg1.ps, seg1.pe);\n    let line2 = new Flatten.Line(seg2.ps, seg2.pe);\n\n    // Check overlapping between segments in case of incidence\n    // If segments touching, add one point. If overlapping, add two points\n    if (line1.incidentTo(line2)) {\n        if (seg1.ps.on(seg2)) {\n            ip.push(seg1.ps);\n        }\n        if (seg1.pe.on(seg2)) {\n            ip.push(seg1.pe);\n        }\n        if (seg2.ps.on(seg1) && !seg2.ps.equalTo(seg1.ps) && !seg2.ps.equalTo(seg1.pe)) {\n            ip.push(seg2.ps);\n        }\n        if (seg2.pe.on(seg1) && !seg2.pe.equalTo(seg1.ps) && !seg2.pe.equalTo(seg1.pe)) {\n            ip.push(seg2.pe);\n        }\n    } else {                /* not incident - parallel or intersect */\n        // Calculate intersection between lines\n        let new_ip = intersectLine2Line(line1, line2);\n        if (new_ip.length > 0) {\n            if (isPointInSegmentBox(new_ip[0], seg1) && isPointInSegmentBox(new_ip[0], seg2)) {\n                ip.push(new_ip[0]);\n            }\n        }\n    }\n    return ip;\n}\n\nfunction isPointInSegmentBox(point, segment) {\n    const box = segment.box;\n    return Flatten.Utils.LE(point.x, box.xmax) && Flatten.Utils.GE(point.x, box.xmin) &&\n        Flatten.Utils.LE(point.y, box.ymax) && Flatten.Utils.GE(point.y, box.ymin)\n}\n\nfunction intersectSegment2Circle(segment, circle) {\n    let ips = [];\n\n    if (segment.box.not_intersect(circle.box)) {\n        return ips;\n    }\n\n    // Special case of zero length segment\n    if (segment.isZeroLength()) {\n        let [dist, _] = segment.ps.distanceTo(circle.pc);\n        if (Flatten.Utils.EQ(dist, circle.r)) {\n            ips.push(segment.ps);\n        }\n        return ips;\n    }\n\n    // Non zero-length segment\n    let line = new Flatten.Line(segment.ps, segment.pe);\n\n    let ips_tmp = intersectLine2Circle(line, circle);\n\n    for (let ip of ips_tmp) {\n        if (ip.on(segment)) {\n            ips.push(ip);\n        }\n    }\n\n    return ips;\n}\n\nfunction intersectSegment2Arc(segment, arc) {\n    let ip = [];\n\n    if (segment.box.not_intersect(arc.box)) {\n        return ip;\n    }\n\n    // Special case of zero-length segment\n    if (segment.isZeroLength()) {\n        if (segment.ps.on(arc)) {\n            ip.push(segment.ps);\n        }\n        return ip;\n    }\n\n    // Non-zero length segment\n    let line = new Flatten.Line(segment.ps, segment.pe);\n    let circle = new Flatten.Circle(arc.pc, arc.r);\n\n    let ip_tmp = intersectLine2Circle(line, circle);\n\n    for (let pt of ip_tmp) {\n        if (pt.on(segment) && pt.on(arc)) {\n            ip.push(pt);\n        }\n    }\n    return ip;\n\n}\n\nfunction intersectSegment2Box(segment, box) {\n    let ips = [];\n    for (let seg of box.toSegments()) {\n        let ips_tmp = intersectSegment2Segment(seg, segment);\n        for (let ip of ips_tmp) {\n            ips.push(ip);\n        }\n    }\n    return ips;\n}\n\nfunction intersectCircle2Circle(circle1, circle2) {\n    let ip = [];\n\n    if (circle1.box.not_intersect(circle2.box)) {\n        return ip;\n    }\n\n    let vec = new Flatten.Vector(circle1.pc, circle2.pc);\n\n    let r1 = circle1.r;\n    let r2 = circle2.r;\n\n    // Degenerated circle\n    if (Flatten.Utils.EQ_0(r1) || Flatten.Utils.EQ_0(r2))\n        return ip;\n\n    // In case of equal circles return one leftmost point\n    if (Flatten.Utils.EQ_0(vec.x) && Flatten.Utils.EQ_0(vec.y) && Flatten.Utils.EQ(r1, r2)) {\n        ip.push(circle1.pc.translate(-r1, 0));\n        return ip;\n    }\n\n    let dist = circle1.pc.distanceTo(circle2.pc)[0];\n\n    if (Flatten.Utils.GT(dist, r1 + r2))               // circles too far, no intersections\n        return ip;\n\n    if (Flatten.Utils.LT(dist, Math.abs(r1 - r2)))     // one circle is contained within another, no intersections\n        return ip;\n\n    // Normalize vector.\n    vec.x /= dist;\n    vec.y /= dist;\n\n    let pt;\n\n    // Case of touching from outside or from inside - single intersection point\n    // TODO: check this specifically not sure if correct\n    if (Flatten.Utils.EQ(dist, r1 + r2) || Flatten.Utils.EQ(dist, Math.abs(r1 - r2))) {\n        pt = circle1.pc.translate(r1 * vec.x, r1 * vec.y);\n        ip.push(pt);\n        return ip;\n    }\n\n    // Case of two intersection points\n\n    // Distance from first center to center of common chord:\n    //   a = (r1^2 - r2^2 + d^2) / 2d\n    // Separate for better accuracy\n    let a = (r1 * r1) / (2 * dist) - (r2 * r2) / (2 * dist) + dist / 2;\n\n    let mid_pt = circle1.pc.translate(a * vec.x, a * vec.y);\n    let h = Math.sqrt(r1 * r1 - a * a);\n    // let norm;\n\n    // norm = vec.rotate90CCW().multiply(h);\n    pt = mid_pt.translate(vec.rotate90CCW().multiply(h));\n    ip.push(pt);\n\n    // norm = vec.rotate90CW();\n    pt = mid_pt.translate(vec.rotate90CW().multiply(h));\n    ip.push(pt);\n\n    return ip;\n}\n\nfunction intersectCircle2Box(circle, box) {\n    let ips = [];\n    for (let seg of box.toSegments()) {\n        let ips_tmp = intersectSegment2Circle(seg, circle);\n        for (let ip of ips_tmp) {\n            ips.push(ip);\n        }\n    }\n    return ips;\n}\n\nfunction intersectArc2Arc(arc1, arc2) {\n    let ip = [];\n\n    if (arc1.box.not_intersect(arc2.box)) {\n        return ip;\n    }\n\n    // Special case: overlapping arcs\n    // May return up to 4 intersection points\n    if (arc1.pc.equalTo(arc2.pc) && Flatten.Utils.EQ(arc1.r, arc2.r)) {\n        let pt;\n\n        pt = arc1.start;\n        if (pt.on(arc2))\n            ip.push(pt);\n\n        pt = arc1.end;\n        if (pt.on(arc2))\n            ip.push(pt);\n\n        pt = arc2.start;\n        if (pt.on(arc1)) ip.push(pt);\n\n        pt = arc2.end;\n        if (pt.on(arc1)) ip.push(pt);\n\n        return ip;\n    }\n\n    // Common case\n    let circle1 = new Flatten.Circle(arc1.pc, arc1.r);\n    let circle2 = new Flatten.Circle(arc2.pc, arc2.r);\n    let ip_tmp = circle1.intersect(circle2);\n    for (let pt of ip_tmp) {\n        if (pt.on(arc1) && pt.on(arc2)) {\n            ip.push(pt);\n        }\n    }\n    return ip;\n}\n\nfunction intersectArc2Circle(arc, circle) {\n    let ip = [];\n\n    if (arc.box.not_intersect(circle.box)) {\n        return ip;\n    }\n\n    // Case when arc center incident to circle center\n    // Return arc's end points as 2 intersection points\n    if (circle.pc.equalTo(arc.pc) && Flatten.Utils.EQ(circle.r, arc.r)) {\n        ip.push(arc.start);\n        ip.push(arc.end);\n        return ip;\n    }\n\n    // Common case\n    let circle1 = circle;\n    let circle2 = new Flatten.Circle(arc.pc, arc.r);\n    let ip_tmp = intersectCircle2Circle(circle1, circle2);\n    for (let pt of ip_tmp) {\n        if (pt.on(arc)) {\n            ip.push(pt);\n        }\n    }\n    return ip;\n}\n\nfunction intersectArc2Box(arc, box) {\n    let ips = [];\n    for (let seg of box.toSegments()) {\n        let ips_tmp = intersectSegment2Arc(seg, arc);\n        for (let ip of ips_tmp) {\n            ips.push(ip);\n        }\n    }\n    return ips;\n}\n\nfunction intersectEdge2Segment(edge, segment) {\n    return edge.isSegment() ? intersectSegment2Segment(edge.shape, segment) : intersectSegment2Arc(segment, edge.shape);\n}\n\nfunction intersectEdge2Arc(edge, arc) {\n    return edge.isSegment() ? intersectSegment2Arc(edge.shape, arc) : intersectArc2Arc(edge.shape, arc);\n}\n\nfunction intersectEdge2Line(edge, line) {\n    return edge.isSegment() ? intersectSegment2Line(edge.shape, line) : intersectLine2Arc(line, edge.shape);\n}\n\nfunction intersectEdge2Circle(edge, circle) {\n    return edge.isSegment() ? intersectSegment2Circle(edge.shape, circle) : intersectArc2Circle(edge.shape, circle);\n}\n\nfunction intersectSegment2Polygon(segment, polygon) {\n    let ip = [];\n\n    for (let edge of polygon.edges) {\n        for (let pt of intersectEdge2Segment(edge, segment)) {\n            ip.push(pt);\n        }\n    }\n\n    return ip;\n}\n\nfunction intersectArc2Polygon(arc, polygon) {\n    let ip = [];\n\n    for (let edge of polygon.edges) {\n        for (let pt of intersectEdge2Arc(edge, arc)) {\n            ip.push(pt);\n        }\n    }\n\n    return ip;\n}\n\nfunction intersectLine2Polygon(line, polygon) {\n    let ip = [];\n\n    if (polygon.isEmpty()) {\n        return ip;\n    }\n\n    for (let edge of polygon.edges) {\n        for (let pt of intersectEdge2Line(edge, line)) {\n            if (!ptInIntPoints(pt, ip)) {\n                ip.push(pt);\n            }\n        }\n    }\n\n    return line.sortPoints(ip);\n}\n\nfunction intersectCircle2Polygon(circle, polygon) {\n    let ip = [];\n\n    if (polygon.isEmpty()) {\n        return ip;\n    }\n\n    for (let edge of polygon.edges) {\n        for (let pt of intersectEdge2Circle(edge, circle)) {\n            ip.push(pt);\n        }\n    }\n\n    return ip;\n}\n\nfunction intersectEdge2Edge(edge1, edge2) {\n    const shape1 = edge1.shape;\n    const shape2 = edge2.shape;\n    return edge1.isSegment() ?\n        (edge2.isSegment() ? intersectSegment2Segment(shape1, shape2) : intersectSegment2Arc(shape1, shape2)) :\n        (edge2.isSegment() ? intersectSegment2Arc(shape2, shape1) : intersectArc2Arc(shape1, shape2));\n}\n\nfunction intersectEdge2Polygon(edge, polygon) {\n    let ip = [];\n\n    if (polygon.isEmpty() || edge.shape.box.not_intersect(polygon.box)) {\n        return ip;\n    }\n\n    let resp_edges = polygon.edges.search(edge.shape.box);\n\n    for (let resp_edge of resp_edges) {\n        for (let pt of intersectEdge2Edge(edge, resp_edge)) {\n            ip.push(pt);\n        }\n    }\n\n    return ip;\n}\n\nfunction intersectPolygon2Polygon(polygon1, polygon2) {\n    let ip = [];\n\n    if (polygon1.isEmpty() || polygon2.isEmpty()) {\n        return ip;\n    }\n\n    if (polygon1.box.not_intersect(polygon2.box)) {\n        return ip;\n    }\n\n    for (let edge1 of polygon1.edges) {\n        for (let pt of intersectEdge2Polygon(edge1, polygon2)) {\n            ip.push(pt);\n        }\n    }\n\n    return ip;\n}\n\nfunction intersectShape2Polygon(shape, polygon) {\n    if (shape instanceof Flatten.Line) {\n        return intersectLine2Polygon(shape, polygon);\n    }\n    else if (shape instanceof Flatten.Segment) {\n        return intersectSegment2Polygon(shape, polygon);\n    }\n    else if (shape instanceof Flatten.Arc) {\n        return intersectArc2Polygon(shape, polygon);\n    }\n    else {\n        return [];\n    }\n}\n\nfunction ptInIntPoints(new_pt, ip) {\n    return ip.some( pt => pt.equalTo(new_pt) )\n}\n\nfunction createLineFromRay(ray) {\n    return new Flatten.Line(ray.start, ray.norm)\n}\nfunction intersectRay2Segment(ray, segment) {\n    return intersectSegment2Line(segment, createLineFromRay(ray))\n        .filter(pt => ray.contains(pt));\n}\n\nfunction intersectRay2Arc(ray, arc) {\n    return intersectLine2Arc(createLineFromRay(ray), arc)\n        .filter(pt => ray.contains(pt))\n}\n\nfunction intersectRay2Circle(ray, circle) {\n    return intersectLine2Circle(createLineFromRay(ray), circle)\n        .filter(pt => ray.contains(pt))\n}\n\nfunction intersectRay2Box(ray, box) {\n    return intersectLine2Box(createLineFromRay(ray), box)\n        .filter(pt => ray.contains(pt))\n}\n\nfunction intersectRay2Line(ray, line) {\n    return intersectLine2Line(createLineFromRay(ray), line)\n        .filter(pt => ray.contains(pt))\n}\n\nfunction intersectRay2Ray(ray1, ray2) {\n    return intersectLine2Line(createLineFromRay(ray1), createLineFromRay(ray2))\n        .filter(pt => ray1.contains(pt))\n        .filter(pt => ray2.contains(pt))\n}\n\nfunction intersectRay2Polygon(ray, polygon) {\n    return intersectLine2Polygon(createLineFromRay(ray), polygon)\n        .filter(pt => ray.contains(pt))\n}\n\nconst defaultAttributes = {\n    stroke: \"black\"\n};\n\nclass SVGAttributes {\n    constructor(args = defaultAttributes) {\n        for(const property in args) {\n            this[property] = args[property];\n        }\n        this.stroke = args.stroke ?? defaultAttributes.stroke;\n    }\n\n    toAttributesString() {\n        return Object.keys(this)\n            .reduce( (acc, key) =>\n                    acc + (this[key] !== undefined ? this.toAttrString(key, this[key]) : \"\")\n            , ``)\n    }\n\n    toAttrString(key, value) {\n        const SVGKey = key === \"className\" ? \"class\" : this.convertCamelToKebabCase(key);\n        return value === null ? `${SVGKey} ` : `${SVGKey}=\"${value.toString()}\" `\n    }\n\n    convertCamelToKebabCase(str) {\n        return str\n            .match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g)\n            .join('-')\n            .toLowerCase();\n    }\n}\n\nfunction convertToString(attrs) {\n    return new SVGAttributes(attrs).toAttributesString()\n}\n\n/**\n * Class Multiline represent connected path of [edges]{@link Flatten.Edge}, where each edge may be\n * [segment]{@link Flatten.Segment}, [arc]{@link Flatten.Arc}, [line]{@link Flatten.Line} or [ray]{@link Flatten.Ray}\n */\nclass Multiline extends LinkedList {\n    constructor(...args) {\n        super();\n\n        if (args.length === 0) {\n            return;\n        }\n\n        if (args.length == 1) {\n            if (args[0] instanceof Array) {\n                let shapes = args[0];\n                if (shapes.length == 0)\n                    return;\n\n                // TODO: more strict validation:\n                // there may be only one line\n                // only first and last may be rays\n                shapes.every((shape) => {\n                    return shape instanceof Flatten.Segment ||\n                        shape instanceof Flatten.Arc ||\n                        shape instanceof Flatten.Ray ||\n                        shape instanceof Flatten.Line\n                });\n\n                for (let shape of shapes) {\n                    let edge = new Flatten.Edge(shape);\n                    this.append(edge);\n                }\n            }\n        }\n    }\n\n    /**\n     * (Getter) Return array of edges\n     * @returns {Edge[]}\n     */\n    get edges() {\n        return [...this];\n    }\n\n    /**\n     * (Getter) Return bounding box of the multiline\n     * @returns {Box}\n     */\n    get box() {\n        return this.edges.reduce( (acc,edge) => acc = acc.merge(edge.box), new Flatten.Box() );\n    }\n\n    /**\n     * (Getter) Returns array of vertices\n     * @returns {Point[]}\n     */\n    get vertices() {\n        let v = this.edges.map(edge => edge.start);\n        v.push(this.last.end);\n        return v;\n    }\n\n    /**\n     * Return new cloned instance of Multiline\n     * @returns {Multiline}\n     */\n    clone() {\n        return new Multiline(this.toShapes());\n    }\n\n    /**\n     * Split edge and add new vertex, return new edge inserted\n     * @param {Point} pt - point on edge that will be added as new vertex\n     * @param {Edge} edge - edge to split\n     * @returns {Edge}\n     */\n    addVertex(pt, edge) {\n        let shapes = edge.shape.split(pt);\n        // if (shapes.length < 2) return;\n\n        if (shapes[0] === null)   // point incident to edge start vertex, return previous edge\n           return edge.prev;\n\n        if (shapes[1] === null)   // point incident to edge end vertex, return edge itself\n           return edge;\n\n        let newEdge = new Flatten.Edge(shapes[0]);\n        let edgeBefore = edge.prev;\n\n        /* Insert first split edge into linked list after edgeBefore */\n        this.insert(newEdge, edgeBefore);     // edge.face ?\n\n        // Update edge shape with second split edge keeping links\n        edge.shape = shapes[1];\n\n        return newEdge;\n    }\n\n    /**\n     * Split edges of multiline with intersection points and return mutated multiline\n     * @param {Point[]} ip - array of points to be added as new vertices\n     * @returns {Multiline}\n     */\n    split(ip) {\n        for (let pt of ip) {\n            let edge = this.findEdgeByPoint(pt);\n            this.addVertex(pt, edge);\n        }\n        return this;\n    }\n\n    /**\n     * Returns edge which contains given point\n     * @param {Point} pt\n     * @returns {Edge}\n     */\n    findEdgeByPoint(pt) {\n        let edgeFound;\n        for (let edge of this) {\n            if (edge.shape.contains(pt)) {\n                edgeFound = edge;\n                break;\n            }\n        }\n        return edgeFound;\n    }\n\n    /**\n     * Returns new multiline translated by vector vec\n     * @param {Vector} vec\n     * @returns {Multiline}\n     */\n    translate(vec) {\n        return new Multiline(this.edges.map( edge => edge.shape.translate(vec)));\n    }\n\n    /**\n     * Return new multiline rotated by given angle around given point\n     * If point omitted, rotate around origin (0,0)\n     * Positive value of angle defines rotation counterclockwise, negative - clockwise\n     * @param {number} angle - rotation angle in radians\n     * @param {Point} center - rotation center, default is (0,0)\n     * @returns {Multiline} - new rotated polygon\n     */\n    rotate(angle = 0, center = new Flatten.Point()) {\n        return new Multiline(this.edges.map( edge => edge.shape.rotate(angle, center) ));\n    }\n\n    /**\n     * Return new multiline transformed using affine transformation matrix\n     * Method does not support unbounded shapes\n     * @param {Matrix} matrix - affine transformation matrix\n     * @returns {Multiline} - new multiline\n     */\n    transform(matrix = new Flatten.Matrix()) {\n        return new Multiline(this.edges.map( edge => edge.shape.transform(matrix)));\n    }\n\n    /**\n     * Transform multiline into array of shapes\n     * @returns {Shape[]}\n     */\n    toShapes() {\n        return this.edges.map(edge => edge.shape.clone())\n    }\n\n    /**\n     * This method returns an object that defines how data will be\n     * serialized when called JSON.stringify() method\n     * @returns {Object}\n     */\n    toJSON() {\n        return this.edges.map(edge => edge.toJSON());\n    }\n\n    /**\n     * Return string to draw multiline in svg\n     * @param attrs  - an object with attributes for svg path element\n     * TODO: support semi-infinite Ray and infinite Line\n     * @returns {string}\n     */\n    svg(attrs = {}) {\n        let svgStr = `\\n<path ${convertToString({fill: \"none\", ...attrs})} d=\"`;\n        svgStr += `\\nM${this.first.start.x},${this.first.start.y}`;\n        for (let edge of this) {\n            svgStr += edge.svg();\n        }\n        svgStr += `\" >\\n</path>`;\n        return svgStr;\n    }\n}\n\nFlatten.Multiline = Multiline;\n\n/**\n * Shortcut function to create multiline\n * @param args\n */\nconst multiline = (...args) => new Flatten.Multiline(...args);\nFlatten.multiline = multiline;\n\n/**\n * @module RayShoot\n */\n/**\n * Implements ray shooting algorithm. Returns relation between point and polygon: inside, outside or boundary\n * @param {Polygon} polygon - polygon to test\n * @param {Point} point - point to test\n * @returns {INSIDE|OUTSIDE|BOUNDARY}\n */\nfunction ray_shoot(polygon, point) {\n    let contains = undefined;\n\n    // 1. Quick reject\n    // if (polygon.box.not_intersect(point.box)) {\n    //     return Flatten.OUTSIDE;\n    // }\n\n    let ray = new Flatten.Ray(point);\n    let line = new Flatten.Line(ray.pt, ray.norm);\n\n    // 2. Locate relevant edges of the polygon\n    const searchBox = new Flatten.Box(\n        ray.box.xmin-Flatten.DP_TOL, ray.box.ymin-Flatten.DP_TOL,\n        ray.box.xmax, ray.box.ymax+Flatten.DP_TOL\n    );\n\n    if (polygon.box.not_intersect(searchBox)) {\n        return Flatten.OUTSIDE;\n    }\n\n    let resp_edges = polygon.edges.search(searchBox);\n\n    if (resp_edges.length == 0) {\n        return Flatten.OUTSIDE;\n    }\n\n    // 2.5 Check if boundary\n    for (let edge of resp_edges) {\n        if (edge.shape.contains(point)) {\n            return Flatten.BOUNDARY;\n        }\n    }\n\n    // 3. Calculate intersections\n    let intersections = [];\n    for (let edge of resp_edges) {\n        for (let ip of ray.intersect(edge.shape)) {\n\n            // If intersection is equal to query point then point lays on boundary\n            if (ip.equalTo(point)) {\n                return Flatten.BOUNDARY;\n            }\n\n            intersections.push({\n                pt: ip,\n                edge: edge\n            });\n        }\n    }\n\n    // 4. Sort intersection in x-ascending order\n    intersections.sort((i1, i2) => {\n        if (LT(i1.pt.x, i2.pt.x)) {\n            return -1;\n        }\n        if (GT(i1.pt.x, i2.pt.x)) {\n            return 1;\n        }\n        return 0;\n    });\n\n    // 5. Count real intersections, exclude touching\n    let counter = 0;\n\n    for (let i = 0; i < intersections.length; i++) {\n        let intersection = intersections[i];\n        if (intersection.pt.equalTo(intersection.edge.shape.start)) {\n            /* skip same point between same edges if already counted */\n            if (i > 0 && intersection.pt.equalTo(intersections[i - 1].pt) &&\n                intersection.edge.prev === intersections[i - 1].edge) {\n                continue;\n            }\n            let prev_edge = intersection.edge.prev;\n            while (EQ_0(prev_edge.length)) {\n                prev_edge = prev_edge.prev;\n            }\n            let prev_tangent = prev_edge.shape.tangentInEnd();\n            let prev_point = intersection.pt.translate(prev_tangent);\n\n            let cur_tangent = intersection.edge.shape.tangentInStart();\n            let cur_point = intersection.pt.translate(cur_tangent);\n\n            let prev_on_the_left = prev_point.leftTo(line);\n            let cur_on_the_left = cur_point.leftTo(line);\n\n            if ((prev_on_the_left && !cur_on_the_left) || (!prev_on_the_left && cur_on_the_left)) {\n                counter++;\n            }\n        } else if (intersection.pt.equalTo(intersection.edge.shape.end)) {\n            /* skip same point between same edges if already counted */\n            if (i > 0 && intersection.pt.equalTo(intersections[i - 1].pt) &&\n                intersection.edge.next === intersections[i - 1].edge) {\n                continue;\n            }\n            let next_edge = intersection.edge.next;\n            while (EQ_0(next_edge.length)) {\n                next_edge = next_edge.next;\n            }\n            let next_tangent = next_edge.shape.tangentInStart();\n            let next_point = intersection.pt.translate(next_tangent);\n\n            let cur_tangent = intersection.edge.shape.tangentInEnd();\n            let cur_point = intersection.pt.translate(cur_tangent);\n\n            let next_on_the_left = next_point.leftTo(line);\n            let cur_on_the_left = cur_point.leftTo(line);\n\n            if ((next_on_the_left && !cur_on_the_left) || (!next_on_the_left && cur_on_the_left)) {\n                counter++;\n            }\n        } else {        /* intersection point is not a coincident with a vertex */\n            if (intersection.edge.shape instanceof Flatten.Segment) {\n                counter++;\n            } else {\n                /* Check if ray does not touch the curve in the extremal (top or bottom) point */\n                let box = intersection.edge.shape.box;\n                if (!(EQ(intersection.pt.y, box.ymin) ||\n                    EQ(intersection.pt.y, box.ymax))) {\n                    counter++;\n                }\n            }\n        }\n    }\n\n    // 6. Odd or even?\n    contains = counter % 2 == 1 ? INSIDE$2 : OUTSIDE$1;\n\n    return contains;\n}\n\n/*\n    Calculate relationship between two shapes and return result in the form of\n    Dimensionally Extended nine-Intersection Matrix (https://en.wikipedia.org/wiki/DE-9IM)\n */\n\n\n/**\n * Returns true if shapes are topologically equal:  their interiors intersect and\n * no part of the interior or boundary of one geometry intersects the exterior of the other\n * @param shape1\n * @param shape2\n * @returns {boolean}\n */\nfunction equal(shape1, shape2) {\n    return relate(shape1, shape2).equal();\n}\n\n/**\n * Returns true if shapes have at least one point in common, same as \"not disjoint\"\n * @param shape1\n * @param shape2\n * @returns {boolean}\n */\nfunction intersect(shape1, shape2) {\n    return relate(shape1, shape2).intersect();\n}\n\n/**\n * Returns true if shapes have at least one point in common, but their interiors do not intersect\n * @param shape1\n * @param shape2\n * @returns {boolean}\n */\nfunction touch(shape1, shape2) {\n    return relate(shape1, shape2).touch();\n}\n\n/**\n * Returns true if shapes have no points in common neither in interior nor in boundary\n * @param shape1\n * @param shape2\n * @returns {boolean}\n */\nfunction disjoint(shape1, shape2) {\n    return !intersect(shape1, shape2);\n}\n\n/**\n * Returns true shape1 lies in the interior of shape2\n * @param shape1\n * @param shape2\n * @returns {boolean}\n */\nfunction inside(shape1, shape2) {\n    return relate(shape1, shape2).inside();\n}\n\n/**\n * Returns true if every point in shape1 lies in the interior or on the boundary of shape2\n * @param shape1\n * @param shape2\n * @returns {boolean}\n */\nfunction covered(shape1, shape2) {\n    return  relate(shape1, shape2).covered();\n}\n\n/**\n * Returns true shape1's interior contains shape2 <br/>\n * Same as inside(shape2, shape1)\n * @param shape1\n * @param shape2\n * @returns {boolean}\n */\nfunction contain(shape1, shape2) {\n    return inside(shape2, shape1);\n}\n\n/**\n * Returns true shape1's cover shape2, same as shape2 covered by shape1\n * @param shape1\n * @param shape2\n * @returns {boolean}\n */\nfunction cover(shape1, shape2) {\n    return covered(shape2, shape1);\n}\n\n/**\n * Returns relation between two shapes as intersection 3x3 matrix, where each\n * element contains relevant intersection as array of shapes.\n * If there is no intersection, element contains empty array\n * If intersection is irrelevant it left undefined. (For example, intersection\n * between two exteriors is usually irrelevant)\n * @param shape1\n * @param shape2\n * @returns {DE9IM}\n */\nfunction relate(shape1, shape2) {\n    if (shape1 instanceof Flatten.Line && shape2 instanceof Flatten.Line) {\n        return relateLine2Line(shape1,  shape2);\n    }\n    else if (shape1 instanceof Flatten.Line && shape2 instanceof Flatten.Circle) {\n        return relateLine2Circle(shape1, shape2);\n    }\n    else if (shape1 instanceof Flatten.Line && shape2 instanceof Flatten.Box) {\n        return relateLine2Box(shape1, shape2);\n    }\n    else if ( shape1 instanceof Flatten.Line  && shape2 instanceof Flatten.Polygon) {\n        return relateLine2Polygon(shape1, shape2);\n    }\n    else if ( (shape1 instanceof Flatten.Segment || shape1 instanceof Flatten.Arc)  && shape2 instanceof Flatten.Polygon) {\n        return relateShape2Polygon(shape1, shape2);\n    }\n    else if ( (shape1 instanceof Flatten.Segment || shape1 instanceof Flatten.Arc)  &&\n        (shape2 instanceof Flatten.Circle || shape2 instanceof Flatten.Box) ) {\n        return relateShape2Polygon(shape1, new Flatten.Polygon(shape2));\n    }\n    else if (shape1 instanceof Flatten.Polygon && shape2 instanceof Flatten.Polygon) {\n        return relatePolygon2Polygon(shape1, shape2);\n    }\n    else if ((shape1 instanceof Flatten.Circle || shape1 instanceof Flatten.Box) &&\n        (shape2 instanceof  Flatten.Circle || shape2 instanceof Flatten.Box)) {\n        return relatePolygon2Polygon(new Flatten.Polygon(shape1), new Flatten.Polygon(shape2));\n    }\n    else if ((shape1 instanceof Flatten.Circle || shape1 instanceof Flatten.Box) && shape2 instanceof Flatten.Polygon) {\n        return relatePolygon2Polygon(new Flatten.Polygon(shape1), shape2);\n    }\n    else if (shape1 instanceof Flatten.Polygon && (shape2 instanceof Flatten.Circle || shape2 instanceof Flatten.Box)) {\n        return relatePolygon2Polygon(shape1, new Flatten.Polygon(shape2));\n    }\n}\n\nfunction relateLine2Line(line1, line2) {\n    let denim = new DE9IM();\n    let ip = intersectLine2Line(line1, line2);\n    if (ip.length === 0) {       // parallel or equal ?\n        if (line1.contains(line2.pt) && line2.contains(line1.pt)) {\n            denim.I2I = [line1];   // equal  'T.F...F..'  - no boundary\n            denim.I2E = [];\n            denim.E2I = [];\n        }\n        else {                     // parallel - disjoint 'FFTFF*T**'\n            denim.I2I = [];\n            denim.I2E = [line1];\n            denim.E2I = [line2];\n        }\n    }\n    else {                       // intersect   'T********'\n        denim.I2I = ip;\n        denim.I2E = line1.split(ip);\n        denim.E2I = line2.split(ip);\n    }\n    return denim;\n}\n\nfunction relateLine2Circle(line,circle) {\n    let denim = new DE9IM();\n    let ip = intersectLine2Circle(line, circle);\n    if (ip.length === 0) {\n        denim.I2I = [];\n        denim.I2B = [];\n        denim.I2E = [line];\n        denim.E2I = [circle];\n    }\n    else if (ip.length === 1) {\n        denim.I2I = [];\n        denim.I2B = ip;\n        denim.I2E = line.split(ip);\n\n        denim.E2I = [circle];\n    }\n    else {       // ip.length == 2\n        let multiline = new Multiline([line]);\n        let ip_sorted = line.sortPoints(ip);\n        multiline.split(ip_sorted);\n        let splitShapes = multiline.toShapes();\n\n        denim.I2I = [splitShapes[1]];\n        denim.I2B = ip_sorted;\n        denim.I2E = [splitShapes[0], splitShapes[2]];\n\n        denim.E2I = new Flatten.Polygon([circle.toArc()]).cut(multiline);\n    }\n\n    return denim;\n}\n\nfunction relateLine2Box(line, box) {\n    let denim = new DE9IM();\n    let ip = intersectLine2Box(line, box);\n    if (ip.length === 0) {\n        denim.I2I = [];\n        denim.I2B = [];\n        denim.I2E = [line];\n\n        denim.E2I = [box];\n    }\n    else if (ip.length === 1) {\n        denim.I2I = [];\n        denim.I2B = ip;\n        denim.I2E = line.split(ip);\n\n        denim.E2I = [box];\n    }\n    else {                     // ip.length == 2\n        let multiline = new Multiline([line]);\n        let ip_sorted = line.sortPoints(ip);\n        multiline.split(ip_sorted);\n        let splitShapes = multiline.toShapes();\n\n        /* Are two intersection points on the same segment of the box boundary ? */\n        if (box.toSegments().some( segment => segment.contains(ip[0]) && segment.contains(ip[1]) )) {\n            denim.I2I = [];                         // case of touching\n            denim.I2B = [splitShapes[1]];\n            denim.I2E = [splitShapes[0], splitShapes[2]];\n\n            denim.E2I = [box];\n        }\n        else {                                       // case of intersection\n            denim.I2I = [splitShapes[1]];            // [segment(ip[0], ip[1])];\n            denim.I2B = ip_sorted;\n            denim.I2E = [splitShapes[0], splitShapes[2]];\n\n            denim.E2I = new Flatten.Polygon(box.toSegments()).cut(multiline);\n        }\n    }\n    return denim;\n}\n\nfunction relateLine2Polygon(line, polygon) {\n    let denim = new DE9IM();\n    let ip = intersectLine2Polygon(line, polygon);\n    let multiline = new Multiline([line]);\n    let ip_sorted = ip.length > 0 ? ip.slice() : line.sortPoints(ip);\n\n    multiline.split(ip_sorted);\n\n    [...multiline].forEach(edge => edge.setInclusion(polygon));\n\n    denim.I2I = [...multiline].filter(edge => edge.bv === Flatten.INSIDE).map(edge => edge.shape);\n    denim.I2B = [...multiline].slice(1).map( (edge) => edge.bv === Flatten.BOUNDARY ? edge.shape : edge.shape.start );\n    denim.I2E = [...multiline].filter(edge => edge.bv === Flatten.OUTSIDE).map(edge => edge.shape);\n\n    denim.E2I = polygon.cut(multiline);\n\n    return denim;\n}\n\nfunction relateShape2Polygon(shape, polygon) {\n    let denim = new DE9IM();\n    let ip = intersectShape2Polygon(shape, polygon);\n    let ip_sorted = ip.length > 0 ? ip.slice() : shape.sortPoints(ip);\n\n    let multiline = new Multiline([shape]);\n    multiline.split(ip_sorted);\n\n    [...multiline].forEach(edge => edge.setInclusion(polygon));\n\n    denim.I2I = [...multiline].filter(edge => edge.bv === Flatten.INSIDE).map(edge => edge.shape);\n    denim.I2B = [...multiline].slice(1).map( (edge) => edge.bv === Flatten.BOUNDARY ? edge.shape : edge.shape.start );\n    denim.I2E = [...multiline].filter(edge => edge.bv === Flatten.OUTSIDE).map(edge => edge.shape);\n\n\n    denim.B2I = [];\n    denim.B2B = [];\n    denim.B2E = [];\n    for (let pt of [shape.start, shape.end]) {\n        switch (ray_shoot(polygon, pt)) {\n            case Flatten.INSIDE:\n                denim.B2I.push(pt);\n                break;\n            case Flatten.BOUNDARY:\n                denim.B2B.push(pt);\n                break;\n            case Flatten.OUTSIDE:\n                denim.B2E.push(pt);\n                break;\n        }\n    }\n\n    // denim.E2I  TODO: calculate, not clear what is expected result\n\n    return denim;\n}\n\nfunction relatePolygon2Polygon(polygon1, polygon2) {\n    let denim = new DE9IM();\n\n    let [ip_sorted1, ip_sorted2] = calculateIntersections(polygon1, polygon2);\n    let boolean_intersection = intersect$1(polygon1, polygon2);\n    let boolean_difference1 = subtract(polygon1, polygon2);\n    let boolean_difference2 = subtract(polygon2, polygon1);\n    let [inner_clip_shapes1, inner_clip_shapes2] = innerClip(polygon1, polygon2);\n    let outer_clip_shapes1 = outerClip(polygon1, polygon2);\n    let outer_clip_shapes2 = outerClip(polygon2, polygon1);\n\n    denim.I2I = boolean_intersection.isEmpty() ? [] : [boolean_intersection];\n    denim.I2B = inner_clip_shapes2;\n    denim.I2E = boolean_difference1.isEmpty() ? [] : [boolean_difference1];\n\n    denim.B2I = inner_clip_shapes1;\n    denim.B2B = ip_sorted1;\n    denim.B2E = outer_clip_shapes1;\n\n    denim.E2I = boolean_difference2.isEmpty() ? [] : [boolean_difference2];\n    denim.E2B = outer_clip_shapes2;\n    // denim.E2E    not relevant meanwhile\n\n    return denim;\n}\n\nvar Relations = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    contain: contain,\n    cover: cover,\n    covered: covered,\n    disjoint: disjoint,\n    equal: equal,\n    inside: inside,\n    intersect: intersect,\n    relate: relate,\n    touch: touch\n});\n\n/**\n * Class representing an affine transformation 3x3 matrix:\n * <pre>\n *      [ a  c  tx\n * A =    b  d  ty\n *        0  0  1  ]\n * </pre\n * @type {Matrix}\n */\nclass Matrix {\n    /**\n     * Construct new instance of affine transformation matrix <br/>\n     * If parameters omitted, construct identity matrix a = 1, d = 1\n     * @param {number} a - position(0,0)   sx*cos(alpha)\n     * @param {number} b - position (0,1)  sx*sin(alpha)\n     * @param {number} c - position (1,0)  -sy*sin(alpha)\n     * @param {number} d - position (1,1)  sy*cos(alpha)\n     * @param {number} tx - position (2,0) translation by x\n     * @param {number} ty - position (2,1) translation by y\n     */\n    constructor(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0) {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n        this.tx = tx;\n        this.ty = ty;\n    }\n\n    /**\n     * Return new cloned instance of matrix\n     * @return {Matrix}\n     **/\n    clone() {\n        return new Matrix(this.a, this.b, this.c, this.d, this.tx, this.ty);\n    };\n\n    /**\n     * Transform vector [x,y] using transformation matrix. <br/>\n     * Vector [x,y] is an abstract array[2] of numbers and not a FlattenJS object <br/>\n     * The result is also an abstract vector [x',y'] = A * [x,y]:\n     * <code>\n     * [x'       [ ax + by + tx\n     *  y'   =     cx + dy + ty\n     *  1]                    1 ]\n     * </code>\n     * @param {number[]} vector - array[2] of numbers\n     * @returns {number[]} transformation result - array[2] of numbers\n     */\n    transform(vector) {\n        return [\n            vector[0] * this.a + vector[1] * this.c + this.tx,\n            vector[0] * this.b + vector[1] * this.d + this.ty\n        ]\n    };\n\n    /**\n     * Returns result of multiplication of this matrix by other matrix\n     * @param {Matrix} other_matrix - matrix to multiply by\n     * @returns {Matrix}\n     */\n    multiply(other_matrix) {\n        return new Matrix(\n            this.a * other_matrix.a + this.c * other_matrix.b,\n            this.b * other_matrix.a + this.d * other_matrix.b,\n            this.a * other_matrix.c + this.c * other_matrix.d,\n            this.b * other_matrix.c + this.d * other_matrix.d,\n            this.a * other_matrix.tx + this.c * other_matrix.ty + this.tx,\n            this.b * other_matrix.tx + this.d * other_matrix.ty + this.ty\n        )\n    };\n\n    /**\n     * Return new matrix as a result of multiplication of the current matrix\n     * by the matrix(1,0,0,1,tx,ty)\n     * @param {Vector} vector - Translation by vector or\n     * @param {number} tx - translation by x-axis\n     * @param {number} ty - translation by y-axis\n     * @returns {Matrix}\n     */\n    translate(...args) {\n        let tx, ty;\n        if (args.length == 1 &&  !isNaN(args[0].x) && !isNaN(args[0].y)) {\n            tx = args[0].x;\n            ty = args[0].y;\n        } else if (args.length === 2 && typeof (args[0]) == \"number\" && typeof (args[1]) == \"number\") {\n            tx = args[0];\n            ty = args[1];\n        } else {\n            throw Errors.ILLEGAL_PARAMETERS;\n        }\n        return this.multiply(new Matrix(1, 0, 0, 1, tx, ty))\n    };\n\n    /**\n     * Return new matrix as a result of multiplication of the current matrix\n     * by the matrix that defines rotation by given angle (in radians) around\n     * center of rotation (centerX,centerY) in counterclockwise direction\n     * @param {number} angle - angle in radians\n     * @param {number} centerX - center of rotation\n     * @param {number} centerY - center of rotation\n     * @returns {Matrix}\n     */\n    rotate(angle, centerX = 0.0, centerY = 0.0) {\n        let cos = Math.cos(angle);\n        let sin = Math.sin(angle);\n        return this\n            .translate(centerX, centerY)\n            .multiply(new Matrix(cos, sin, -sin, cos, 0, 0))\n            .translate(-centerX, -centerY);\n    };\n\n    /**\n     * Return new matrix as a result of multiplication of the current matrix\n     * by the matrix (sx,0,0,sy,0,0) that defines scaling\n     * @param {number} sx\n     * @param {number} sy\n     * @returns {Matrix}\n     */\n    scale(sx, sy) {\n        return this.multiply(new Matrix(sx, 0, 0, sy, 0, 0));\n    };\n\n    /**\n     * Returns true if two matrix are equal parameter by parameter\n     * @param {Matrix} matrix - other matrix\n     * @returns {boolean} true if equal, false otherwise\n     */\n    equalTo(matrix) {\n        if (!Flatten.Utils.EQ(this.tx, matrix.tx)) return false;\n        if (!Flatten.Utils.EQ(this.ty, matrix.ty)) return false;\n        if (!Flatten.Utils.EQ(this.a, matrix.a)) return false;\n        if (!Flatten.Utils.EQ(this.b, matrix.b)) return false;\n        if (!Flatten.Utils.EQ(this.c, matrix.c)) return false;\n        if (!Flatten.Utils.EQ(this.d, matrix.d)) return false;\n        return true;\n    };\n}\nFlatten.Matrix = Matrix;\n/**\n * Function to create matrix equivalent to \"new\" constructor\n * @param args\n */\nconst matrix = (...args) => new Flatten.Matrix(...args);\nFlatten.matrix = matrix;\n\n/**\n * Created by Alex Bol on 4/1/2017.\n */\n\n/**\n * Interval is a pair of numbers or a pair of any comparable objects on which may be defined predicates\n * *equal*, *less* and method *max(p1, p1)* that returns maximum in a pair.\n * When interval is an object rather than pair of numbers, this object should have properties *low*, *high*, *max*\n * and implement methods *less_than(), equal_to(), intersect(), not_intersect(), clone(), output()*.\n * Two static methods *comparable_max(), comparable_less_than()* define how to compare values in pair. <br/>\n * This interface is described in typescript definition file *index.d.ts*\n *\n * Axis aligned rectangle is an example of such interval.\n * We may look at rectangle as an interval between its low left and top right corners.\n * See **Box** class in [flatten-js](https://github.com/alexbol99/flatten-js) library as the example\n * of Interval interface implementation\n * @type {Interval}\n */\nconst Interval = class Interval {\n    /**\n     * Accept two comparable values and creates new instance of interval\n     * Predicate Interval.comparable_less(low, high) supposed to return true on these values\n     * @param low\n     * @param high\n     */\n    constructor(low, high) {\n        this.low = low;\n        this.high = high;\n    }\n\n    /**\n     * Clone interval\n     * @returns {Interval}\n     */\n    clone() {\n        return new Interval(this.low, this.high);\n    }\n\n    /**\n     * Propery max returns clone of this interval\n     * @returns {Interval}\n     */\n    get max() {\n        return this.clone();   // this.high;\n    }\n\n    /**\n     * Predicate returns true is this interval less than other interval\n     * @param other_interval\n     * @returns {boolean}\n     */\n    less_than(other_interval) {\n        return this.low < other_interval.low ||\n            this.low == other_interval.low && this.high < other_interval.high;\n    }\n\n    /**\n     * Predicate returns true is this interval equals to other interval\n     * @param other_interval\n     * @returns {boolean}\n     */\n    equal_to(other_interval) {\n        return this.low == other_interval.low && this.high == other_interval.high;\n    }\n\n    /**\n     * Predicate returns true if this interval intersects other interval\n     * @param other_interval\n     * @returns {boolean}\n     */\n    intersect(other_interval) {\n        return !this.not_intersect(other_interval);\n    }\n\n    /**\n     * Predicate returns true if this interval does not intersect other interval\n     * @param other_interval\n     * @returns {boolean}\n     */\n    not_intersect(other_interval) {\n        return (this.high < other_interval.low || other_interval.high < this.low);\n    }\n\n    /**\n     * Returns new interval merged with other interval\n     * @param {Interval} interval - Other interval to merge with\n     * @returns {Interval}\n     */\n    merge(other_interval) {\n        return new Interval(\n            this.low === undefined ? other_interval.low : Math.min(this.low, other_interval.low),\n            this.high === undefined ? other_interval.high : Math.max(this.high, other_interval.high)\n        );\n    }\n\n    /**\n     * Returns how key should return\n     */\n    output() {\n        return [this.low, this.high];\n    }\n\n    /**\n     * Function returns maximum between two comparable values\n     * @param interval1\n     * @param interval2\n     * @returns {Interval}\n     */\n    static comparable_max(interval1, interval2) {\n        return interval1.merge(interval2);\n    }\n\n    /**\n     * Predicate returns true if first value less than second value\n     * @param val1\n     * @param val2\n     * @returns {boolean}\n     */\n    static comparable_less_than(val1, val2 ) {\n        return val1 < val2;\n    }\n};\n\n/**\n * Created by Alex Bol on 3/28/2017.\n */\n\n\n// module.exports = {\n//     RB_TREE_COLOR_RED: 0,\n//     RB_TREE_COLOR_BLACK: 1\n// };\n\nconst RB_TREE_COLOR_RED = 0;\nconst RB_TREE_COLOR_BLACK = 1;\n\n/**\n * Created by Alex Bol on 4/1/2017.\n */\n\n\nclass Node {\n    constructor(key = undefined, value = undefined,\n                left = null, right = null, parent = null, color = RB_TREE_COLOR_BLACK) {\n        this.left = left;                     // reference to left child node\n        this.right = right;                   // reference to right child node\n        this.parent = parent;                 // reference to parent node\n        this.color = color;\n\n        this.item = {key: key, value: value};   // key is supposed to be instance of Interval\n\n        /* If not, this should by an array of two numbers */\n        if (key && key instanceof Array && key.length == 2) {\n            if (!Number.isNaN(key[0]) && !Number.isNaN(key[1])) {\n                this.item.key = new Interval(Math.min(key[0], key[1]), Math.max(key[0], key[1]));\n            }\n        }\n\n        this.max = this.item.key ? this.item.key.max : undefined;\n    }\n\n    isNil() {\n        return (this.item.key === undefined && this.item.value === undefined &&\n            this.left === null && this.right === null && this.color === RB_TREE_COLOR_BLACK);\n    }\n\n    _value_less_than(other_node) {\n        return this.item.value && other_node.item.value && this.item.value.less_than ?\n            this.item.value.less_than(other_node.item.value) :\n            this.item.value < other_node.item.value;\n    }\n\n    less_than(other_node) {\n        // if tree stores only keys\n        if (this.item.value === this.item.key && other_node.item.value === other_node.item.key) {\n            return this.item.key.less_than(other_node.item.key);\n        }\n        else {    // if tree stores keys and values\n            return this.item.key.less_than(other_node.item.key) ||\n                this.item.key.equal_to((other_node.item.key)) && this._value_less_than(other_node)\n        }\n    }\n\n    _value_equal(other_node) {\n        return this.item.value && other_node.item.value && this.item.value.equal_to ?\n            this.item.value.equal_to(other_node.item.value) :\n            this.item.value == other_node.item.value;\n    }\n    equal_to(other_node) {\n        // if tree stores only keys\n        if (this.item.value === this.item.key && other_node.item.value === other_node.item.key) {\n            return this.item.key.equal_to(other_node.item.key);\n        }\n        else {    // if tree stores keys and values\n            return this.item.key.equal_to(other_node.item.key) && this._value_equal(other_node);\n        }\n    }\n\n    intersect(other_node) {\n        return this.item.key.intersect(other_node.item.key);\n    }\n\n    copy_data(other_node) {\n        this.item.key = other_node.item.key;\n        this.item.value = other_node.item.value;\n    }\n\n    update_max() {\n        // use key (Interval) max property instead of key.high\n        this.max = this.item.key ? this.item.key.max : undefined;\n        if (this.right && this.right.max) {\n            const comparable_max = this.item.key.constructor.comparable_max;  // static method\n            this.max = comparable_max(this.max, this.right.max);\n        }\n        if (this.left && this.left.max) {\n            const comparable_max = this.item.key.constructor.comparable_max;  // static method\n            this.max = comparable_max(this.max, this.left.max);\n        }\n    }\n\n    // Other_node does not intersect any node of left subtree, if this.left.max < other_node.item.key.low\n    not_intersect_left_subtree(search_node) {\n        const comparable_less_than = this.item.key.constructor.comparable_less_than;  // static method\n        let high = this.left.max.high !== undefined ? this.left.max.high : this.left.max;\n        return comparable_less_than(high, search_node.item.key.low);\n    }\n\n    // Other_node does not intersect right subtree if other_node.item.key.high < this.right.key.low\n    not_intersect_right_subtree(search_node) {\n        const comparable_less_than = this.item.key.constructor.comparable_less_than;  // static method\n        let low = this.right.max.low !== undefined ? this.right.max.low : this.right.item.key.low;\n        return comparable_less_than(search_node.item.key.high, low);\n    }\n}\n\n/**\n * Created by Alex Bol on 3/31/2017.\n */\n\n// const nil_node = new Node();\n\n/**\n * Implementation of interval binary search tree <br/>\n * Interval tree stores items which are couples of {key:interval, value: value} <br/>\n * Interval is an object with high and low properties or simply pair [low,high] of numeric values <br />\n * @type {IntervalTree}\n */\nclass IntervalTree {\n    /**\n     * Construct new empty instance of IntervalTree\n     */\n    constructor() {\n        this.root = null;\n        this.nil_node = new Node();\n    }\n\n    /**\n     * Returns number of items stored in the interval tree\n     * @returns {number}\n     */\n    get size() {\n        let count = 0;\n        this.tree_walk(this.root, () => count++);\n        return count;\n    }\n\n    /**\n     * Returns array of sorted keys in the ascending order\n     * @returns {Array}\n     */\n    get keys() {\n        let res = [];\n        this.tree_walk(this.root, (node) => res.push(\n            node.item.key.output ? node.item.key.output() : node.item.key\n        ));\n        return res;\n    }\n\n    /**\n     * Return array of values in the ascending keys order\n     * @returns {Array}\n     */\n    get values() {\n        let res = [];\n        this.tree_walk(this.root, (node) => res.push(node.item.value));\n        return res;\n    }\n\n    /**\n     * Returns array of items (<key,value> pairs) in the ascended keys order\n     * @returns {Array}\n     */\n    get items() {\n        let res = [];\n        this.tree_walk(this.root, (node) => res.push({\n            key: node.item.key.output ? node.item.key.output() : node.item.key,\n            value: node.item.value\n        }));\n        return res;\n    }\n\n    /**\n     * Returns true if tree is empty\n     * @returns {boolean}\n     */\n    isEmpty() {\n        return (this.root == null || this.root == this.nil_node);\n    }\n\n    /**\n     * Clear tree\n     */\n    clear() {\n        this.root = null;\n    }\n\n    /**\n     * Insert new item into interval tree\n     * @param {Interval} key - interval object or array of two numbers [low, high]\n     * @param {any} value - value representing any object (optional)\n     * @returns {Node} returns reference to inserted node as an object {key:interval, value: value}\n     */\n    insert(key, value = key) {\n        if (key === undefined) return;\n        let insert_node = new Node(key, value, this.nil_node, this.nil_node, null, RB_TREE_COLOR_RED);\n        this.tree_insert(insert_node);\n        this.recalc_max(insert_node);\n        return insert_node;\n    }\n\n    /**\n     * Returns true if item {key,value} exist in the tree\n     * @param {Interval} key - interval correspondent to keys stored in the tree\n     * @param {any} value - value object to be checked\n     * @returns {boolean} true if item {key, value} exist in the tree, false otherwise\n     */\n    exist(key, value = key) {\n        let search_node = new Node(key, value);\n        return this.tree_search(this.root, search_node) ? true : false;\n    }\n\n    /**\n     * Remove entry {key, value} from the tree\n     * @param {Interval} key - interval correspondent to keys stored in the tree\n     * @param {any} value - value object\n     * @returns {boolean} true if item {key, value} deleted, false if not found\n     */\n    remove(key, value = key) {\n        let search_node = new Node(key, value);\n        let delete_node = this.tree_search(this.root, search_node);\n        if (delete_node) {\n            this.tree_delete(delete_node);\n        }\n        return delete_node;\n    }\n\n    /**\n     * Returns array of entry values which keys intersect with given interval <br/>\n     * If no values stored in the tree, returns array of keys which intersect given interval\n     * @param {Interval} interval - search interval, or tuple [low, high]\n     * @param outputMapperFn(value,key) - optional function that maps (value, key) to custom output\n     * @returns {Array}\n     */\n    search(interval, outputMapperFn = (value, key) => value === key ? key.output() : value) {\n        let search_node = new Node(interval);\n        let resp_nodes = [];\n        this.tree_search_interval(this.root, search_node, resp_nodes);\n        return resp_nodes.map(node => outputMapperFn(node.item.value, node.item.key))\n    }\n\n    /**\n     * Returns true if intersection between given and any interval stored in the tree found\n     * @param {Interval} interval - search interval or tuple [low, high]\n     * @returns {boolean}\n     */\n    intersect_any(interval) {\n        let search_node = new Node(interval);\n        let found = this.tree_find_any_interval(this.root, search_node);\n        return found;\n    }\n\n    /**\n     * Tree visitor. For each node implement a callback function. <br/>\n     * Method calls a callback function with two parameters (key, value)\n     * @param visitor(key,value) - function to be called for each tree item\n     */\n    forEach(visitor) {\n        this.tree_walk(this.root, (node) => visitor(node.item.key, node.item.value));\n    }\n\n    /** Value Mapper. Walk through every node and map node value to another value\n    * @param callback(value,key) - function to be called for each tree item\n    */\n    map(callback) {\n        const tree = new IntervalTree();\n        this.tree_walk(this.root, (node) => tree.insert(node.item.key, callback(node.item.value, node.item.key)));\n        return tree;\n    }\n\n    recalc_max(node) {\n        let node_current = node;\n        while (node_current.parent != null) {\n            node_current.parent.update_max();\n            node_current = node_current.parent;\n        }\n    }\n\n    tree_insert(insert_node) {\n        let current_node = this.root;\n        let parent_node = null;\n\n        if (this.root == null || this.root == this.nil_node) {\n            this.root = insert_node;\n        }\n        else {\n            while (current_node != this.nil_node) {\n                parent_node = current_node;\n                if (insert_node.less_than(current_node)) {\n                    current_node = current_node.left;\n                }\n                else {\n                    current_node = current_node.right;\n                }\n            }\n\n            insert_node.parent = parent_node;\n\n            if (insert_node.less_than(parent_node)) {\n                parent_node.left = insert_node;\n            }\n            else {\n                parent_node.right = insert_node;\n            }\n        }\n\n        this.insert_fixup(insert_node);\n    }\n\n// After insertion insert_node may have red-colored parent, and this is a single possible violation\n// Go upwords to the root and re-color until violation will be resolved\n    insert_fixup(insert_node) {\n        let current_node;\n        let uncle_node;\n\n        current_node = insert_node;\n        while (current_node != this.root && current_node.parent.color == RB_TREE_COLOR_RED) {\n            if (current_node.parent == current_node.parent.parent.left) {   // parent is left child of grandfather\n                uncle_node = current_node.parent.parent.right;              // right brother of parent\n                if (uncle_node.color == RB_TREE_COLOR_RED) {             // Case 1. Uncle is red\n                    // re-color father and uncle into black\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\n                    uncle_node.color = RB_TREE_COLOR_BLACK;\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\n                    current_node = current_node.parent.parent;\n                }\n                else {                                                    // Case 2 & 3. Uncle is black\n                    if (current_node == current_node.parent.right) {     // Case 2. Current if right child\n                        // This case is transformed into Case 3.\n                        current_node = current_node.parent;\n                        this.rotate_left(current_node);\n                    }\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;    // Case 3. Current is left child.\n                    // Re-color father and grandfather, rotate grandfather right\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\n                    this.rotate_right(current_node.parent.parent);\n                }\n            }\n            else {                                                         // parent is right child of grandfather\n                uncle_node = current_node.parent.parent.left;              // left brother of parent\n                if (uncle_node.color == RB_TREE_COLOR_RED) {             // Case 4. Uncle is red\n                    // re-color father and uncle into black\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\n                    uncle_node.color = RB_TREE_COLOR_BLACK;\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\n                    current_node = current_node.parent.parent;\n                }\n                else {\n                    if (current_node == current_node.parent.left) {             // Case 5. Current is left child\n                        // Transform into case 6\n                        current_node = current_node.parent;\n                        this.rotate_right(current_node);\n                    }\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;    // Case 6. Current is right child.\n                    // Re-color father and grandfather, rotate grandfather left\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\n                    this.rotate_left(current_node.parent.parent);\n                }\n            }\n        }\n\n        this.root.color = RB_TREE_COLOR_BLACK;\n    }\n\n    tree_delete(delete_node) {\n        let cut_node;   // node to be cut - either delete_node or successor_node  (\"y\" from 14.4)\n        let fix_node;   // node to fix rb tree property   (\"x\" from 14.4)\n\n        if (delete_node.left == this.nil_node || delete_node.right == this.nil_node) {  // delete_node has less then 2 children\n            cut_node = delete_node;\n        }\n        else {                                                    // delete_node has 2 children\n            cut_node = this.tree_successor(delete_node);\n        }\n\n        // fix_node if single child of cut_node\n        if (cut_node.left != this.nil_node) {\n            fix_node = cut_node.left;\n        }\n        else {\n            fix_node = cut_node.right;\n        }\n\n        // remove cut_node from parent\n        /*if (fix_node != this.nil_node) {*/\n            fix_node.parent = cut_node.parent;\n        /*}*/\n\n        if (cut_node == this.root) {\n            this.root = fix_node;\n        }\n        else {\n            if (cut_node == cut_node.parent.left) {\n                cut_node.parent.left = fix_node;\n            }\n            else {\n                cut_node.parent.right = fix_node;\n            }\n            cut_node.parent.update_max();        // update max property of the parent\n        }\n\n        this.recalc_max(fix_node);              // update max property upward from fix_node to root\n\n        // COPY DATA !!!\n        // Delete_node becomes cut_node, it means that we cannot hold reference\n        // to node in outer structure and we will have to delete by key, additional search need\n        if (cut_node != delete_node) {\n            delete_node.copy_data(cut_node);\n            delete_node.update_max();           // update max property of the cut node at the new place\n            this.recalc_max(delete_node);       // update max property upward from delete_node to root\n        }\n\n        if (/*fix_node != this.nil_node && */cut_node.color == RB_TREE_COLOR_BLACK) {\n            this.delete_fixup(fix_node);\n        }\n    }\n\n    delete_fixup(fix_node) {\n        let current_node = fix_node;\n        let brother_node;\n\n        while (current_node != this.root && current_node.parent != null && current_node.color == RB_TREE_COLOR_BLACK) {\n            if (current_node == current_node.parent.left) {          // fix node is left child\n                brother_node = current_node.parent.right;\n                if (brother_node.color == RB_TREE_COLOR_RED) {   // Case 1. Brother is red\n                    brother_node.color = RB_TREE_COLOR_BLACK;         // re-color brother\n                    current_node.parent.color = RB_TREE_COLOR_RED;    // re-color father\n                    this.rotate_left(current_node.parent);\n                    brother_node = current_node.parent.right;                      // update brother\n                }\n                // Derive to cases 2..4: brother is black\n                if (brother_node.left.color == RB_TREE_COLOR_BLACK &&\n                    brother_node.right.color == RB_TREE_COLOR_BLACK) {  // case 2: both nephews black\n                    brother_node.color = RB_TREE_COLOR_RED;              // re-color brother\n                    current_node = current_node.parent;                  // continue iteration\n                }\n                else {\n                    if (brother_node.right.color == RB_TREE_COLOR_BLACK) {   // case 3: left nephew red, right nephew black\n                        brother_node.color = RB_TREE_COLOR_RED;          // re-color brother\n                        brother_node.left.color = RB_TREE_COLOR_BLACK;   // re-color nephew\n                        this.rotate_right(brother_node);\n                        brother_node = current_node.parent.right;                     // update brother\n                        // Derive to case 4: left nephew black, right nephew red\n                    }\n                    // case 4: left nephew black, right nephew red\n                    brother_node.color = current_node.parent.color;\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\n                    brother_node.right.color = RB_TREE_COLOR_BLACK;\n                    this.rotate_left(current_node.parent);\n                    current_node = this.root;                         // exit from loop\n                }\n            }\n            else {                                             // fix node is right child\n                brother_node = current_node.parent.left;\n                if (brother_node.color == RB_TREE_COLOR_RED) {   // Case 1. Brother is red\n                    brother_node.color = RB_TREE_COLOR_BLACK;         // re-color brother\n                    current_node.parent.color = RB_TREE_COLOR_RED;    // re-color father\n                    this.rotate_right(current_node.parent);\n                    brother_node = current_node.parent.left;                        // update brother\n                }\n                // Go to cases 2..4\n                if (brother_node.left.color == RB_TREE_COLOR_BLACK &&\n                    brother_node.right.color == RB_TREE_COLOR_BLACK) {   // case 2\n                    brother_node.color = RB_TREE_COLOR_RED;             // re-color brother\n                    current_node = current_node.parent;                              // continue iteration\n                }\n                else {\n                    if (brother_node.left.color == RB_TREE_COLOR_BLACK) {  // case 3: right nephew red, left nephew black\n                        brother_node.color = RB_TREE_COLOR_RED;            // re-color brother\n                        brother_node.right.color = RB_TREE_COLOR_BLACK;    // re-color nephew\n                        this.rotate_left(brother_node);\n                        brother_node = current_node.parent.left;                        // update brother\n                        // Derive to case 4: right nephew black, left nephew red\n                    }\n                    // case 4: right nephew black, left nephew red\n                    brother_node.color = current_node.parent.color;\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\n                    brother_node.left.color = RB_TREE_COLOR_BLACK;\n                    this.rotate_right(current_node.parent);\n                    current_node = this.root;                               // force exit from loop\n                }\n            }\n        }\n\n        current_node.color = RB_TREE_COLOR_BLACK;\n    }\n\n    tree_search(node, search_node) {\n        if (node == null || node == this.nil_node)\n            return undefined;\n\n        if (search_node.equal_to(node)) {\n            return node;\n        }\n        if (search_node.less_than(node)) {\n            return this.tree_search(node.left, search_node);\n        }\n        else {\n            return this.tree_search(node.right, search_node);\n        }\n    }\n\n    // Original search_interval method; container res support push() insertion\n    // Search all intervals intersecting given one\n    tree_search_interval(node, search_node, res) {\n        if (node != null && node != this.nil_node) {\n            // if (node->left != this.nil_node && node->left->max >= low) {\n            if (node.left != this.nil_node && !node.not_intersect_left_subtree(search_node)) {\n                this.tree_search_interval(node.left, search_node, res);\n            }\n            // if (low <= node->high && node->low <= high) {\n            if (node.intersect(search_node)) {\n                res.push(node);\n            }\n            // if (node->right != this.nil_node && node->low <= high) {\n            if (node.right != this.nil_node && !node.not_intersect_right_subtree(search_node)) {\n                this.tree_search_interval(node.right, search_node, res);\n            }\n        }\n    }\n\n    tree_find_any_interval(node, search_node) {\n        let found = false;\n        if (node != null && node != this.nil_node) {\n            // if (node->left != this.nil_node && node->left->max >= low) {\n            if (node.left != this.nil_node && !node.not_intersect_left_subtree(search_node)) {\n                found = this.tree_find_any_interval(node.left, search_node);\n            }\n            // if (low <= node->high && node->low <= high) {\n            if (!found) {\n                found = node.intersect(search_node);\n            }\n            // if (node->right != this.nil_node && node->low <= high) {\n            if (!found && node.right != this.nil_node && !node.not_intersect_right_subtree(search_node)) {\n                found = this.tree_find_any_interval(node.right, search_node);\n            }\n        }\n        return found;\n    }\n\n    local_minimum(node) {\n        let node_min = node;\n        while (node_min.left != null && node_min.left != this.nil_node) {\n            node_min = node_min.left;\n        }\n        return node_min;\n    }\n\n    // not in use\n    local_maximum(node) {\n        let node_max = node;\n        while (node_max.right != null && node_max.right != this.nil_node) {\n            node_max = node_max.right;\n        }\n        return node_max;\n    }\n\n    tree_successor(node) {\n        let node_successor;\n        let current_node;\n        let parent_node;\n\n        if (node.right != this.nil_node) {\n            node_successor = this.local_minimum(node.right);\n        }\n        else {\n            current_node = node;\n            parent_node = node.parent;\n            while (parent_node != null && parent_node.right == current_node) {\n                current_node = parent_node;\n                parent_node = parent_node.parent;\n            }\n            node_successor = parent_node;\n        }\n        return node_successor;\n    }\n\n    //           |            right-rotate(T,y)       |\n    //           y            ---------------.       x\n    //          / \\                                  / \\\n    //         x   c          left-rotate(T,x)      a   y\n    //        / \\             <---------------         / \\\n    //       a   b                                    b   c\n\n    rotate_left(x) {\n        let y = x.right;\n\n        x.right = y.left;           // b goes to x.right\n\n        if (y.left != this.nil_node) {\n            y.left.parent = x;     // x becomes parent of b\n        }\n        y.parent = x.parent;       // move parent\n\n        if (x == this.root) {\n            this.root = y;           // y becomes root\n        }\n        else {                        // y becomes child of x.parent\n            if (x == x.parent.left) {\n                x.parent.left = y;\n            }\n            else {\n                x.parent.right = y;\n            }\n        }\n        y.left = x;                 // x becomes left child of y\n        x.parent = y;               // and y becomes parent of x\n\n        if (x != null && x != this.nil_node) {\n            x.update_max();\n        }\n\n        y = x.parent;\n        if (y != null && y != this.nil_node) {\n            y.update_max();\n        }\n    }\n\n    rotate_right(y) {\n        let x = y.left;\n\n        y.left = x.right;           // b goes to y.left\n\n        if (x.right != this.nil_node) {\n            x.right.parent = y;        // y becomes parent of b\n        }\n        x.parent = y.parent;          // move parent\n\n        if (y == this.root) {        // x becomes root\n            this.root = x;\n        }\n        else {                        // y becomes child of x.parent\n            if (y == y.parent.left) {\n                y.parent.left = x;\n            }\n            else {\n                y.parent.right = x;\n            }\n        }\n        x.right = y;                 // y becomes right child of x\n        y.parent = x;               // and x becomes parent of y\n\n        if (y != null && y != this.nil_node) {\n            y.update_max();\n        }\n\n        x = y.parent;\n        if (x != null && x != this.nil_node) {\n            x.update_max();\n        }\n    }\n\n    tree_walk(node, action) {\n        if (node != null && node != this.nil_node) {\n            this.tree_walk(node.left, action);\n            // arr.push(node.toArray());\n            action(node);\n            this.tree_walk(node.right, action);\n        }\n    }\n\n    /* Return true if all red nodes have exactly two black child nodes */\n    testRedBlackProperty() {\n        let res = true;\n        this.tree_walk(this.root, function (node) {\n            if (node.color == RB_TREE_COLOR_RED) {\n                if (!(node.left.color == RB_TREE_COLOR_BLACK && node.right.color == RB_TREE_COLOR_BLACK)) {\n                    res = false;\n                }\n            }\n        });\n        return res;\n    }\n\n    /* Throw error if not every path from root to bottom has same black height */\n    testBlackHeightProperty(node) {\n        let height = 0;\n        let heightLeft = 0;\n        let heightRight = 0;\n        if (node.color == RB_TREE_COLOR_BLACK) {\n            height++;\n        }\n        if (node.left != this.nil_node) {\n            heightLeft = this.testBlackHeightProperty(node.left);\n        }\n        else {\n            heightLeft = 1;\n        }\n        if (node.right != this.nil_node) {\n            heightRight = this.testBlackHeightProperty(node.right);\n        }\n        else {\n            heightRight = 1;\n        }\n        if (heightLeft != heightRight) {\n            throw new Error('Red-black height property violated');\n        }\n        height += heightLeft;\n        return height;\n    };\n}\n\n/**\n * Created by Alex Bol on 3/12/2017.\n */\n\n\n/**\n * Class representing a planar set - a generic container with ability to keep and retrieve shapes and\n * perform spatial queries. Planar set is an extension of Set container, so it supports\n * Set properties and methods\n */\nclass PlanarSet extends Set {\n    /**\n     * Create new instance of PlanarSet\n     * @param shapes - array or set of geometric objects to store in planar set\n     * Each object should have a <b>box</b> property\n     */\n    constructor(shapes) {\n        super(shapes);\n        this.index = new IntervalTree();\n        this.forEach(shape => this.index.insert(shape));\n    }\n\n    /**\n     * Add new shape to planar set and to its spatial index.<br/>\n     * If shape already exist, it will not be added again.\n     * This happens with no error, it is possible to use <i>size</i> property to check if\n     * a shape was actually added.<br/>\n     * Method returns planar set object updated and may be chained\n     * @param {Shape} shape - shape to be added, should have valid <i>box</i> property\n     * @returns {PlanarSet}\n     */\n    add(shape) {\n        let size = this.size;\n        super.add(shape);\n        // size not changed - item not added, probably trying to add same item twice\n        if (this.size > size) {\n            this.index.insert(shape.box, shape);\n        }\n        return this;         // in accordance to Set.add interface\n    }\n\n    /**\n     * Delete shape from planar set. Returns true if shape was actually deleted, false otherwise\n     * @param {Shape} shape - shape to be deleted\n     * @returns {boolean}\n     */\n    delete(shape) {\n        let deleted = super.delete(shape);\n        if (deleted) {\n            this.index.remove(shape.box, shape);\n        }\n        return deleted;\n    }\n\n    /**\n     * Clear planar set\n     */\n    clear() {\n        super.clear();\n        this.index = new IntervalTree();\n    }\n\n    /**\n     * 2d range search in planar set.<br/>\n     * Returns array of all shapes in planar set which bounding box is intersected with query box\n     * @param {Box} box - query box\n     * @returns {Shapes[]}\n     */\n    search(box) {\n        let resp = this.index.search(box);\n        return resp;\n    }\n\n    /**\n     * Point location test. Returns array of shapes which contains given point\n     * @param {Point} point - query point\n     * @returns {Array}\n     */\n    hit(point) {\n        let box = new Flatten.Box(point.x - 1, point.y - 1, point.x + 1, point.y + 1);\n        let resp = this.index.search(box);\n        return resp.filter((shape) => point.on(shape));\n    }\n\n    /**\n     * Returns svg string to draw all shapes in planar set\n     * @returns {String}\n     */\n    svg() {\n        let svgcontent = [...this].reduce((acc, shape) => acc + shape.svg(), \"\");\n        return svgcontent;\n    }\n}\n\nFlatten.PlanarSet = PlanarSet;\n\n/**\n * Base class representing shape\n * Implement common methods of affine transformations\n */\nclass Shape {\n    get name() {\n        throw(Errors.CANNOT_INVOKE_ABSTRACT_METHOD);\n    }\n\n    get box() {\n        throw(Errors.CANNOT_INVOKE_ABSTRACT_METHOD);\n    }\n\n    clone() {\n        throw(Errors.CANNOT_INVOKE_ABSTRACT_METHOD);\n    }\n\n    /**\n     * Returns new shape translated by given vector.\n     * Translation vector may be also defined by a pair of numbers.\n     * @param {Vector | (number, number) } args - Translation vector\n     * or tuple of numbers\n     * @returns {Shape}\n     */\n    translate(...args) {\n        return this.transform(new Matrix().translate(...args))\n    }\n\n    /**\n     * Returns new shape rotated by given angle around given center point.\n     * If center point is omitted, rotates around zero point (0,0).\n     * Positive value of angle defines rotation in counterclockwise direction,\n     * negative angle defines rotation in clockwise direction\n     * @param {number} angle - angle in radians\n     * @param {Point} [center=(0,0)] center\n     * @returns {Shape}\n     */\n    rotate(angle, center = new Flatten.Point()) {\n        return this.transform(new Matrix().rotate(angle, center.x, center.y));\n    }\n\n    /**\n     * Return new shape with coordinates multiplied by scaling factor\n     * @param {number} sx - x-axis scaling factor\n     * @param {number} sy - y-axis scaling factor\n     * @returns {Shape}\n     */\n    scale(sx, sy) {\n        return this.transform(new Matrix().scale(sx, sy));\n    }\n\n    transform(...args) {\n        throw(Errors.CANNOT_INVOKE_ABSTRACT_METHOD);\n    }\n\n    /**\n     * This method returns an object that defines how data will be\n     * serialized when called JSON.stringify() method\n     * @returns {Object}\n     */\n    toJSON() {\n        return Object.assign({}, this, {name: this.name});\n    }\n\n    svg(attrs = {}) {\n        throw(Errors.CANNOT_INVOKE_ABSTRACT_METHOD);\n    }\n}\n\n/**\n * Created by Alex Bol on 2/18/2017.\n */\n\n\n/**\n *\n * Class representing a point\n * @type {Point}\n */\nlet Point$1 = class Point extends Shape {\n    /**\n     * Point may be constructed by two numbers, or by array of two numbers\n     * @param {number} x - x-coordinate (float number)\n     * @param {number} y - y-coordinate (float number)\n     */\n    constructor(...args) {\n        super();\n        /**\n         * x-coordinate (float number)\n         * @type {number}\n         */\n        this.x = 0;\n        /**\n         * y-coordinate (float number)\n         * @type {number}\n         */\n        this.y = 0;\n\n        if (args.length === 0) {\n            return;\n        }\n\n        if (args.length === 1 && args[0] instanceof Array && args[0].length === 2) {\n            let arr = args[0];\n            if (typeof (arr[0]) == \"number\" && typeof (arr[1]) == \"number\") {\n                this.x = arr[0];\n                this.y = arr[1];\n                return;\n            }\n        }\n\n        if (args.length === 1 && args[0] instanceof Object && args[0].name === \"point\") {\n            let {x, y} = args[0];\n            this.x = x;\n            this.y = y;\n            return;\n        }\n\n        if (args.length === 2) {\n            if (typeof (args[0]) == \"number\" && typeof (args[1]) == \"number\") {\n                this.x = args[0];\n                this.y = args[1];\n                return;\n            }\n        }\n        throw Errors.ILLEGAL_PARAMETERS;\n    }\n\n    /**\n     * Returns bounding box of a point\n     * @returns {Box}\n     */\n    get box() {\n        return new Flatten.Box(this.x, this.y, this.x, this.y);\n    }\n\n    /**\n     * Return new cloned instance of point\n     * @returns {Point}\n     */\n    clone() {\n        return new Flatten.Point(this.x, this.y);\n    }\n\n    get vertices() {\n        return [this.clone()];\n    }\n\n    /**\n     * Returns true if points are equal up to [Flatten.Utils.DP_TOL]{@link DP_TOL} tolerance\n     * @param {Point} pt Query point\n     * @returns {boolean}\n     */\n    equalTo(pt) {\n        return Flatten.Utils.EQ(this.x, pt.x) && Flatten.Utils.EQ(this.y, pt.y);\n    }\n\n    /**\n     * Defines predicate \"less than\" between points. Returns true if the point is less than query points, false otherwise <br/>\n     * By definition point1 < point2 if {point1.y < point2.y || point1.y == point2.y && point1.x < point2.x <br/>\n     * Numeric values compared with [Flatten.Utils.DP_TOL]{@link DP_TOL} tolerance\n     * @param {Point} pt Query point\n     * @returns {boolean}\n     */\n    lessThan(pt) {\n        if (Flatten.Utils.LT(this.y, pt.y))\n            return true;\n        if (Flatten.Utils.EQ(this.y, pt.y) && Flatten.Utils.LT(this.x, pt.x))\n            return true;\n        return false;\n    }\n\n    /**\n     * Return new point transformed by affine transformation matrix\n     * @param {Matrix} m - affine transformation matrix (a,b,c,d,tx,ty)\n     * @returns {Point}\n     */\n    transform(m) {\n        return new Flatten.Point(m.transform([this.x, this.y]))\n    }\n\n    /**\n     * Returns projection point on given line\n     * @param {Line} line Line this point be projected on\n     * @returns {Point}\n     */\n    projectionOn(line) {\n        if (this.equalTo(line.pt))                   // this point equal to line anchor point\n            return this.clone();\n\n        let vec = new Flatten.Vector(this, line.pt);\n        if (Flatten.Utils.EQ_0(vec.cross(line.norm)))    // vector to point from anchor point collinear to normal vector\n            return line.pt.clone();\n\n        let dist = vec.dot(line.norm);             // signed distance\n        let proj_vec = line.norm.multiply(dist);\n        return this.translate(proj_vec);\n    }\n\n    /**\n     * Returns true if point belongs to the \"left\" semi-plane, which means, point belongs to the same semi plane where line normal vector points to\n     * Return false if point belongs to the \"right\" semi-plane or to the line itself\n     * @param {Line} line Query line\n     * @returns {boolean}\n     */\n    leftTo(line) {\n        let vec = new Flatten.Vector(line.pt, this);\n        let onLeftSemiPlane = Flatten.Utils.GT(vec.dot(line.norm), 0);\n        return onLeftSemiPlane;\n    }\n\n    /**\n     * Calculate distance and shortest segment from point to shape and return as array [distance, shortest segment]\n     * @param {Shape} shape Shape of the one of supported types Point, Line, Circle, Segment, Arc, Polygon or Planar Set\n     * @returns {number} distance from point to shape\n     * @returns {Segment} shortest segment between point and shape (started at point, ended at shape)\n     */\n    distanceTo(shape) {\n        if (shape instanceof Point) {\n            let dx = shape.x - this.x;\n            let dy = shape.y - this.y;\n            return [Math.sqrt(dx * dx + dy * dy), new Flatten.Segment(this, shape)];\n        }\n\n        if (shape instanceof Flatten.Line) {\n            return Flatten.Distance.point2line(this, shape);\n        }\n\n        if (shape instanceof Flatten.Circle) {\n            return Flatten.Distance.point2circle(this, shape);\n        }\n\n        if (shape instanceof Flatten.Segment) {\n            return Flatten.Distance.point2segment(this, shape);\n        }\n\n        if (shape instanceof Flatten.Arc) {\n            return Flatten.Distance.point2arc(this, shape);\n        }\n\n        if (shape instanceof Flatten.Polygon) {\n            return Flatten.Distance.point2polygon(this, shape);\n        }\n\n        if (shape instanceof Flatten.PlanarSet) {\n            return Flatten.Distance.shape2planarSet(this, shape);\n        }\n    }\n\n    /**\n     * Returns true if point is on a shape, false otherwise\n     * @param {Shape} shape Shape of the one of supported types Point, Line, Circle, Segment, Arc, Polygon\n     * @returns {boolean}\n     */\n    on(shape) {\n        if (shape instanceof Flatten.Point) {\n            return this.equalTo(shape);\n        }\n\n        if (shape instanceof Flatten.Line) {\n            return shape.contains(this);\n        }\n\n        if (shape instanceof Flatten.Ray) {\n            return shape.contains(this)\n        }\n\n        if (shape instanceof Flatten.Circle) {\n            return shape.contains(this);\n        }\n\n        if (shape instanceof Flatten.Segment) {\n            return shape.contains(this);\n        }\n\n        if (shape instanceof Flatten.Arc) {\n            return shape.contains(this);\n        }\n\n        if (shape instanceof Flatten.Polygon) {\n            return shape.contains(this);\n        }\n    }\n\n    get name() {\n        return \"point\"\n    }\n\n    /**\n     * Return string to draw point in svg as circle with radius \"r\" <br/>\n     * Accept any valid attributes of svg elements as svg object\n     * Defaults attribues are: <br/>\n     * {\n     *    r:\"3\",\n     *    stroke:\"black\",\n     *    strokeWidth:\"1\",\n     *    fill:\"red\"\n     * }\n     * @param {Object} attrs - Any valid attributes of svg circle element, like \"r\", \"stroke\", \"strokeWidth\", \"fill\"\n     * @returns {String}\n     */\n    svg(attrs = {}) {\n        const r = attrs.r ?? 3;            // default radius - 3\n        return `\\n<circle cx=\"${this.x}\" cy=\"${this.y}\" r=\"${r}\"\n            ${convertToString({fill: \"red\", ...attrs})} />`;\n    }\n};\n\nFlatten.Point = Point$1;\n/**\n * Function to create point equivalent to \"new\" constructor\n * @param args\n */\nconst point = (...args) => new Flatten.Point(...args);\nFlatten.point = point;\n\n// export {Point};\n\n/**\n * Created by Alex Bol on 2/19/2017.\n */\n\n\n/**\n * Class representing a vector\n * @type {Vector}\n */\nlet Vector$1 = class Vector extends Shape {\n    /**\n     * Vector may be constructed by two points, or by two float numbers,\n     * or by array of two numbers\n     * @param {Point} ps - start point\n     * @param {Point} pe - end point\n     */\n    constructor(...args) {\n        super();\n        /**\n         * x-coordinate of a vector (float number)\n         * @type {number}\n         */\n        this.x = 0;\n        /**\n         * y-coordinate of a vector (float number)\n         * @type {number}\n         */\n        this.y = 0;\n\n        /* return zero vector */\n        if (args.length === 0) {\n            return;\n        }\n\n        if (args.length === 1 && args[0] instanceof Array && args[0].length === 2) {\n            let arr = args[0];\n            if (typeof (arr[0]) == \"number\" && typeof (arr[1]) == \"number\") {\n                this.x = arr[0];\n                this.y = arr[1];\n                return;\n            }\n        }\n\n        if (args.length === 1 && args[0] instanceof Object && args[0].name === \"vector\") {\n            let {x, y} = args[0];\n            this.x = x;\n            this.y = y;\n            return;\n        }\n\n        if (args.length === 2) {\n            let a1 = args[0];\n            let a2 = args[1];\n\n            if (typeof (a1) == \"number\" && typeof (a2) == \"number\") {\n                this.x = a1;\n                this.y = a2;\n                return;\n            }\n\n            if (a1 instanceof Flatten.Point && a2 instanceof Flatten.Point) {\n                this.x = a2.x - a1.x;\n                this.y = a2.y - a1.y;\n                return;\n            }\n\n        }\n\n        throw Errors.ILLEGAL_PARAMETERS;\n    }\n\n    /**\n     * Method clone returns new instance of Vector\n     * @returns {Vector}\n     */\n    clone() {\n        return new Flatten.Vector(this.x, this.y);\n    }\n\n    /**\n     * Slope of the vector in radians from 0 to 2PI\n     * @returns {number}\n     */\n    get slope() {\n        let angle = Math.atan2(this.y, this.x);\n        if (angle < 0) angle = 2 * Math.PI + angle;\n        return angle;\n    }\n\n    /**\n     * Length of vector\n     * @returns {number}\n     */\n    get length() {\n        return Math.sqrt(this.dot(this));\n    }\n\n    /**\n     * Returns true if vectors are equal up to [DP_TOL]{@link http://localhost:63342/flatten-js/docs/global.html#DP_TOL}\n     * tolerance\n     * @param {Vector} v\n     * @returns {boolean}\n     */\n    equalTo(v) {\n        return Flatten.Utils.EQ(this.x, v.x) && Flatten.Utils.EQ(this.y, v.y);\n    }\n\n    /**\n     * Returns new vector multiplied by scalar\n     * @param {number} scalar\n     * @returns {Vector}\n     */\n    multiply(scalar) {\n        return (new Flatten.Vector(scalar * this.x, scalar * this.y));\n    }\n\n    /**\n     * Returns scalar product (dot product) of two vectors <br/>\n     * <code>dot_product = (this * v)</code>\n     * @param {Vector} v Other vector\n     * @returns {number}\n     */\n    dot(v) {\n        return (this.x * v.x + this.y * v.y);\n    }\n\n    /**\n     * Returns vector product (cross product) of two vectors <br/>\n     * <code>cross_product = (this x v)</code>\n     * @param {Vector} v Other vector\n     * @returns {number}\n     */\n    cross(v) {\n        return (this.x * v.y - this.y * v.x);\n    }\n\n    /**\n     * Returns unit vector.<br/>\n     * Throw error if given vector has zero length\n     * @returns {Vector}\n     */\n    normalize() {\n        if (!Flatten.Utils.EQ_0(this.length)) {\n            return (new Flatten.Vector(this.x / this.length, this.y / this.length));\n        }\n        throw Errors.ZERO_DIVISION;\n    }\n\n    /**\n     * Returns new vector rotated by given angle,\n     * positive angle defines rotation in counterclockwise direction,\n     * negative - in clockwise direction\n     * Vector only can be rotated around (0,0) point!\n     * @param {number} angle - Angle in radians\n     * @returns {Vector}\n     */\n    rotate(angle, center = new Flatten.Point()) {\n        if (center.x === 0 && center.y === 0) {\n            return this.transform(new Matrix().rotate(angle));\n        }\n        throw(Errors.OPERATION_IS_NOT_SUPPORTED);\n    }\n\n    /**\n     * Return new vector transformed by affine transformation matrix m\n     * @param {Matrix} m - affine transformation matrix (a,b,c,d,tx,ty)\n     * @returns {Vector}\n     */\n    transform(m) {\n        return new Flatten.Vector(m.transform([this.x, this.y]))\n    }\n\n    /**\n     * Returns vector rotated 90 degrees counterclockwise\n     * @returns {Vector}\n     */\n    rotate90CCW() {\n        return new Flatten.Vector(-this.y, this.x);\n    };\n\n    /**\n     * Returns vector rotated 90 degrees clockwise\n     * @returns {Vector}\n     */\n    rotate90CW() {\n        return new Flatten.Vector(this.y, -this.x);\n    };\n\n    /**\n     * Return inverted vector\n     * @returns {Vector}\n     */\n    invert() {\n        return new Flatten.Vector(-this.x, -this.y);\n    }\n\n    /**\n     * Return result of addition of other vector to this vector as a new vector\n     * @param {Vector} v Other vector\n     * @returns {Vector}\n     */\n    add(v) {\n        return new Flatten.Vector(this.x + v.x, this.y + v.y);\n    }\n\n    /**\n     * Return result of subtraction of other vector from current vector as a new vector\n     * @param {Vector} v Another vector\n     * @returns {Vector}\n     */\n    subtract(v) {\n        return new Flatten.Vector(this.x - v.x, this.y - v.y);\n    }\n\n    /**\n     * Return angle between this vector and other vector. <br/>\n     * Angle is measured from 0 to 2*PI in the counterclockwise direction\n     * from current vector to  another.\n     * @param {Vector} v Another vector\n     * @returns {number}\n     */\n    angleTo(v) {\n        let norm1 = this.normalize();\n        let norm2 = v.normalize();\n        let angle = Math.atan2(norm1.cross(norm2), norm1.dot(norm2));\n        if (angle < 0) angle += 2 * Math.PI;\n        return angle;\n    }\n\n    /**\n     * Return vector projection of the current vector on another vector\n     * @param {Vector} v Another vector\n     * @returns {Vector}\n     */\n    projectionOn(v) {\n        let n = v.normalize();\n        let d = this.dot(n);\n        return n.multiply(d);\n    }\n\n    get name() {\n        return \"vector\"\n    }\n};\n\nFlatten.Vector = Vector$1;\n\n/**\n * Function to create vector equivalent to \"new\" constructor\n * @param args\n */\nconst vector$1 = (...args) => new Flatten.Vector(...args);\nFlatten.vector = vector$1;\n\n/**\n * Created by Alex Bol on 3/10/2017.\n */\n\n\n/**\n * Class representing a segment\n * @type {Segment}\n */\nclass Segment extends Shape {\n    /**\n     *\n     * @param {Point} ps - start point\n     * @param {Point} pe - end point\n     */\n    constructor(...args) {\n        super();\n        /**\n         * Start point\n         * @type {Point}\n         */\n        this.ps = new Flatten.Point();\n        /**\n         * End Point\n         * @type {Point}\n         */\n        this.pe = new Flatten.Point();\n\n        if (args.length === 0) {\n            return;\n        }\n\n        if (args.length === 1 && args[0] instanceof Array && args[0].length === 4) {\n            let coords = args[0];\n            this.ps = new Flatten.Point(coords[0], coords[1]);\n            this.pe = new Flatten.Point(coords[2], coords[3]);\n            return;\n        }\n\n        if (args.length === 1 && args[0] instanceof Object && args[0].name === \"segment\") {\n            let {ps, pe} = args[0];\n            this.ps = new Flatten.Point(ps.x, ps.y);\n            this.pe = new Flatten.Point(pe.x, pe.y);\n            return;\n        }\n\n        // second point omitted issue #84\n        if (args.length === 1 && args[0] instanceof Flatten.Point) {\n            this.ps = args[0].clone();\n            return;\n        }\n\n        if (args.length === 2 && args[0] instanceof Flatten.Point && args[1] instanceof Flatten.Point) {\n            this.ps = args[0].clone();\n            this.pe = args[1].clone();\n            return;\n        }\n\n        if (args.length === 4) {\n            this.ps = new Flatten.Point(args[0], args[1]);\n            this.pe = new Flatten.Point(args[2], args[3]);\n            return;\n        }\n\n        throw Errors.ILLEGAL_PARAMETERS;\n    }\n\n    /**\n     * Return new cloned instance of segment\n     * @returns {Segment}\n     */\n    clone() {\n        return new Flatten.Segment(this.start, this.end);\n    }\n\n    /**\n     * Start point\n     * @returns {Point}\n     */\n    get start() {\n        return this.ps;\n    }\n\n    /**\n     * End point\n     * @returns {Point}\n     */\n    get end() {\n        return this.pe;\n    }\n\n\n    /**\n     * Returns array of start and end point\n     * @returns [Point,Point]\n     */\n    get vertices() {\n        return [this.ps.clone(), this.pe.clone()];\n    }\n\n    /**\n     * Length of a segment\n     * @returns {number}\n     */\n    get length() {\n        return this.start.distanceTo(this.end)[0];\n    }\n\n    /**\n     * Slope of the line - angle to axe x in radians from 0 to 2PI\n     * @returns {number}\n     */\n    get slope() {\n        let vec = new Flatten.Vector(this.start, this.end);\n        return vec.slope;\n    }\n\n    /**\n     * Bounding box\n     * @returns {Box}\n     */\n    get box() {\n        return new Flatten.Box(\n            Math.min(this.start.x, this.end.x),\n            Math.min(this.start.y, this.end.y),\n            Math.max(this.start.x, this.end.x),\n            Math.max(this.start.y, this.end.y)\n        )\n    }\n\n    /**\n     * Returns true if equals to query segment, false otherwise\n     * @param {Seg} seg - query segment\n     * @returns {boolean}\n     */\n    equalTo(seg) {\n        return this.ps.equalTo(seg.ps) && this.pe.equalTo(seg.pe);\n    }\n\n    /**\n     * Returns true if segment contains point\n     * @param {Point} pt Query point\n     * @returns {boolean}\n     */\n    contains(pt) {\n        return Flatten.Utils.EQ_0(this.distanceToPoint(pt));\n    }\n\n    /**\n     * Returns array of intersection points between segment and other shape\n     * @param {Shape} shape - Shape of the one of supported types <br/>\n     * @returns {Point[]}\n     */\n    intersect(shape) {\n        if (shape instanceof Flatten.Point) {\n            return this.contains(shape) ? [shape] : [];\n        }\n\n        if (shape instanceof Flatten.Line) {\n            return intersectSegment2Line(this, shape);\n        }\n\n        if (shape instanceof Flatten.Ray) {\n            return intersectRay2Segment(shape, this);\n        }\n\n        if (shape instanceof Flatten.Segment) {\n            return  intersectSegment2Segment(this, shape);\n        }\n\n        if (shape instanceof Flatten.Circle) {\n            return intersectSegment2Circle(this, shape);\n        }\n\n        if (shape instanceof Flatten.Box) {\n            return intersectSegment2Box(this, shape);\n        }\n\n        if (shape instanceof Flatten.Arc) {\n            return intersectSegment2Arc(this, shape);\n        }\n\n        if (shape instanceof Flatten.Polygon) {\n            return  intersectSegment2Polygon(this, shape);\n        }\n    }\n\n    /**\n     * Calculate distance and shortest segment from segment to shape and return as array [distance, shortest segment]\n     * @param {Shape} shape Shape of the one of supported types Point, Line, Circle, Segment, Arc, Polygon or Planar Set\n     * @returns {number} distance from segment to shape\n     * @returns {Segment} shortest segment between segment and shape (started at segment, ended at shape)\n     */\n    distanceTo(shape) {\n        if (shape instanceof Flatten.Point) {\n            let [dist, shortest_segment] = Flatten.Distance.point2segment(shape, this);\n            shortest_segment = shortest_segment.reverse();\n            return [dist, shortest_segment];\n        }\n\n        if (shape instanceof Flatten.Circle) {\n            let [dist, shortest_segment] = Flatten.Distance.segment2circle(this, shape);\n            return [dist, shortest_segment];\n        }\n\n        if (shape instanceof Flatten.Line) {\n            let [dist, shortest_segment] = Flatten.Distance.segment2line(this, shape);\n            return [dist, shortest_segment];\n        }\n\n        if (shape instanceof Flatten.Segment) {\n            let [dist, shortest_segment] = Flatten.Distance.segment2segment(this, shape);\n            return [dist, shortest_segment];\n        }\n\n        if (shape instanceof Flatten.Arc) {\n            let [dist, shortest_segment] = Flatten.Distance.segment2arc(this, shape);\n            return [dist, shortest_segment];\n        }\n\n        if (shape instanceof Flatten.Polygon) {\n            let [dist, shortest_segment] = Flatten.Distance.shape2polygon(this, shape);\n            return [dist, shortest_segment];\n        }\n\n        if (shape instanceof Flatten.PlanarSet) {\n            let [dist, shortest_segment] = Flatten.Distance.shape2planarSet(this, shape);\n            return [dist, shortest_segment];\n        }\n    }\n\n    /**\n     * Returns unit vector in the direction from start to end\n     * @returns {Vector}\n     */\n    tangentInStart() {\n        let vec = new Flatten.Vector(this.start, this.end);\n        return vec.normalize();\n    }\n\n    /**\n     * Return unit vector in the direction from end to start\n     * @returns {Vector}\n     */\n    tangentInEnd() {\n        let vec = new Flatten.Vector(this.end, this.start);\n        return vec.normalize();\n    }\n\n    /**\n     * Returns new segment with swapped start and end points\n     * @returns {Segment}\n     */\n    reverse() {\n        return new Segment(this.end, this.start);\n    }\n\n    /**\n     * When point belongs to segment, return array of two segments split by given point,\n     * if point is inside segment. Returns clone of this segment if query point is incident\n     * to start or end point of the segment. Returns empty array if point does not belong to segment\n     * @param {Point} pt Query point\n     * @returns {Segment[]}\n     */\n    split(pt) {\n        if (this.start.equalTo(pt))\n            return [null, this.clone()];\n\n        if (this.end.equalTo(pt))\n            return [this.clone(), null];\n\n        return [\n            new Flatten.Segment(this.start, pt),\n            new Flatten.Segment(pt, this.end)\n        ]\n    }\n\n    /**\n     * Return middle point of the segment\n     * @returns {Point}\n     */\n    middle() {\n        return new Flatten.Point((this.start.x + this.end.x) / 2, (this.start.y + this.end.y) / 2);\n    }\n\n    /**\n     * Get point at given length\n     * @param {number} length - The length along the segment\n     * @returns {Point}\n     */\n    pointAtLength(length) {\n        if (length > this.length || length < 0) return null;\n        if (length == 0) return this.start;\n        if (length == this.length) return this.end;\n        let factor = length / this.length;\n        return new Flatten.Point(\n            (this.end.x - this.start.x) * factor + this.start.x,\n            (this.end.y - this.start.y) * factor + this.start.y\n        );\n    }\n\n    distanceToPoint(pt) {\n        let [dist, ...rest] = Flatten.Distance.point2segment(pt, this);\n        return dist;\n    };\n\n    definiteIntegral(ymin = 0.0) {\n        let dx = this.end.x - this.start.x;\n        let dy1 = this.start.y - ymin;\n        let dy2 = this.end.y - ymin;\n        return (dx * (dy1 + dy2) / 2);\n    }\n\n    /**\n     * Return new segment transformed using affine transformation matrix\n     * @param {Matrix} matrix - affine transformation matrix\n     * @returns {Segment} - transformed segment\n     */\n    transform(matrix = new Flatten.Matrix()) {\n        return new Segment(this.ps.transform(matrix), this.pe.transform(matrix))\n    }\n\n    /**\n     * Returns true if segment start is equal to segment end up to DP_TOL\n     * @returns {boolean}\n     */\n    isZeroLength() {\n        return this.ps.equalTo(this.pe)\n    }\n\n    /**\n     * Sort given array of points from segment start to end, assuming all points lay on the segment\n     * @param {Point[]} - array of points\n     * @returns {Point[]} new array sorted\n     */\n    sortPoints(pts) {\n        let line = new Flatten.Line(this.start, this.end);\n        return line.sortPoints(pts);\n    }\n\n    get name() {\n        return \"segment\"\n    }\n\n    /**\n     * Return string to draw segment in svg\n     * @param {Object} attrs - an object with attributes for svg path element,\n     * like \"stroke\", \"strokeWidth\" <br/>\n     * Defaults are stroke:\"black\", strokeWidth:\"1\"\n     * @returns {string}\n     */\n    svg(attrs = {}) {\n        return `\\n<line x1=\"${this.start.x}\" y1=\"${this.start.y}\" x2=\"${this.end.x}\" y2=\"${this.end.y}\" ${convertToString(attrs)} />`;\n    }\n}\n\nFlatten.Segment = Segment;\n/**\n * Shortcut method to create new segment\n */\nconst segment = (...args) => new Flatten.Segment(...args);\nFlatten.segment = segment;\n\n/**\n * Created by Alex Bol on 2/20/2017.\n */\n\nlet {vector} = Flatten;\n\n/**\n * Class representing a line\n * @type {Line}\n */\nlet Line$1 = class Line extends Shape {\n    /**\n     * Line may be constructed by point and normal vector or by two points that a line passes through\n     * @param {Point} pt - point that a line passes through\n     * @param {Vector|Point} norm - normal vector to a line or second point a line passes through\n     */\n    constructor(...args) {\n        super();\n        /**\n         * Point a line passes through\n         * @type {Point}\n         */\n        this.pt = new Flatten.Point();\n        /**\n         * Normal vector to a line <br/>\n         * Vector is normalized (length == 1)<br/>\n         * Direction of the vector is chosen to satisfy inequality norm * p >= 0\n         * @type {Vector}\n         */\n        this.norm = new Flatten.Vector(0, 1);\n\n        if (args.length === 0) {\n            return;\n        }\n\n        if (args.length === 1 && args[0] instanceof Object && args[0].name === \"line\") {\n            let {pt, norm} = args[0];\n            this.pt = new Flatten.Point(pt);\n            this.norm = new Flatten.Vector(norm);\n            return;\n        }\n\n        if (args.length === 2) {\n            let a1 = args[0];\n            let a2 = args[1];\n\n            if (a1 instanceof Flatten.Point && a2 instanceof Flatten.Point) {\n                this.pt = a1;\n                this.norm = Line.points2norm(a1, a2);\n                if (this.norm.dot(vector(this.pt.x,this.pt.y)) >= 0) {\n                    this.norm.invert();\n                }\n                return;\n            }\n\n            if (a1 instanceof Flatten.Point && a2 instanceof Flatten.Vector) {\n                if (Flatten.Utils.EQ_0(a2.x) && Flatten.Utils.EQ_0(a2.y)) {\n                    throw Errors.ILLEGAL_PARAMETERS;\n                }\n                this.pt = a1.clone();\n                this.norm = a2.clone();\n                this.norm = this.norm.normalize();\n                if (this.norm.dot(vector(this.pt.x,this.pt.y)) >= 0) {\n                    this.norm.invert();\n                }\n                return;\n            }\n\n            if (a1 instanceof Flatten.Vector && a2 instanceof Flatten.Point) {\n                if (Flatten.Utils.EQ_0(a1.x) && Flatten.Utils.EQ_0(a1.y)) {\n                    throw Errors.ILLEGAL_PARAMETERS;\n                }\n                this.pt = a2.clone();\n                this.norm = a1.clone();\n                this.norm = this.norm.normalize();\n                if (this.norm.dot(vector(this.pt.x,this.pt.y)) >= 0) {\n                    this.norm.invert();\n                }\n                return;\n            }\n        }\n\n        throw Errors.ILLEGAL_PARAMETERS;\n    }\n\n    /**\n     * Return new cloned instance of line\n     * @returns {Line}\n     */\n    clone() {\n        return new Flatten.Line(this.pt, this.norm);\n    }\n\n    /* The following methods need for implementation of Edge interface\n    /**\n     * Line has no start point\n     * @returns {undefined}\n     */\n    get start() {return undefined;}\n\n    /**\n     * Line has no end point\n     */\n    get end() {return undefined;}\n\n    /**\n     * Return positive infinity number as length\n     * @returns {number}\n     */\n    get length() {return Number.POSITIVE_INFINITY;}\n\n    /**\n     * Returns infinite box\n     * @returns {Box}\n     */\n    get box() {\n        return new Flatten.Box(\n            Number.NEGATIVE_INFINITY,\n            Number.NEGATIVE_INFINITY,\n            Number.POSITIVE_INFINITY,\n            Number.POSITIVE_INFINITY\n        )\n    }\n\n    /**\n     * Middle point is undefined\n     * @returns {undefined}\n     */\n    get middle() {return undefined}\n\n    /**\n     * Slope of the line - angle in radians between line and axe x from 0 to 2PI\n     * @returns {number} - slope of the line\n     */\n    get slope() {\n        let vec = new Flatten.Vector(this.norm.y, -this.norm.x);\n        return vec.slope;\n    }\n\n    /**\n     * Get coefficients [A,B,C] of a standard line equation in the form Ax + By = C\n     * @code [A, B, C] = line.standard\n     * @returns {number[]} - array of coefficients\n     */\n    get standard() {\n        let A = this.norm.x;\n        let B = this.norm.y;\n        let C = this.norm.dot(vector(this.pt.x, this.pt.y));\n\n        return [A, B, C];\n    }\n\n    /**\n     * Return true if parallel or incident to other line\n     * @param {Line} other_line - line to check\n     * @returns {boolean}\n     */\n    parallelTo(other_line) {\n        return Flatten.Utils.EQ_0(this.norm.cross(other_line.norm));\n    }\n\n    /**\n     * Returns true if incident to other line\n     * @param {Line} other_line - line to check\n     * @returns {boolean}\n     */\n    incidentTo(other_line) {\n        return this.parallelTo(other_line) && this.pt.on(other_line);\n    }\n\n    /**\n     * Returns true if point belongs to line\n     * @param {Point} pt Query point\n     * @returns {boolean}\n     */\n    contains(pt) {\n        if (this.pt.equalTo(pt)) {\n            return true;\n        }\n        /* Line contains point if vector to point is orthogonal to the line normal vector */\n        let vec = new Flatten.Vector(this.pt, pt);\n        return Flatten.Utils.EQ_0(this.norm.dot(vec));\n    }\n\n    /**\n     * Return coordinate of the point that lies on the line in the transformed\n     * coordinate system where center is the projection of the point(0,0) to\n     * the line and axe y is collinear to the normal vector. <br/>\n     * This method assumes that point lies on the line and does not check it\n     * @param {Point} pt - point on a line\n     * @returns {number}\n     */\n    coord(pt) {\n        return vector(pt.x, pt.y).cross(this.norm);\n    }\n\n    /**\n     * Returns array of intersection points\n     * @param {Shape} shape - shape to intersect with\n     * @returns {Point[]}\n     */\n    intersect(shape) {\n        if (shape instanceof Flatten.Point) {\n            return this.contains(shape) ? [shape] : [];\n        }\n\n        if (shape instanceof Flatten.Line) {\n            return intersectLine2Line(this, shape);\n        }\n\n        if (shape instanceof Flatten.Ray) {\n            return intersectRay2Line(shape, this);\n        }\n\n        if (shape instanceof Flatten.Circle) {\n            return intersectLine2Circle(this, shape);\n        }\n\n        if (shape instanceof Flatten.Box) {\n            return intersectLine2Box(this, shape);\n        }\n\n        if (shape instanceof Flatten.Segment) {\n            return intersectSegment2Line(shape, this);\n        }\n\n        if (shape instanceof Flatten.Arc) {\n            return intersectLine2Arc(this, shape);\n        }\n\n        if (shape instanceof Flatten.Polygon) {\n            return  intersectLine2Polygon(this, shape);\n        }\n\n    }\n\n    /**\n     * Calculate distance and shortest segment from line to shape and returns array [distance, shortest_segment]\n     * @param {Shape} shape Shape of the one of the types Point, Circle, Segment, Arc, Polygon\n     * @returns {[number, Segment]}\n     */\n    distanceTo(shape) {\n        if (shape instanceof Flatten.Point) {\n            let [distance, shortest_segment] = Flatten.Distance.point2line(shape, this);\n            shortest_segment = shortest_segment.reverse();\n            return [distance, shortest_segment];\n        }\n\n        if (shape instanceof Flatten.Circle) {\n            let [distance, shortest_segment] = Flatten.Distance.circle2line(shape, this);\n            shortest_segment = shortest_segment.reverse();\n            return [distance, shortest_segment];\n        }\n\n        if (shape instanceof Flatten.Segment) {\n            let [distance, shortest_segment] = Flatten.Distance.segment2line(shape, this);\n            return [distance, shortest_segment.reverse()];\n        }\n\n        if (shape instanceof Flatten.Arc) {\n            let [distance, shortest_segment] = Flatten.Distance.arc2line(shape, this);\n            return [distance, shortest_segment.reverse()];\n        }\n\n        if (shape instanceof Flatten.Polygon) {\n            let [distance, shortest_segment] = Flatten.Distance.shape2polygon(this, shape);\n            return [distance, shortest_segment];\n        }\n    }\n\n    /**\n     * Split line with a point or array of points and return array of shapes\n     * Assumed (but not checked) that all points lay on the line\n     * @param {Point | Point[]} pt\n     * @returns {MultilineShapes}\n     */\n    split(pt) {\n        if (pt instanceof Flatten.Point) {\n            return [new Flatten.Ray(pt, this.norm.invert()), new Flatten.Ray(pt, this.norm)]\n        }\n        else {\n            let multiline = new Flatten.Multiline([this]);\n            let sorted_points = this.sortPoints(pt);\n            multiline.split(sorted_points);\n            return multiline.toShapes();\n        }\n    }\n\n    /**\n     * Return new line rotated by angle\n     * @param {number} angle - angle in radians\n     * @param {Point} center - center of rotation\n     */\n    rotate(angle, center = new Flatten.Point()) {\n        return new Flatten.Line(\n            this.pt.rotate(angle, center),\n            this.norm.rotate(angle)\n        )\n    }\n\n    /**\n     * Return new line transformed by affine transformation matrix\n     * @param {Matrix} m - affine transformation matrix (a,b,c,d,tx,ty)\n     * @returns {Line}\n     */\n    transform(m) {\n        return new Flatten.Line(\n            this.pt.transform(m),\n            this.norm.clone()\n        )\n    }\n\n    /**\n     * Sort given array of points that lay on a line with respect to coordinate on a line\n     * The method assumes that points lay on the line and does not check this\n     * @param {Point[]} pts - array of points\n     * @returns {Point[]} new array sorted\n     */\n    sortPoints(pts) {\n        return pts.slice().sort( (pt1, pt2) => {\n            if (this.coord(pt1) < this.coord(pt2)) {\n                return -1;\n            }\n            if (this.coord(pt1) > this.coord(pt2)) {\n                return 1;\n            }\n            return 0;\n        })\n    }\n\n    get name() {\n        return \"line\"\n    }\n\n    /**\n     * Return string to draw svg segment representing line inside given box\n     * @param {Box} box Box representing drawing area\n     * @param {Object} attrs - an object with attributes of svg circle element\n     */\n    svg(box, attrs = {}) {\n        let ip = intersectLine2Box(this, box);\n        if (ip.length === 0)\n            return \"\";\n        let ps = ip[0];\n        let pe = ip.length === 2 ? ip[1] : ip.find(pt => !pt.equalTo(ps));\n        if (pe === undefined) pe = ps;\n        let segment = new Flatten.Segment(ps, pe);\n        return segment.svg(attrs);\n    }\n\n    static points2norm(pt1, pt2) {\n        if (pt1.equalTo(pt2)) {\n            throw Errors.ILLEGAL_PARAMETERS;\n        }\n        let vec = new Flatten.Vector(pt1, pt2);\n        let unit = vec.normalize();\n        return unit.rotate90CCW();\n    }\n};\n\nFlatten.Line = Line$1;\n/**\n * Function to create line equivalent to \"new\" constructor\n * @param args\n */\nconst line = (...args) => new Flatten.Line(...args);\nFlatten.line = line;\n\n/**\n * Created by Alex Bol on 3/6/2017.\n */\n\n\n/**\n * Class representing a circle\n * @type {Circle}\n */\nlet Circle$1 = class Circle extends Shape {\n    /**\n     * Class private property\n     * @type {string}\n     */\n\n    /**\n     *\n     * @param {Point} pc - circle center point\n     * @param {number} r - circle radius\n     */\n    constructor(...args) {\n        super();\n        /**\n         * Circle center\n         * @type {Point}\n         */\n        this.pc = new Flatten.Point();\n        /**\n         * Circle radius\n         * @type {number}\n         */\n        this.r = 1;\n\n        if (args.length === 1 && args[0] instanceof Object && args[0].name === \"circle\") {\n            let {pc, r} = args[0];\n            this.pc = new Flatten.Point(pc);\n            this.r = r;\n        } else {\n            let [pc, r] = [...args];\n            if (pc && pc instanceof Flatten.Point) this.pc = pc.clone();\n            if (r !== undefined) this.r = r;\n        }\n        // throw Errors.ILLEGAL_PARAMETERS;    unreachable code\n    }\n\n    /**\n     * Return new cloned instance of circle\n     * @returns {Circle}\n     */\n    clone() {\n        return new Flatten.Circle(this.pc.clone(), this.r);\n    }\n\n    /**\n     * Circle center\n     * @returns {Point}\n     */\n    get center() {\n        return this.pc;\n    }\n\n    /**\n     * Circle bounding box\n     * @returns {Box}\n     */\n    get box() {\n        return new Flatten.Box(\n            this.pc.x - this.r,\n            this.pc.y - this.r,\n            this.pc.x + this.r,\n            this.pc.y + this.r\n        );\n    }\n\n    /**\n     * Return true if circle contains shape: no point of shape lies outside of the circle\n     * @param {Shape} shape - test shape\n     * @returns {boolean}\n     */\n    contains(shape) {\n        if (shape instanceof Flatten.Point) {\n            return Flatten.Utils.LE(shape.distanceTo(this.center)[0], this.r);\n        }\n\n        if (shape instanceof Flatten.Segment) {\n            return Flatten.Utils.LE(shape.start.distanceTo(this.center)[0], this.r) &&\n                Flatten.Utils.LE(shape.end.distanceTo(this.center)[0], this.r);\n        }\n\n        if (shape instanceof Flatten.Arc) {\n            return this.intersect(shape).length === 0 &&\n                Flatten.Utils.LE(shape.start.distanceTo(this.center)[0], this.r) &&\n                Flatten.Utils.LE(shape.end.distanceTo(this.center)[0], this.r);\n        }\n\n        if (shape instanceof Flatten.Circle) {\n            return this.intersect(shape).length === 0 &&\n                Flatten.Utils.LE(shape.r, this.r) &&\n                Flatten.Utils.LE(shape.center.distanceTo(this.center)[0], this.r);\n        }\n\n        /* TODO: box, polygon */\n    }\n\n    /**\n     * Transform circle to closed arc\n     * @param {boolean} counterclockwise\n     * @returns {Arc}\n     */\n    toArc(counterclockwise = true) {\n        return new Flatten.Arc(this.center, this.r, Math.PI, -Math.PI, counterclockwise);\n    }\n\n    /**\n     * Method scale is supported only for uniform scaling of the circle with (0,0) center\n     * @param {number} sx\n     * @param {number} sy\n     * @returns {Circle}\n     */\n    scale(sx, sy) {\n        if (sx !== sy)\n            throw Errors.OPERATION_IS_NOT_SUPPORTED\n        if (!(this.pc.x === 0.0 && this.pc.y === 0.0))\n            throw Errors.OPERATION_IS_NOT_SUPPORTED\n        return new Flatten.Circle(this.pc, this.r*sx)\n    }\n\n    /**\n     * Return new circle transformed using affine transformation matrix\n     * @param {Matrix} matrix - affine transformation matrix\n     * @returns {Circle}\n     */\n    transform(matrix = new Flatten.Matrix()) {\n        return new Flatten.Circle(this.pc.transform(matrix), this.r)\n    }\n\n    /**\n     * Returns array of intersection points between circle and other shape\n     * @param {Shape} shape Shape of the one of supported types\n     * @returns {Point[]}\n     */\n    intersect(shape) {\n        if (shape instanceof Flatten.Point) {\n            return this.contains(shape) ? [shape] : [];\n        }\n        if (shape instanceof Flatten.Line) {\n            return intersectLine2Circle(shape, this);\n        }\n        if (shape instanceof Flatten.Ray) {\n            return intersectRay2Circle(shape, this);\n        }\n        if (shape instanceof Flatten.Segment) {\n            return intersectSegment2Circle(shape, this);\n        }\n\n        if (shape instanceof Flatten.Circle) {\n            return intersectCircle2Circle(shape, this);\n        }\n\n        if (shape instanceof Flatten.Box) {\n            return intersectCircle2Box(this, shape);\n        }\n\n        if (shape instanceof Flatten.Arc) {\n            return intersectArc2Circle(shape, this);\n        }\n        if (shape instanceof Flatten.Polygon) {\n            return intersectCircle2Polygon(this, shape);\n        }\n    }\n\n    /**\n     * Calculate distance and shortest segment from circle to shape and return array [distance, shortest segment]\n     * @param {Shape} shape Shape of the one of supported types Point, Line, Circle, Segment, Arc, Polygon or Planar Set\n     * @returns {number} distance from circle to shape\n     * @returns {Segment} shortest segment between circle and shape (started at circle, ended at shape)\n\n     */\n    distanceTo(shape) {\n        if (shape instanceof Flatten.Point) {\n            let [distance, shortest_segment] = Flatten.Distance.point2circle(shape, this);\n            shortest_segment = shortest_segment.reverse();\n            return [distance, shortest_segment];\n        }\n\n        if (shape instanceof Flatten.Circle) {\n            let [distance, shortest_segment] = Flatten.Distance.circle2circle(this, shape);\n            return [distance, shortest_segment];\n        }\n\n        if (shape instanceof Flatten.Line) {\n            let [distance, shortest_segment] = Flatten.Distance.circle2line(this, shape);\n            return [distance, shortest_segment];\n        }\n\n        if (shape instanceof Flatten.Segment) {\n            let [distance, shortest_segment] = Flatten.Distance.segment2circle(shape, this);\n            shortest_segment = shortest_segment.reverse();\n            return [distance, shortest_segment];\n        }\n\n        if (shape instanceof Flatten.Arc) {\n            let [distance, shortest_segment] = Flatten.Distance.arc2circle(shape, this);\n            shortest_segment = shortest_segment.reverse();\n            return [distance, shortest_segment];\n        }\n\n        if (shape instanceof Flatten.Polygon) {\n            let [distance, shortest_segment] = Flatten.Distance.shape2polygon(this, shape);\n            return [distance, shortest_segment];\n        }\n\n        if (shape instanceof Flatten.PlanarSet) {\n            let [dist, shortest_segment] = Flatten.Distance.shape2planarSet(this, shape);\n            return [dist, shortest_segment];\n        }\n    }\n\n    get name() {\n        return \"circle\"\n    }\n\n    /**\n     * Return string to draw circle in svg\n     * @param {Object} attrs - an object with attributes of svg circle element\n     * @returns {string}\n     */\n    svg(attrs = {}) {\n        return `\\n<circle cx=\"${this.pc.x}\" cy=\"${this.pc.y}\" r=\"${this.r}\"\n                ${convertToString({fill: \"none\", ...attrs})} />`;\n    }\n\n};\n\nFlatten.Circle = Circle$1;\n/**\n * Shortcut to create new circle\n * @param args\n */\nconst circle = (...args) => new Flatten.Circle(...args);\nFlatten.circle = circle;\n\n/**\n * Created by Alex Bol on 3/10/2017.\n */\n\n\n/**\n * Class representing a circular arc\n * @type {Arc}\n */\nclass Arc extends Shape {\n    /**\n     *\n     * @param {Point} pc - arc center\n     * @param {number} r - arc radius\n     * @param {number} startAngle - start angle in radians from 0 to 2*PI\n     * @param {number} endAngle - end angle in radians from 0 to 2*PI\n     * @param {boolean} counterClockwise - arc direction, true - clockwise, false - counterclockwise\n     */\n    constructor(...args) {\n        super();\n        /**\n         * Arc center\n         * @type {Point}\n         */\n        this.pc = new Flatten.Point();\n        /**\n         * Arc radius\n         * @type {number}\n         */\n        this.r = 1;\n        /**\n         * Arc start angle in radians\n         * @type {number}\n         */\n        this.startAngle = 0;\n        /**\n         * Arc end angle in radians\n         * @type {number}\n         */\n        this.endAngle = 2 * Math.PI;\n        /**\n         * Arc orientation\n         * @type {boolean}\n         */\n        this.counterClockwise = Flatten.CCW;\n\n        if (args.length === 0)\n            return;\n\n        if (args.length === 1 && args[0] instanceof Object && args[0].name === \"arc\") {\n            let {pc, r, startAngle, endAngle, counterClockwise} = args[0];\n            this.pc = new Flatten.Point(pc.x, pc.y);\n            this.r = r;\n            this.startAngle = startAngle;\n            this.endAngle = endAngle;\n            this.counterClockwise = counterClockwise;\n        } else {\n            let [pc, r, startAngle, endAngle, counterClockwise] = [...args];\n            if (pc && pc instanceof Flatten.Point) this.pc = pc.clone();\n            if (r !== undefined) this.r = r;\n            if (startAngle !== undefined) this.startAngle = startAngle;\n            if (endAngle !== undefined) this.endAngle = endAngle;\n            if (counterClockwise !== undefined) this.counterClockwise = counterClockwise;\n        }\n\n        // throw Flatten.Errors.ILLEGAL_PARAMETERS; unreachable code\n    }\n\n    /**\n     * Return new cloned instance of arc\n     * @returns {Arc}\n     */\n    clone() {\n        return new Flatten.Arc(this.pc.clone(), this.r, this.startAngle, this.endAngle, this.counterClockwise);\n    }\n\n    /**\n     * Get sweep angle in radians. Sweep angle is non-negative number from 0 to 2*PI\n     * @returns {number}\n     */\n    get sweep() {\n        if (Flatten.Utils.EQ(this.startAngle, this.endAngle))\n            return 0.0;\n        if (Flatten.Utils.EQ(Math.abs(this.startAngle - this.endAngle), Flatten.PIx2)) {\n            return Flatten.PIx2;\n        }\n        let sweep;\n        if (this.counterClockwise) {\n            sweep = Flatten.Utils.GT(this.endAngle, this.startAngle) ?\n                this.endAngle - this.startAngle : this.endAngle - this.startAngle + Flatten.PIx2;\n        } else {\n            sweep = Flatten.Utils.GT(this.startAngle, this.endAngle) ?\n                this.startAngle - this.endAngle : this.startAngle - this.endAngle + Flatten.PIx2;\n        }\n\n        if (Flatten.Utils.GT(sweep, Flatten.PIx2)) {\n            sweep -= Flatten.PIx2;\n        }\n        if (Flatten.Utils.LT(sweep, 0)) {\n            sweep += Flatten.PIx2;\n        }\n        return sweep;\n    }\n\n    /**\n     * Get start point of arc\n     * @returns {Point}\n     */\n    get start() {\n        let p0 = new Flatten.Point(this.pc.x + this.r, this.pc.y);\n        return p0.rotate(this.startAngle, this.pc);\n    }\n\n    /**\n     * Get end point of arc\n     * @returns {Point}\n     */\n    get end() {\n        let p0 = new Flatten.Point(this.pc.x + this.r, this.pc.y);\n        return p0.rotate(this.endAngle, this.pc);\n    }\n\n    /**\n     * Get center of arc\n     * @returns {Point}\n     */\n    get center() {\n        return this.pc.clone();\n    }\n\n    get vertices() {\n        return [this.start.clone(), this.end.clone()];\n    }\n\n    /**\n     * Get arc length\n     * @returns {number}\n     */\n    get length() {\n        return Math.abs(this.sweep * this.r);\n    }\n\n    /**\n     * Get bounding box of the arc\n     * @returns {Box}\n     */\n    get box() {\n        let func_arcs = this.breakToFunctional();\n        let box = func_arcs.reduce((acc, arc) => acc.merge(arc.start.box), new Flatten.Box());\n        box = box.merge(this.end.box);\n        return box;\n    }\n\n    /**\n     * Returns true if arc contains point, false otherwise\n     * @param {Point} pt - point to test\n     * @returns {boolean}\n     */\n    contains(pt) {\n        // first check if  point on circle (pc,r)\n        if (!Flatten.Utils.EQ(this.pc.distanceTo(pt)[0], this.r))\n            return false;\n\n        // point on circle\n\n        if (pt.equalTo(this.start))\n            return true;\n\n        let angle = new Flatten.Vector(this.pc, pt).slope;\n        let test_arc = new Flatten.Arc(this.pc, this.r, this.startAngle, angle, this.counterClockwise);\n        return Flatten.Utils.LE(test_arc.length, this.length);\n    }\n\n    /**\n     * When given point belongs to arc, return array of two arcs split by this point. If points is incident\n     * to start or end point of the arc, return clone of the arc. If point does not belong to the arcs, return\n     * empty array.\n     * @param {Point} pt Query point\n     * @returns {Arc[]}\n     */\n    split(pt) {\n        if (this.start.equalTo(pt))\n            return [null, this.clone()];\n\n        if (this.end.equalTo(pt))\n            return [this.clone(), null];\n\n        let angle = new Flatten.Vector(this.pc, pt).slope;\n\n        return [\n            new Flatten.Arc(this.pc, this.r, this.startAngle, angle, this.counterClockwise),\n            new Flatten.Arc(this.pc, this.r, angle, this.endAngle, this.counterClockwise)\n        ]\n    }\n\n    /**\n     * Return middle point of the arc\n     * @returns {Point}\n     */\n    middle() {\n        let endAngle = this.counterClockwise ? this.startAngle + this.sweep / 2 : this.startAngle - this.sweep / 2;\n        let arc = new Flatten.Arc(this.pc, this.r, this.startAngle, endAngle, this.counterClockwise);\n        return arc.end;\n    }\n\n    /**\n     * Get point at given length\n     * @param {number} length - The length along the arc\n     * @returns {Point}\n     */\n    pointAtLength(length) {\n        if (length > this.length || length < 0) return null;\n        if (length === 0) return this.start;\n        if (length === this.length) return this.end;\n        let factor = length / this.length;\n        let endAngle = this.counterClockwise ? this.startAngle + this.sweep * factor : this.startAngle - this.sweep * factor;\n        let arc = new Flatten.Arc(this.pc, this.r, this.startAngle, endAngle, this.counterClockwise);\n        return arc.end;\n    }\n\n    /**\n     * Returns chord height (\"sagitta\") of the arc\n     * @returns {number}\n     */\n    chordHeight() {\n        return (1.0 - Math.cos(Math.abs(this.sweep / 2.0))) * this.r;\n    }\n\n    /**\n     * Returns array of intersection points between arc and other shape\n     * @param {Shape} shape Shape of the one of supported types <br/>\n     * @returns {Point[]}\n     */\n    intersect(shape) {\n        if (shape instanceof Flatten.Point) {\n            return this.contains(shape) ? [shape] : [];\n        }\n        if (shape instanceof Flatten.Line) {\n            return intersectLine2Arc(shape, this);\n        }\n        if (shape instanceof Flatten.Ray) {\n            return intersectRay2Arc(shape, this);\n        }\n        if (shape instanceof Flatten.Circle) {\n            return intersectArc2Circle(this, shape);\n        }\n        if (shape instanceof Flatten.Segment) {\n            return intersectSegment2Arc(shape, this);\n        }\n        if (shape instanceof Flatten.Box) {\n            return intersectArc2Box(this, shape);\n        }\n        if (shape instanceof Flatten.Arc) {\n            return intersectArc2Arc(this, shape);\n        }\n        if (shape instanceof Flatten.Polygon) {\n            return intersectArc2Polygon(this, shape);\n        }\n    }\n\n    /**\n     * Calculate distance and shortest segment from arc to shape and return array [distance, shortest segment]\n     * @param {Shape} shape Shape of the one of supported types Point, Line, Circle, Segment, Arc, Polygon or Planar Set\n     * @returns {number} distance from arc to shape\n     * @returns {Segment} shortest segment between arc and shape (started at arc, ended at shape)\n\n     */\n    distanceTo(shape) {\n        if (shape instanceof Flatten.Point) {\n            let [dist, shortest_segment] = Flatten.Distance.point2arc(shape, this);\n            shortest_segment = shortest_segment.reverse();\n            return [dist, shortest_segment];\n        }\n\n        if (shape instanceof Flatten.Circle) {\n            let [dist, shortest_segment] = Flatten.Distance.arc2circle(this, shape);\n            return [dist, shortest_segment];\n        }\n\n        if (shape instanceof Flatten.Line) {\n            let [dist, shortest_segment] = Flatten.Distance.arc2line(this, shape);\n            return [dist, shortest_segment];\n        }\n\n        if (shape instanceof Flatten.Segment) {\n            let [dist, shortest_segment] = Flatten.Distance.segment2arc(shape, this);\n            shortest_segment = shortest_segment.reverse();\n            return [dist, shortest_segment];\n        }\n\n        if (shape instanceof Flatten.Arc) {\n            let [dist, shortest_segment] = Flatten.Distance.arc2arc(this, shape);\n            return [dist, shortest_segment];\n        }\n\n        if (shape instanceof Flatten.Polygon) {\n            let [dist, shortest_segment] = Flatten.Distance.shape2polygon(this, shape);\n            return [dist, shortest_segment];\n        }\n\n        if (shape instanceof Flatten.PlanarSet) {\n            let [dist, shortest_segment] = Flatten.Distance.shape2planarSet(this, shape);\n            return [dist, shortest_segment];\n        }\n    }\n\n    /**\n     * Breaks arc in extreme point 0, pi/2, pi, 3*pi/2 and returns array of sub-arcs\n     * @returns {Arc[]}\n     */\n    breakToFunctional() {\n        let func_arcs_array = [];\n        let angles = [0, Math.PI / 2, 2 * Math.PI / 2, 3 * Math.PI / 2];\n        let pts = [\n            this.pc.translate(this.r, 0),\n            this.pc.translate(0, this.r),\n            this.pc.translate(-this.r, 0),\n            this.pc.translate(0, -this.r)\n        ];\n\n        // If arc contains extreme point,\n        // create test arc started at start point and ended at this extreme point\n        let test_arcs = [];\n        for (let i = 0; i < 4; i++) {\n            if (pts[i].on(this)) {\n                test_arcs.push(new Flatten.Arc(this.pc, this.r, this.startAngle, angles[i], this.counterClockwise));\n            }\n        }\n\n        if (test_arcs.length === 0) {                  // arc does contain any extreme point\n            func_arcs_array.push(this.clone());\n        } else {                                        // arc passes extreme point\n            // sort these arcs by length\n            test_arcs.sort((arc1, arc2) => arc1.length - arc2.length);\n\n            for (let i = 0; i < test_arcs.length; i++) {\n                let prev_arc = func_arcs_array.length > 0 ? func_arcs_array[func_arcs_array.length - 1] : undefined;\n                let new_arc;\n                if (prev_arc) {\n                    new_arc = new Flatten.Arc(this.pc, this.r, prev_arc.endAngle, test_arcs[i].endAngle, this.counterClockwise);\n                } else {\n                    new_arc = new Flatten.Arc(this.pc, this.r, this.startAngle, test_arcs[i].endAngle, this.counterClockwise);\n                }\n                if (!Flatten.Utils.EQ_0(new_arc.length)) {\n                    func_arcs_array.push(new_arc.clone());\n                }\n            }\n\n            // add last sub arc\n            let prev_arc = func_arcs_array.length > 0 ? func_arcs_array[func_arcs_array.length - 1] : undefined;\n            let new_arc;\n            if (prev_arc) {\n                new_arc = new Flatten.Arc(this.pc, this.r, prev_arc.endAngle, this.endAngle, this.counterClockwise);\n            } else {\n                new_arc = new Flatten.Arc(this.pc, this.r, this.startAngle, this.endAngle, this.counterClockwise);\n            }\n            // It could be 2*PI when occasionally start = 0 and end = 2*PI but this is not valid for breakToFunctional\n            if (!Flatten.Utils.EQ_0(new_arc.length) && !Flatten.Utils.EQ(new_arc.sweep, 2*Math.PI)) {\n                func_arcs_array.push(new_arc.clone());\n            }\n        }\n        return func_arcs_array;\n    }\n\n    /**\n     * Return tangent unit vector in the start point in the direction from start to end\n     * @returns {Vector}\n     */\n    tangentInStart() {\n        let vec = new Flatten.Vector(this.pc, this.start);\n        let angle = this.counterClockwise ? Math.PI / 2. : -Math.PI / 2.;\n        return vec.rotate(angle).normalize();\n    }\n\n    /**\n     * Return tangent unit vector in the end point in the direction from end to start\n     * @returns {Vector}\n     */\n    tangentInEnd() {\n        let vec = new Flatten.Vector(this.pc, this.end);\n        let angle = this.counterClockwise ? -Math.PI / 2. : Math.PI / 2.;\n        return vec.rotate(angle).normalize();\n    }\n\n    /**\n     * Returns new arc with swapped start and end angles and reversed direction\n     * @returns {Arc}\n     */\n    reverse() {\n        return new Flatten.Arc(this.pc, this.r, this.endAngle, this.startAngle, !this.counterClockwise);\n    }\n\n    /**\n     * Return new arc transformed using affine transformation matrix <br/>\n     * @param {Matrix} matrix - affine transformation matrix\n     * @returns {Arc}\n     */\n    transform(matrix = new Flatten.Matrix()) {\n        let newStart = this.start.transform(matrix);\n        let newEnd = this.end.transform(matrix);\n        let newCenter = this.pc.transform(matrix);\n        let newDirection = this.counterClockwise;\n        if (matrix.a * matrix.d < 0) {\n          newDirection = !newDirection;\n        }\n        return Flatten.Arc.arcSE(newCenter, newStart, newEnd, newDirection);\n    }\n\n    static arcSE(center, start, end, counterClockwise) {\n        let {vector} = Flatten;\n        let startAngle = vector(center, start).slope;\n        let endAngle = vector(center, end).slope;\n        if (Flatten.Utils.EQ(startAngle, endAngle)) {\n            endAngle += 2 * Math.PI;\n            counterClockwise = true;\n        }\n        let r = vector(center, start).length;\n\n        return new Flatten.Arc(center, r, startAngle, endAngle, counterClockwise);\n    }\n\n    definiteIntegral(ymin = 0) {\n        let f_arcs = this.breakToFunctional();\n        let area = f_arcs.reduce((acc, arc) => acc + arc.circularSegmentDefiniteIntegral(ymin), 0.0);\n        return area;\n    }\n\n    circularSegmentDefiniteIntegral(ymin) {\n        let line = new Flatten.Line(this.start, this.end);\n        let onLeftSide = this.pc.leftTo(line);\n        let segment = new Flatten.Segment(this.start, this.end);\n        let areaTrapez = segment.definiteIntegral(ymin);\n        let areaCircularSegment = this.circularSegmentArea();\n        let area = onLeftSide ? areaTrapez - areaCircularSegment : areaTrapez + areaCircularSegment;\n        return area;\n    }\n\n    circularSegmentArea() {\n        return (0.5 * this.r * this.r * (this.sweep - Math.sin(this.sweep)))\n    }\n\n    /**\n     * Sort given array of points from arc start to end, assuming all points lay on the arc\n     * @param {Point[]} pts array of points\n     * @returns {Point[]} new array sorted\n     */\n    sortPoints(pts) {\n        let {vector} = Flatten;\n        return pts.slice().sort( (pt1, pt2) => {\n            let slope1 = vector(this.pc, pt1).slope;\n            let slope2 = vector(this.pc, pt2).slope;\n            if (slope1 < slope2) {\n                return -1;\n            }\n            if (slope1 > slope2) {\n                return 1;\n            }\n            return 0;\n        })\n    }\n\n    get name() {\n        return \"arc\"\n    }\n\n    /**\n     * Return string to draw arc in svg\n     * @param {Object} attrs - an object with attributes of svg path element\n     * @returns {string}\n     */\n    svg(attrs = {}) {\n        let largeArcFlag = this.sweep <= Math.PI ? \"0\" : \"1\";\n        let sweepFlag = this.counterClockwise ? \"1\" : \"0\";\n\n        if (Flatten.Utils.EQ(this.sweep, 2 * Math.PI)) {\n            let circle = new Flatten.Circle(this.pc, this.r);\n            return circle.svg(attrs);\n        } else {\n            return `\\n<path d=\"M${this.start.x},${this.start.y}\n                             A${this.r},${this.r} 0 ${largeArcFlag},${sweepFlag} ${this.end.x},${this.end.y}\"\n                    ${convertToString({fill: \"none\", ...attrs})} />`\n        }\n    }\n\n}\n\nFlatten.Arc = Arc;\n/**\n * Function to create arc equivalent to \"new\" constructor\n * @param args\n */\nconst arc = (...args) => new Flatten.Arc(...args);\nFlatten.arc = arc;\n\n/**\n * Created by Alex Bol on 3/7/2017.\n */\n\n/**\n * Class Box represents bounding box of the shape.\n * It may also represent axis-aligned rectangle\n * @type {Box}\n */\nclass Box extends Shape {\n    /**\n     *\n     * @param {number} xmin - minimal x coordinate\n     * @param {number} ymin - minimal y coordinate\n     * @param {number} xmax - maximal x coordinate\n     * @param {number} ymax - maximal y coordinate\n     */\n    constructor(xmin = undefined, ymin = undefined, xmax = undefined, ymax = undefined) {\n        super();\n        /**\n         * Minimal x coordinate\n         * @type {number}\n         */\n        this.xmin = xmin;\n        /**\n         * Minimal y coordinate\n         * @type {number}\n         */\n        this.ymin = ymin;\n        /**\n         * Maximal x coordinate\n         * @type {number}\n         */\n        this.xmax = xmax;\n        /**\n         * Maximal y coordinate\n         * @type {number}\n         */\n        this.ymax = ymax;\n    }\n\n    /**\n     * Return new cloned instance of box\n     * @returns {Box}\n     */\n    clone() {\n        return new Box(this.xmin, this.ymin, this.xmax, this.ymax);\n    }\n\n    /**\n     * Property low need for interval tree interface\n     * @returns {Point}\n     */\n    get low() {\n        return new Flatten.Point(this.xmin, this.ymin);\n    }\n\n    /**\n     * Property high need for interval tree interface\n     * @returns {Point}\n     */\n    get high() {\n        return new Flatten.Point(this.xmax, this.ymax);\n    }\n\n    /**\n     * Property max returns the box itself !\n     * @returns {Box}\n     */\n    get max() {\n        return this.clone();\n    }\n    \n    /**\n     * Return center of the box\n     * @returns {Point}\n     */\n    get center() {\n        return new Flatten.Point((this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2);\n    }\n\n    /**\n     * Return the width of the box\n     * @returns {number}\n     */\n    get width() {\n        return Math.abs(this.xmax - this.xmin);\n    }\n\n    /**\n     * Return the height of the box\n     * @returns {number}\n     */\n    get height() {\n        return Math.abs(this.ymax - this.ymin);\n    }\n    \n    /**\n     * Return property box like all other shapes\n     * @returns {Box}\n     */\n    get box() {\n        return this.clone();\n    }\n\n    /**\n     * Returns true if not intersected with other box\n     * @param {Box} other_box - other box to test\n     * @returns {boolean}\n     */\n    not_intersect(other_box) {\n        return (\n            this.xmax < other_box.xmin ||\n            this.xmin > other_box.xmax ||\n            this.ymax < other_box.ymin ||\n            this.ymin > other_box.ymax\n        );\n    }\n\n    /**\n     * Returns true if intersected with other box\n     * @param {Box} other_box - Query box\n     * @returns {boolean}\n     */\n    intersect(other_box) {\n        return !this.not_intersect(other_box);\n    }\n\n    /**\n     * Returns new box merged with other box\n     * @param {Box} other_box - Other box to merge with\n     * @returns {Box}\n     */\n    merge(other_box) {\n        return new Box(\n            this.xmin === undefined ? other_box.xmin : Math.min(this.xmin, other_box.xmin),\n            this.ymin === undefined ? other_box.ymin : Math.min(this.ymin, other_box.ymin),\n            this.xmax === undefined ? other_box.xmax : Math.max(this.xmax, other_box.xmax),\n            this.ymax === undefined ? other_box.ymax : Math.max(this.ymax, other_box.ymax)\n        );\n    }\n\n    /**\n     * Defines predicate \"less than\" between two boxes. Need for interval index\n     * @param {Box} other_box - other box\n     * @returns {boolean} - true if this box less than other box, false otherwise\n     */\n    less_than(other_box) {\n        if (this.low.lessThan(other_box.low))\n            return true;\n        if (this.low.equalTo(other_box.low) && this.high.lessThan(other_box.high))\n            return true;\n        return false;\n    }\n\n    /**\n     * Returns true if this box is equal to other box, false otherwise\n     * @param {Box} other_box - query box\n     * @returns {boolean}\n     */\n    equal_to(other_box) {\n        return (this.low.equalTo(other_box.low) && this.high.equalTo(other_box.high));\n    }\n\n    output() {\n        return this.clone();\n    }\n\n    static comparable_max(box1, box2) {\n        // return pt1.lessThan(pt2) ? pt2.clone() : pt1.clone();\n        return box1.merge(box2);\n    }\n\n    static comparable_less_than(pt1, pt2) {\n        return pt1.lessThan(pt2);\n    }\n\n    /**\n     * Set new values to the box object\n     * @param {number} xmin - mininal x coordinate\n     * @param {number} ymin - minimal y coordinate\n     * @param {number} xmax - maximal x coordinate\n     * @param {number} ymax - maximal y coordinate\n     */\n    set(xmin, ymin, xmax, ymax) {\n        this.xmin = xmin;\n        this.ymin = ymin;\n        this.xmax = xmax;\n        this.ymax = ymax;\n    }\n\n    /**\n     * Transform box into array of points from low left corner in counterclockwise\n     * @returns {Point[]}\n     */\n    toPoints() {\n        return [\n            new Flatten.Point(this.xmin, this.ymin),\n            new Flatten.Point(this.xmax, this.ymin),\n            new Flatten.Point(this.xmax, this.ymax),\n            new Flatten.Point(this.xmin, this.ymax)\n        ];\n    }\n\n    /**\n     * Transform box into array of segments from low left corner in counterclockwise\n     * @returns {Segment[]}\n     */\n    toSegments() {\n        let pts = this.toPoints();\n        return [\n            new Flatten.Segment(pts[0], pts[1]),\n            new Flatten.Segment(pts[1], pts[2]),\n            new Flatten.Segment(pts[2], pts[3]),\n            new Flatten.Segment(pts[3], pts[0])\n        ];\n    }\n\n    /**\n     * Box rotation is not supported\n     * Attempt to rotate box throws error\n     * @param {number} angle - angle in radians\n     * @param {Point} [center=(0,0)] center\n     */\n    rotate(angle, center = new Flatten.Point()) {\n            throw Errors.OPERATION_IS_NOT_SUPPORTED\n    }\n\n    /**\n     * Return new box transformed using affine transformation matrix\n     * New box is a bounding box of transformed corner points\n     * @param {Matrix} m - affine transformation matrix\n     * @returns {Box}\n     */\n    transform(m = new Flatten.Matrix()) {\n        const transformed_points = this.toPoints().map(pt => pt.transform(m));\n        return transformed_points.reduce(\n            (new_box, pt) => new_box.merge(pt.box), new Box())\n    }\n\n    get name() {\n        return \"box\"\n    }\n\n    /**\n     * Return string to draw box in svg\n     * @param {Object} attrs - an object with attributes of svg rectangle element\n     * @returns {string}\n     */\n    svg(attrs = {}) {\n        const width = this.xmax - this.xmin;\n        const height = this.ymax - this.ymin;\n        return `\\n<rect x=\"${this.xmin}\" y=\"${this.ymin}\" width=${width} height=${height}\n                ${convertToString({fill: \"none\", ...attrs})} />`;\n    };\n}\n\nFlatten.Box = Box;\n/**\n * Shortcut to create new box\n * @param args\n * @returns {Box}\n */\nconst box = (...args) => new Flatten.Box(...args);\nFlatten.box = box;\n\n/**\n * Created by Alex Bol on 3/17/2017.\n */\n\n\n/**\n * Class representing an edge of polygon. Edge shape may be Segment or Arc.\n * Each edge contains references to the next and previous edges in the face of the polygon.\n *\n * @type {Edge}\n */\nclass Edge {\n    /**\n     * Construct new instance of edge\n     * @param {Shape} shape Shape of type Segment or Arc\n     */\n    constructor(shape) {\n        /**\n         * Shape of the edge: Segment or Arc\n         * @type {Segment|Arc}\n         */\n        this.shape = shape;\n        /**\n         * Pointer to the next edge in the face\n         * @type {Edge}\n         */\n        this.next = undefined;\n        /**\n         * Pointer to the previous edge in the face\n         * @type {Edge}\n         */\n        this.prev = undefined;\n        /**\n         * Pointer to the face containing this edge\n         * @type {Face}\n         */\n        this.face = undefined;\n        /**\n         * \"Arc distance\" from the face start\n         * @type {number}\n         */\n        this.arc_length = 0;\n        /**\n         * Start inclusion flag (inside/outside/boundary)\n         * @type {*}\n         */\n        this.bvStart = undefined;\n        /**\n         * End inclusion flag (inside/outside/boundary)\n         * @type {*}\n         */\n        this.bvEnd = undefined;\n        /**\n         * Edge inclusion flag (Flatten.INSIDE, Flatten.OUTSIDE, Flatten.BOUNDARY)\n         * @type {*}\n         */\n        this.bv = undefined;\n        /**\n         * Overlap flag for boundary edge (Flatten.OVERLAP_SAME/Flatten.OVERLAP_OPPOSITE)\n         * @type {*}\n         */\n        this.overlap = undefined;\n    }\n\n    /**\n     * Get edge start point\n     */\n    get start() {\n        return this.shape.start;\n    }\n\n    /**\n     * Get edge end point\n     */\n    get end() {\n        return this.shape.end;\n    }\n\n    /**\n     * Get edge length\n     */\n    get length() {\n        return this.shape.length;\n    }\n\n    /**\n     * Get bounding box of the edge\n     * @returns {Box}\n     */\n    get box() {\n        return this.shape.box;\n    }\n\n    isSegment() {\n        return this.shape instanceof Flatten.Segment;\n    }\n\n    isArc() {\n        return this.shape instanceof Flatten.Arc;\n    }\n\n    /**\n     * Get middle point of the edge\n     * @returns {Point}\n     */\n    middle() {\n        return this.shape.middle();\n    }\n\n    /**\n     * Get point at given length\n     * @param {number} length - The length along the edge\n     * @returns {Point}\n     */\n    pointAtLength(length) {\n        return this.shape.pointAtLength(length);\n    }\n\n    /**\n     * Returns true if point belongs to the edge, false otherwise\n     * @param {Point} pt - test point\n     */\n    contains(pt) {\n        return this.shape.contains(pt);\n    }\n\n    /**\n     * Set inclusion flag of the edge with respect to another polygon\n     * Inclusion flag is one of Flatten.INSIDE, Flatten.OUTSIDE, Flatten.BOUNDARY\n     * @param polygon\n     */\n    setInclusion(polygon) {\n        if (this.bv !== undefined) return this.bv;\n\n        if (this.shape instanceof Flatten.Line || this.shape instanceof Flatten.Ray) {\n            this.bv = Flatten.OUTSIDE;\n            return this.bv;\n        }\n\n        if (this.bvStart === undefined) {\n            this.bvStart = ray_shoot(polygon, this.start);\n        }\n        if (this.bvEnd === undefined) {\n            this.bvEnd = ray_shoot(polygon, this.end);\n        }\n        /* At least one end outside - the whole edge outside */\n        if (this.bvStart === Flatten.OUTSIDE || this.bvEnd == Flatten.OUTSIDE) {\n            this.bv = Flatten.OUTSIDE;\n        }\n        /* At least one end inside - the whole edge inside */\n        else if (this.bvStart === Flatten.INSIDE || this.bvEnd == Flatten.INSIDE) {\n            this.bv = Flatten.INSIDE;\n        }\n        /* Both are boundary - check the middle point */\n        else {\n            let bvMiddle = ray_shoot(polygon, this.middle());\n            // let boundary = this.middle().distanceTo(polygon)[0] < 10*Flatten.DP_TOL;\n            // let bvMiddle = boundary ? Flatten.BOUNDARY : ray_shoot(polygon, this.middle());\n            this.bv = bvMiddle;\n        }\n        return this.bv;\n    }\n\n    /**\n     * Set overlapping between two coincident boundary edges\n     * Overlapping flag is one of Flatten.OVERLAP_SAME or Flatten.OVERLAP_OPPOSITE\n     * @param edge\n     */\n    setOverlap(edge) {\n        let flag = undefined;\n        let shape1 = this.shape;\n        let shape2 = edge.shape;\n\n        if (shape1 instanceof Flatten.Segment && shape2 instanceof Flatten.Segment) {\n            if (shape1.start.equalTo(shape2.start) && shape1.end.equalTo(shape2.end)) {\n                flag = Flatten.OVERLAP_SAME;\n            } else if (shape1.start.equalTo(shape2.end) && shape1.end.equalTo(shape2.start)) {\n                flag = Flatten.OVERLAP_OPPOSITE;\n            }\n        } else if (shape1 instanceof Flatten.Arc && shape2 instanceof Flatten.Arc) {\n            if (shape1.start.equalTo(shape2.start) && shape1.end.equalTo(shape2.end) && /*shape1.counterClockwise === shape2.counterClockwise &&*/\n                shape1.middle().equalTo(shape2.middle())) {\n                flag = Flatten.OVERLAP_SAME;\n            } else if (shape1.start.equalTo(shape2.end) && shape1.end.equalTo(shape2.start) && /*shape1.counterClockwise !== shape2.counterClockwise &&*/\n                shape1.middle().equalTo(shape2.middle())) {\n                flag = Flatten.OVERLAP_OPPOSITE;\n            }\n        } else if (shape1 instanceof Flatten.Segment && shape2 instanceof Flatten.Arc ||\n            shape1 instanceof Flatten.Arc && shape2 instanceof Flatten.Segment) {\n            if (shape1.start.equalTo(shape2.start) && shape1.end.equalTo(shape2.end) && shape1.middle().equalTo(shape2.middle())) {\n                flag = Flatten.OVERLAP_SAME;\n            } else if (shape1.start.equalTo(shape2.end) && shape1.end.equalTo(shape2.start) && shape1.middle().equalTo(shape2.middle())) {\n                flag = Flatten.OVERLAP_OPPOSITE;\n            }\n        }\n\n        /* Do not update overlap flag if already set on previous chain */\n        if (this.overlap === undefined) this.overlap = flag;\n        if (edge.overlap === undefined) edge.overlap = flag;\n    }\n\n    svg() {\n        if (this.shape instanceof Flatten.Segment) {\n            return ` L${this.shape.end.x},${this.shape.end.y}`;\n        } else if (this.shape instanceof Flatten.Arc) {\n            let arc = this.shape;\n            let largeArcFlag;\n            let sweepFlag = arc.counterClockwise ? \"1\" : \"0\";\n\n            // Draw full circe arc as special case: split it into two half-circles\n            if (Flatten.Utils.EQ(arc.sweep, 2 * Math.PI)) {\n                let sign = arc.counterClockwise ? 1 : -1;\n                let halfArc1 = new Flatten.Arc(arc.pc, arc.r, arc.startAngle, arc.startAngle + sign * Math.PI, arc.counterClockwise);\n                let halfArc2 = new Flatten.Arc(arc.pc, arc.r, arc.startAngle + sign * Math.PI, arc.endAngle, arc.counterClockwise);\n\n                largeArcFlag = \"0\";\n\n                return ` A${halfArc1.r},${halfArc1.r} 0 ${largeArcFlag},${sweepFlag} ${halfArc1.end.x},${halfArc1.end.y}\n                    A${halfArc2.r},${halfArc2.r} 0 ${largeArcFlag},${sweepFlag} ${halfArc2.end.x},${halfArc2.end.y}`\n            } else {\n                largeArcFlag = arc.sweep <= Math.PI ? \"0\" : \"1\";\n\n                return ` A${arc.r},${arc.r} 0 ${largeArcFlag},${sweepFlag} ${arc.end.x},${arc.end.y}`;\n            }\n        }\n    }\n\n    toJSON() {\n        return this.shape.toJSON();\n    }\n}\nFlatten.Edge = Edge;\n\n/**\n * Class implements circular bidirectional linked list <br/>\n * LinkedListElement - object of any type that has properties next and prev.\n */\nclass CircularLinkedList extends LinkedList {\n    constructor(first, last) {\n        super(first, last);\n        this.setCircularLinks();\n    }\n\n    setCircularLinks() {\n        if (this.isEmpty()) return;\n        this.last.next = this.first;\n        this.first.prev = this.last;\n    }\n\n    [Symbol.iterator]() {\n        let element = undefined;\n        return {\n            next: () => {\n                let value = element ? element : this.first;\n                let done = this.first ? (element ? element === this.first : false) : true;\n                element = value ? value.next : undefined;\n                return {value: value, done: done};\n            }\n        };\n    };\n\n    /**\n     * Append new element to the end of the list\n     * @param {LinkedListElement} element - new element to be appended\n     * @returns {CircularLinkedList}\n     */\n    append(element) {\n        super.append(element);\n        this.setCircularLinks();\n        return this;\n    }\n\n    /**\n     * Insert new element to the list after elementBefore\n     * @param {LinkedListElement} newElement - new element to be inserted\n     * @param {LinkedListElement} elementBefore - element in the list to insert after it\n     * @returns {CircularLinkedList}\n     */\n    insert(newElement, elementBefore) {\n        super.insert(newElement, elementBefore);\n        this.setCircularLinks();\n        return this;\n    }\n\n    /**\n     * Remove element from the list\n     * @param {LinkedListElement} element - element to be removed from the list\n     * @returns {CircularLinkedList}\n     */\n    remove(element) {\n        super.remove(element);\n        // this.setCircularLinks();\n        return this;\n    }\n}\n\n/**\n * Created by Alex Bol on 3/17/2017.\n */\n\n\n/**\n * Class representing a face (closed loop) in a [polygon]{@link Flatten.Polygon} object.\n * Face is a circular bidirectional linked list of [edges]{@link Flatten.Edge}.\n * Face object cannot be instantiated with a constructor.\n * Instead, use [polygon.addFace()]{@link Flatten.Polygon#addFace} method.\n * <br/>\n * Note, that face only set entry point to the linked list of edges but does not contain edges by itself.\n * Container of edges is a property of the polygon object. <br/>\n *\n * @example\n * // Face implements \"next\" iterator which enables to iterate edges in for loop:\n * for (let edge of face) {\n *      console.log(edge.shape.length)     // do something\n * }\n *\n * // Instead, it is possible to iterate edges as linked list, starting from face.first:\n * let edge = face.first;\n * do {\n *   console.log(edge.shape.length);   // do something\n *   edge = edge.next;\n * } while (edge != face.first)\n */\nclass Face extends CircularLinkedList {\n    constructor(polygon, ...args) {\n        super();            // construct empty list of edges\n        /**\n         * Reference to the first edge in face\n         */\n        // this.first;\n        /**\n         * Reference to the last edge in face\n         */\n        // this.last;\n\n        this._box = undefined;  // new Box();\n        this._orientation = undefined;\n\n        if (args.length === 0) {\n            return;\n        }\n\n        /* If passed an array it supposed to be:\n         1) array of shapes that performs close loop or\n         2) array of points that performs set of vertices\n         */\n        if (args.length === 1) {\n            if (args[0] instanceof Array) {\n                // let argsArray = args[0];\n                let shapes = args[0];  // argsArray[0];\n                if (shapes.length === 0)\n                    return;\n\n                /* array of Flatten.Points */\n                if (shapes.every((shape) => {return shape instanceof Flatten.Point})) {\n                    let segments = Face.points2segments(shapes);\n                    this.shapes2face(polygon.edges, segments);\n                }\n                /* array of points as pairs of numbers */\n                else if (shapes.every((shape) => {return shape instanceof Array && shape.length === 2})) {\n                    let points = shapes.map((shape) => new Flatten.Point(shape[0],shape[1]));\n                    let segments = Face.points2segments(points);\n                    this.shapes2face(polygon.edges, segments);\n                }\n                /* array of segments ot arcs */\n                else if (shapes.every((shape) => {\n                    return (shape instanceof Flatten.Segment || shape instanceof Flatten.Arc)\n                })) {\n                    this.shapes2face(polygon.edges, shapes);\n                }\n                // this is from JSON.parse object\n                else if (shapes.every((shape) => {\n                    return (shape.name === \"segment\" || shape.name === \"arc\")\n                })) {\n                    let flattenShapes = [];\n                    for (let shape of shapes) {\n                        let flattenShape;\n                        if (shape.name === \"segment\") {\n                            flattenShape = new Flatten.Segment(shape);\n                        } else {\n                            flattenShape = new Flatten.Arc(shape);\n                        }\n                        flattenShapes.push(flattenShape);\n                    }\n                    this.shapes2face(polygon.edges, flattenShapes);\n                }\n            }\n            /* Create new face and copy edges into polygon.edges set */\n            else if (args[0] instanceof Face) {\n                let face = args[0];\n                this.first = face.first;\n                this.last = face.last;\n                for (let edge of face) {\n                    polygon.edges.add(edge);\n                }\n            }\n            /* Instantiate face from a circle in CCW orientation */\n            else if (args[0] instanceof Flatten.Circle) {\n                this.shapes2face(polygon.edges, [args[0].toArc(CCW)]);\n            }\n            /* Instantiate face from a box in CCW orientation */\n            else if (args[0] instanceof Flatten.Box) {\n                let box = args[0];\n                this.shapes2face(polygon.edges, [\n                    new Flatten.Segment(new Flatten.Point(box.xmin, box.ymin), new Flatten.Point(box.xmax, box.ymin)),\n                    new Flatten.Segment(new Flatten.Point(box.xmax, box.ymin), new Flatten.Point(box.xmax, box.ymax)),\n                    new Flatten.Segment(new Flatten.Point(box.xmax, box.ymax), new Flatten.Point(box.xmin, box.ymax)),\n                    new Flatten.Segment(new Flatten.Point(box.xmin, box.ymax), new Flatten.Point(box.xmin, box.ymin))\n                ]);\n            }\n        }\n        /* If passed two edges, consider them as start and end of the face loop */\n        /* THIS METHOD WILL BE USED BY BOOLEAN OPERATIONS */\n        /* Assume that edges already copied to polygon.edges set in the clip algorithm !!! */\n        if (args.length === 2 && args[0] instanceof Flatten.Edge && args[1] instanceof Flatten.Edge) {\n            this.first = args[0];                          // first edge in face or undefined\n            this.last = args[1];                           // last edge in face or undefined\n            this.last.next = this.first;\n            this.first.prev = this.last;\n\n            // set arc length\n            this.setArcLength();\n\n            // this.box = this.getBox();\n            // this.orientation = this.getOrientation();      // face direction cw or ccw\n        }\n    }\n\n    /**\n     * Return array of edges from first to last\n     * @returns {Array}\n     */\n    get edges() {\n        return this.toArray();\n    }\n\n    /**\n     * Return array of shapes which comprise face\n     * @returns {Array}\n     */\n    get shapes() {\n        return this.edges.map(edge => edge.shape.clone());\n    }\n\n    /**\n     * Return bounding box of the face\n     * @returns {Box}\n     */\n    get box() {\n        if (this._box === undefined) {\n            let box = new Flatten.Box();\n            for (let edge of this) {\n                box = box.merge(edge.box);\n            }\n            this._box = box;\n        }\n        return this._box;\n    }\n\n    /**\n     * Get all edges length\n     * @returns {number}\n     */\n    get perimeter() {\n        return this.last.arc_length + this.last.length\n    }\n\n    /**\n     * Get point on face boundary at given length\n     * @param {number} length - The length along the face boundary\n     * @returns {Point}\n     */\n    pointAtLength(length) {\n        if (length > this.perimeter || length < 0) return null;\n        let point = null;\n        for (let edge of this) {\n            if (length >= edge.arc_length &&\n                (edge === this.last || length < edge.next.arc_length)) {\n                point = edge.pointAtLength(length - edge.arc_length);\n                break;\n            }\n        }\n        return point;\n    }\n\n    static points2segments(points) {\n        let segments = [];\n        for (let i = 0; i < points.length; i++) {\n            // skip zero length segment\n            if (points[i].equalTo(points[(i + 1) % points.length]))\n                continue;\n            segments.push(new Flatten.Segment(points[i], points[(i + 1) % points.length]));\n        }\n        return segments;\n    }\n\n    shapes2face(edges, shapes) {\n        for (let shape of shapes) {\n            let edge = new Flatten.Edge(shape);\n            this.append(edge);\n            // this.box = this.box.merge(shape.box);\n            edges.add(edge);\n        }\n        // this.orientation = this.getOrientation();              // face direction cw or ccw\n    }\n\n    /**\n     * Append edge after the last edge of the face (and before the first edge). <br/>\n     * @param {Edge} edge - Edge to be appended to the linked list\n     * @returns {Face}\n     */\n    append(edge) {\n        super.append(edge);\n        // set arc length\n        this.setOneEdgeArcLength(edge);\n        edge.face = this;\n        // edges.add(edge);      // Add new edges into edges container\n        return this;\n    }\n\n    /**\n     * Insert edge newEdge into the linked list after the edge edgeBefore <br/>\n     * @param {Edge} newEdge - Edge to be inserted into linked list\n     * @param {Edge} edgeBefore - Edge to insert newEdge after it\n     * @returns {Face}\n     */\n    insert(newEdge, edgeBefore) {\n        super.insert(newEdge, edgeBefore);\n        // set arc length\n        this.setOneEdgeArcLength(newEdge);\n        newEdge.face = this;\n        return this;\n    }\n\n    /**\n     * Remove the given edge from the linked list of the face <br/>\n     * @param {Edge} edge - Edge to be removed\n     * @returns {Face}\n     */\n    remove(edge) {\n        super.remove(edge);\n        // Recalculate arc length\n        this.setArcLength();\n        return this;\n    }\n\n    /**\n     * Merge current edge with the next edge. Given edge will be extended,\n     * next edge after it will be removed. The distortion of the polygon\n     * is on the responsibility of the user of this method\n     * @param {Edge} edge - edge to be extended\n     * @returns {Face}\n     */\n    merge_with_next_edge(edge) {\n        edge.shape.end.x = edge.next.shape.end.x;\n        edge.shape.end.y = edge.next.shape.end.y;\n        this.remove(edge.next);\n        return this;\n    }\n\n    /**\n     * Reverse orientation of the face: first edge become last and vice a verse,\n     * all edges starts and ends swapped, direction of arcs inverted. If face was oriented\n     * clockwise, it becomes counterclockwise and vice versa\n     */\n    reverse() {\n        // collect edges in revert order with reverted shapes\n        let edges = [];\n        let edge_tmp = this.last;\n        do {\n            // reverse shape\n            edge_tmp.shape = edge_tmp.shape.reverse();\n            edges.push(edge_tmp);\n            edge_tmp = edge_tmp.prev;\n        } while (edge_tmp !== this.last);\n\n        // restore linked list\n        this.first = undefined;\n        this.last = undefined;\n        for (let edge of edges) {\n            if (this.first === undefined) {\n                edge.prev = edge;\n                edge.next = edge;\n                this.first = edge;\n                this.last = edge;\n            } else {\n                // append to end\n                edge.prev = this.last;\n                this.last.next = edge;\n\n                // update edge to be last\n                this.last = edge;\n\n                // restore circular links\n                this.last.next = this.first;\n                this.first.prev = this.last;\n\n            }\n            // set arc length\n            this.setOneEdgeArcLength(edge);\n        }\n\n        // Recalculate orientation, if set\n        if (this._orientation !== undefined) {\n            this._orientation = undefined;\n            this._orientation = this.orientation();\n        }\n    }\n\n\n    /**\n     * Set arc_length property for each of the edges in the face.\n     * Arc_length of the edge it the arc length from the first edge of the face\n     */\n    setArcLength() {\n        for (let edge of this) {\n            this.setOneEdgeArcLength(edge);\n            edge.face = this;\n        }\n    }\n\n    setOneEdgeArcLength(edge) {\n        if (edge === this.first) {\n            edge.arc_length = 0.0;\n        } else {\n            edge.arc_length = edge.prev.arc_length + edge.prev.length;\n        }\n    }\n\n    /**\n     * Returns the absolute value of the area of the face\n     * @returns {number}\n     */\n    area() {\n        return Math.abs(this.signedArea());\n    }\n\n    /**\n     * Returns signed area of the simple face.\n     * Face is simple if it has no self intersections that change its orientation.\n     * Then the area will be positive if the orientation of the face is clockwise,\n     * and negative if orientation is counterclockwise.\n     * It may be zero if polygon is degenerated.\n     * @returns {number}\n     */\n    signedArea() {\n        let sArea = 0;\n        let ymin = this.box.ymin;\n        for (let edge of this) {\n            sArea += edge.shape.definiteIntegral(ymin);\n        }\n        return sArea;\n    }\n\n    /**\n     * Return face orientation: one of Flatten.ORIENTATION.CCW, Flatten.ORIENTATION.CW, Flatten.ORIENTATION.NOT_ORIENTABLE <br/>\n     * According to Green theorem the area of a closed curve may be calculated as double integral,\n     * and the sign of the integral will be defined by the direction of the curve.\n     * When the integral (\"signed area\") will be negative, direction is counterclockwise,\n     * when positive - clockwise and when it is zero, polygon is not orientable.\n     * See {@link https://mathinsight.org/greens_theorem_find_area}\n     * @returns {number}\n     */\n    orientation() {\n        if (this._orientation === undefined) {\n            let area = this.signedArea();\n            if (Flatten.Utils.EQ_0(area)) {\n                this._orientation = ORIENTATION.NOT_ORIENTABLE;\n            } else if (Flatten.Utils.LT(area, 0)) {\n                this._orientation = ORIENTATION.CCW;\n            } else {\n                this._orientation = ORIENTATION.CW;\n            }\n        }\n        return this._orientation;\n    }\n\n    /**\n     * Returns true if face of the polygon is simple (no self-intersection points found)\n     * NOTE: this method is incomplete because it does not exclude touching points.\n     * Self intersection test should check if polygon change orientation in the test point.\n     * @param {PlanarSet} edges - reference to polygon edges to provide search index\n     * @returns {boolean}\n     */\n    isSimple(edges) {\n        let ip = Face.getSelfIntersections(this, edges, true);\n        return ip.length === 0;\n    }\n\n    static getSelfIntersections(face, edges, exitOnFirst = false) {\n        let int_points = [];\n\n        // calculate intersections\n        for (let edge1 of face) {\n\n            // request edges of polygon in the box of edge1\n            let resp = edges.search(edge1.box);\n\n            // for each edge2 in response\n            for (let edge2 of resp) {\n\n                // Skip itself\n                if (edge1 === edge2)\n                    continue;\n\n                // Skip is edge2 belongs to another face\n                if (edge2.face !== face)\n                    continue;\n\n                // Skip next and previous edge if both are segment (if one of them arc - calc intersection)\n                if (edge1.shape instanceof Flatten.Segment && edge2.shape instanceof Flatten.Segment &&\n                    (edge1.next === edge2 || edge1.prev === edge2))\n                    continue;\n\n                // calculate intersections between edge1 and edge2\n                let ip = edge1.shape.intersect(edge2.shape);\n\n                // for each intersection point\n                for (let pt of ip) {\n\n                    // skip start-end connections\n                    if (pt.equalTo(edge1.start) && pt.equalTo(edge2.end) && edge2 === edge1.prev)\n                        continue;\n                    if (pt.equalTo(edge1.end) && pt.equalTo(edge2.start) && edge2 === edge1.next)\n                        continue;\n\n                    int_points.push(pt);\n\n                    if (exitOnFirst)\n                        break;\n                }\n\n                if (int_points.length > 0 && exitOnFirst)\n                    break;\n            }\n\n            if (int_points.length > 0 && exitOnFirst)\n                break;\n\n        }\n        return int_points;\n    }\n\n    /**\n     * Returns edge which contains given point\n     * @param {Point} pt - test point\n     * @returns {Edge}\n     */\n    findEdgeByPoint(pt) {\n        let edgeFound;\n        for (let edge of this) {\n            if (pt.equalTo(edge.shape.start)) continue\n            if (pt.equalTo(edge.shape.end) || edge.shape.contains(pt)) {\n                edgeFound = edge;\n                break;\n            }\n        }\n        return edgeFound;\n    }\n\n    /**\n     * Returns new polygon created from one face\n     * @returns {Polygon}\n     */\n    toPolygon() {\n        return new Flatten.Polygon(this.shapes);\n    }\n\n    toJSON() {\n        return this.edges.map(edge => edge.toJSON());\n    }\n\n    /**\n     * Returns string to be assigned to \"d\" attribute inside defined \"path\"\n     * @returns {string}\n     */\n    svg() {\n        let svgStr = `\\nM${this.first.start.x},${this.first.start.y}`;\n        for (let edge of this) {\n            svgStr += edge.svg();\n        }\n        svgStr += ` z`;\n        return svgStr;\n    }\n\n}\n\nFlatten.Face = Face;\n\n/**\n * Class representing a ray (a half-infinite line).\n * @type {Ray}\n */\nclass Ray extends Shape {\n    /**\n     * Ray may be constructed by setting an <b>origin</b> point and a <b>normal</b> vector, so that any point <b>x</b>\n     * on a ray fit an equation: <br />\n     *  (<b>x</b> - <b>origin</b>) * <b>vector</b> = 0 <br />\n     * Ray defined by constructor is a right semi-infinite line with respect to the normal vector <br/>\n     * If normal vector is omitted ray is considered horizontal (normal vector is (0,1)). <br/>\n     * Don't be confused: direction of the normal vector is orthogonal to the ray <br/>\n     * @param {Point} pt - start point\n     * @param {Vector} norm - normal vector\n     */\n    constructor(...args) {\n        super();\n        this.pt = new Flatten.Point();\n        this.norm = new Flatten.Vector(0,1);\n\n        if (args.length === 0) {\n            return;\n        }\n\n        if (args.length >= 1 && args[0] instanceof Flatten.Point) {\n            this.pt = args[0].clone();\n        }\n\n        if (args.length === 1) {\n            return;\n        }\n\n        if (args.length === 2 && args[1] instanceof Flatten.Vector) {\n            this.norm = args[1].clone();\n            return;\n        }\n\n        throw Errors.ILLEGAL_PARAMETERS;\n    }\n\n    /**\n     * Return new cloned instance of ray\n     * @returns {Ray}\n     */\n    clone() {\n        return new Ray(this.pt, this.norm);\n    }\n\n    /**\n     * Slope of the ray - angle in radians between ray and axe x from 0 to 2PI\n     * @returns {number} - slope of the line\n     */\n    get slope() {\n        let vec = new Flatten.Vector(this.norm.y, -this.norm.x);\n        return vec.slope;\n    }\n\n    /**\n     * Returns half-infinite bounding box of the ray\n     * @returns {Box} - bounding box\n     */\n    get box() {\n        let slope = this.slope;\n        return new Flatten.Box(\n            slope > Math.PI/2 && slope < 3*Math.PI/2 ? Number.NEGATIVE_INFINITY : this.pt.x,\n            slope >= 0 && slope <= Math.PI ? this.pt.y : Number.NEGATIVE_INFINITY,\n            slope >= Math.PI/2 && slope <= 3*Math.PI/2 ? this.pt.x : Number.POSITIVE_INFINITY,\n            slope >= Math.PI && slope <= 2*Math.PI || slope === 0 ? this.pt.y : Number.POSITIVE_INFINITY\n        )\n    }\n\n    /**\n     * Return ray start point\n     * @returns {Point} - ray start point\n     */\n    get start() {\n        return this.pt;\n    }\n\n    /**\n     * Ray has no end point?\n     * @returns {undefined}\n     */\n    get end() {return undefined;}\n\n    /**\n     * Return positive infinity number as length\n     * @returns {number}\n     */\n    get length() {return Number.POSITIVE_INFINITY;}\n\n    /**\n     * Returns true if point belongs to ray\n     * @param {Point} pt Query point\n     * @returns {boolean}\n     */\n    contains(pt) {\n        if (this.pt.equalTo(pt)) {\n            return true;\n        }\n        /* Ray contains point if vector to point is orthogonal to the ray normal vector\n            and cross product from vector to point is positive */\n        let vec = new Flatten.Vector(this.pt, pt);\n        return Flatten.Utils.EQ_0(this.norm.dot(vec)) && Flatten.Utils.GE(vec.cross(this.norm),0);\n    }\n\n    /**\n     * Split ray with point and return array of segment and new ray\n     * @param {Point} pt\n     * @returns [Segment,Ray]\n     */\n    split(pt) {\n        if (!this.contains(pt))\n            return [];\n\n        if (this.pt.equalTo(pt)) {\n            return [this]\n        }\n\n        return [\n            new Flatten.Segment(this.pt, pt),\n            new Flatten.Ray(pt, this.norm)\n        ]\n    }\n\n    /**\n     * Returns array of intersection points between ray and another shape\n     * @param {Shape} shape - Shape to intersect with ray\n     * @returns {Point[]} array of intersection points\n     */\n    intersect(shape) {\n        if (shape instanceof Flatten.Point) {\n            return this.contains(shape) ? [shape] : [];\n        }\n\n        if (shape instanceof Flatten.Segment) {\n            return intersectRay2Segment(this, shape);\n        }\n\n        if (shape instanceof Flatten.Arc) {\n            return intersectRay2Arc(this, shape);\n        }\n\n        if (shape instanceof Flatten.Line) {\n            return intersectRay2Line(this, shape);\n        }\n\n        if (shape instanceof Flatten.Ray) {\n            return intersectRay2Ray(this, shape)\n        }\n\n        if (shape instanceof Flatten.Circle) {\n            return intersectRay2Circle(this, shape);\n        }\n\n        if (shape instanceof Flatten.Box) {\n            return intersectRay2Box(this, shape);\n        }\n\n        if (shape instanceof Flatten.Polygon) {\n            return  intersectRay2Polygon(this, shape);\n        }\n    }\n\n    /**\n     * Return new line rotated by angle\n     * @param {number} angle - angle in radians\n     * @param {Point} center - center of rotation\n     */\n    rotate(angle, center = new Flatten.Point()) {\n        return new Flatten.Ray(\n            this.pt.rotate(angle, center),\n            this.norm.rotate(angle)\n        )\n    }\n\n    /**\n     * Return new ray transformed by affine transformation matrix\n     * @param {Matrix} m - affine transformation matrix (a,b,c,d,tx,ty)\n     * @returns {Ray}\n     */\n    transform(m) {\n        return new Flatten.Ray(\n            this.pt.transform(m),\n            this.norm.clone()\n        )\n    }\n\n    get name() {\n        return \"ray\"\n    }\n\n    /**\n     * Return string to draw svg segment representing ray inside given box\n     * @param {Box} box Box representing drawing area\n     * @param {Object} attrs - an object with attributes of svg segment element\n     */\n    svg(box, attrs = {}) {\n        let line = new Flatten.Line(this.pt, this.norm);\n        let ip = intersectLine2Box(line, box);\n        ip = ip.filter( pt => this.contains(pt) );\n        if (ip.length === 0 || ip.length === 2)\n            return \"\";\n        let segment = new Flatten.Segment(this.pt, ip[0]);\n        return segment.svg(attrs);\n    }\n\n}\n\nFlatten.Ray = Ray;\n\nconst ray = (...args) => new Flatten.Ray(...args);\nFlatten.ray = ray;\n\n/**\n * Created by Alex Bol on 3/15/2017.\n */\n\n\n/**\n * Class representing a polygon.<br/>\n * Polygon in FlattenJS is a multipolygon comprised from a set of [faces]{@link Flatten.Face}. <br/>\n * Face, in turn, is a closed loop of [edges]{@link Flatten.Edge}, where edge may be segment or circular arc<br/>\n * @type {Polygon}\n */\nclass Polygon {\n    /**\n     * Constructor creates new instance of polygon. With no arguments new polygon is empty.<br/>\n     * Constructor accepts as argument array that define loop of shapes\n     * or array of arrays in case of multi polygon <br/>\n     * Loop may be defined in different ways: <br/>\n     * - array of shapes of type Segment or Arc <br/>\n     * - array of points (Flatten.Point) <br/>\n     * - array of numeric pairs which represent points <br/>\n     * - box or circle object <br/>\n     * Alternatively, it is possible to use polygon.addFace method\n     * @param {args} - array of shapes or array of arrays\n     */\n    constructor() {\n        /**\n         * Container of faces (closed loops), may be empty\n         * @type {PlanarSet}\n         */\n        this.faces = new Flatten.PlanarSet();\n        /**\n         * Container of edges\n         * @type {PlanarSet}\n         */\n        this.edges = new Flatten.PlanarSet();\n\n        /* It may be array of something that may represent one loop (face) or\n         array of arrays that represent multiple loops\n         */\n        let args = [...arguments];\n        if (args.length === 1 &&\n            ((args[0] instanceof Array && args[0].length > 0) ||\n                args[0] instanceof Flatten.Circle || args[0] instanceof Flatten.Box)) {\n            let argsArray = args[0];\n            if (args[0] instanceof Array && args[0].every((loop) => {\n                return loop instanceof Array\n            })) {\n                if (argsArray.every(el => {\n                    return el instanceof Array && el.length === 2 && typeof (el[0]) === \"number\" && typeof (el[1]) === \"number\"\n                })) {\n                    this.faces.add(new Flatten.Face(this, argsArray));    // one-loop polygon as array of pairs of numbers\n                } else {\n                    for (let loop of argsArray) {   // multi-loop polygon\n                        /* Check extra level of nesting for GeoJSON-style multi polygons */\n                        if (loop instanceof Array && loop[0] instanceof Array &&\n                            loop[0].every(el => {\n                                return el instanceof Array && el.length === 2 && typeof (el[0]) === \"number\" && typeof (el[1]) === \"number\"\n                            })) {\n                            for (let loop1 of loop) {\n                                this.faces.add(new Flatten.Face(this, loop1));\n                            }\n                        } else {\n                            this.faces.add(new Flatten.Face(this, loop));\n                        }\n                    }\n                }\n            } else {\n                this.faces.add(new Flatten.Face(this, argsArray));    // one-loop polygon\n            }\n        }\n    }\n\n    /**\n     * (Getter) Returns bounding box of the polygon\n     * @returns {Box}\n     */\n    get box() {\n        return [...this.faces].reduce((acc, face) => acc.merge(face.box), new Flatten.Box());\n    }\n\n    /**\n     * (Getter) Returns array of vertices\n     * @returns {Array}\n     */\n    get vertices() {\n        return [...this.edges].map(edge => edge.start);\n    }\n\n    /**\n     * Create new cloned instance of the polygon\n     * @returns {Polygon}\n     */\n    clone() {\n        let polygon = new Polygon();\n        for (let face of this.faces) {\n            polygon.addFace(face.shapes);\n        }\n        return polygon;\n    }\n\n    /**\n     * Return true is polygon has no edges\n     * @returns {boolean}\n     */\n    isEmpty() {\n        return this.edges.size === 0;\n    }\n\n    /**\n     * Return true if polygon is valid for boolean operations\n     * Polygon is valid if <br/>\n     * 1. All faces are simple polygons (there are no self-intersected polygons) <br/>\n     * 2. All faces are orientable and there is no island inside island or hole inside hole - TODO <br/>\n     * 3. There is no intersections between faces (excluding touching) - TODO <br/>\n     * @returns {boolean}\n     */\n    isValid() {\n        let valid = true;\n        // 1. Polygon is invalid if at least one face is not simple\n        for (let face of this.faces) {\n            if (!face.isSimple(this.edges)) {\n                valid = false;\n                break;\n            }\n        }\n        // 2. TODO: check if no island inside island and no hole inside hole\n        // 3. TODO: check the there is no intersection between faces\n        return valid;\n    }\n\n    /**\n     * Returns area of the polygon. Area of an island will be added, area of a hole will be subtracted\n     * @returns {number}\n     */\n    area() {\n        let signedArea = [...this.faces].reduce((acc, face) => acc + face.signedArea(), 0);\n        return Math.abs(signedArea);\n    }\n\n    /**\n     * Add new face to polygon. Returns added face\n     * @param {Point[]|Segment[]|Arc[]|Circle|Box} args -  new face may be create with one of the following ways: <br/>\n     * 1) array of points that describe closed path (edges are segments) <br/>\n     * 2) array of shapes (segments and arcs) which describe closed path <br/>\n     * 3) circle - will be added as counterclockwise arc <br/>\n     * 4) box - will be added as counterclockwise rectangle <br/>\n     * You can chain method face.reverse() is you need to change direction of the creates face\n     * @returns {Face}\n     */\n    addFace(...args) {\n        let face = new Flatten.Face(this, ...args);\n        this.faces.add(face);\n        return face;\n    }\n\n    /**\n     * Delete existing face from polygon\n     * @param {Face} face Face to be deleted\n     * @returns {boolean}\n     */\n    deleteFace(face) {\n        for (let edge of face) {\n            this.edges.delete(edge);\n        }\n        return this.faces.delete(face);\n    }\n\n    /**\n     * Clear all faces and create new faces from edges\n     */\n    recreateFaces() {\n        // Remove all faces\n        this.faces.clear();\n        for (let edge of this.edges) {\n            edge.face = null;\n        }\n\n        // Restore faces\n        let first;\n        let unassignedEdgeFound = true;\n        while (unassignedEdgeFound) {\n            unassignedEdgeFound = false;\n            for (let edge of this.edges) {\n                if (edge.face === null) {\n                    first = edge;\n                    unassignedEdgeFound = true;\n                    break;\n                }\n            }\n\n            if (unassignedEdgeFound) {\n                let last = first;\n                do {\n                    last = last.next;\n                } while (last.next !== first)\n\n                this.addFace(first, last);\n            }\n        }\n    }\n\n    /**\n     * Delete chain of edges from the face.\n     * @param {Face} face Face to remove chain\n     * @param {Edge} edgeFrom Start of the chain of edges to be removed\n     * @param {Edge} edgeTo End of the chain of edges to be removed\n     */\n    removeChain(face, edgeFrom, edgeTo) {\n        // Special case: all edges removed\n        if (edgeTo.next === edgeFrom) {\n            this.deleteFace(face);\n            return;\n        }\n        for (let edge = edgeFrom; edge !== edgeTo.next; edge = edge.next) {\n            face.remove(edge);\n            this.edges.delete(edge);      // delete from PlanarSet of edges and update index\n            if (face.isEmpty()) {\n                this.deleteFace(face);    // delete from PlanarSet of faces and update index\n                break;\n            }\n        }\n    }\n\n    /**\n     * Add point as a new vertex and split edge. Point supposed to belong to an edge.\n     * When edge is split, new edge created from the start of the edge to the new vertex\n     * and inserted before current edge.\n     * Current edge is trimmed and updated.\n     * Method returns new edge added. If no edge added, it returns edge before vertex\n     * @param {Point} pt Point to be added as a new vertex\n     * @param {Edge} edge Edge to be split with new vertex and then trimmed from start\n     * @returns {Edge}\n     */\n    addVertex(pt, edge) {\n        let shapes = edge.shape.split(pt);\n        // if (shapes.length < 2) return;\n\n        if (shapes[0] === null)   // point incident to edge start vertex, return previous edge\n            return edge.prev;\n\n        if (shapes[1] === null)   // point incident to edge end vertex, return edge itself\n            return edge;\n\n        let newEdge = new Flatten.Edge(shapes[0]);\n        let edgeBefore = edge.prev;\n\n        /* Insert first split edge into linked list after edgeBefore */\n        edge.face.insert(newEdge, edgeBefore);\n\n        // Remove old edge from edges container and 2d index\n        this.edges.delete(edge);\n\n        // Insert new edge to the edges container and 2d index\n        this.edges.add(newEdge);\n\n        // Update edge shape with second split edge keeping links\n        edge.shape = shapes[1];\n\n        // Add updated edge to the edges container and 2d index\n        this.edges.add(edge);\n\n        return newEdge;\n    }\n\n    /**\n     * Merge given edge with next edge and remove vertex between them\n     * @param {Edge} edge\n     */\n    removeEndVertex(edge) {\n        const edge_next = edge.next;\n        if (edge_next === edge) return\n        edge.face.merge_with_next_edge(edge);\n        this.edges.delete(edge_next);\n    }\n\n    /**\n     * Cut polygon with multiline and return array of new polygons\n     * Multiline should be constructed from a line with intersection point, see notebook:\n     * https://next.observablehq.com/@alexbol99/cut-polygon-with-line\n     * @param {Multiline} multiline\n     * @returns {Polygon[]}\n     */\n    cut(multiline) {\n        let cutPolygons = [this.clone()];\n        for (let edge of multiline) {\n            if (edge.setInclusion(this) !== INSIDE$2)\n                continue;\n\n            let cut_edge_start = edge.shape.start;\n            let cut_edge_end = edge.shape.end;\n\n            let newCutPolygons = [];\n            for (let polygon of cutPolygons) {\n                if (polygon.findEdgeByPoint(cut_edge_start) === undefined) {\n                    newCutPolygons.push(polygon);\n                } else {\n                    let [cutPoly1, cutPoly2] = polygon.cutFace(cut_edge_start, cut_edge_end);\n                    newCutPolygons.push(cutPoly1, cutPoly2);\n                }\n            }\n            cutPolygons = newCutPolygons;\n        }\n        return cutPolygons;\n    }\n\n    /**\n     * Cut face of polygon with a segment between two points and create two new polygons\n     * Supposed that a segments between points does not intersect any other edge\n     * @param {Point} pt1\n     * @param {Point} pt2\n     * @returns {Polygon[]}\n     */\n    cutFace(pt1, pt2) {\n        let edge1 = this.findEdgeByPoint(pt1);\n        let edge2 = this.findEdgeByPoint(pt2);\n        if (edge1.face !== edge2.face)\n            return [];\n\n        // Cut face into two and create new polygon with two faces\n        let edgeBefore1 = this.addVertex(pt1, edge1);\n        edge2 = this.findEdgeByPoint(pt2);\n        let edgeBefore2 = this.addVertex(pt2, edge2);\n\n        let face = edgeBefore1.face;\n        let newEdge1 = new Flatten.Edge(\n            new Flatten.Segment(edgeBefore1.end, edgeBefore2.end)\n        );\n        let newEdge2 = new Flatten.Edge(\n            new Flatten.Segment(edgeBefore2.end, edgeBefore1.end)\n        );\n\n        // Swap links\n        edgeBefore1.next.prev = newEdge2;\n        newEdge2.next = edgeBefore1.next;\n\n        edgeBefore1.next = newEdge1;\n        newEdge1.prev = edgeBefore1;\n\n        edgeBefore2.next.prev = newEdge1;\n        newEdge1.next = edgeBefore2.next;\n\n        edgeBefore2.next = newEdge2;\n        newEdge2.prev = edgeBefore2;\n\n        // Insert new edge to the edges container and 2d index\n        this.edges.add(newEdge1);\n        this.edges.add(newEdge2);\n\n        // Add two new faces\n        let face1 = this.addFace(newEdge1, edgeBefore1);\n        let face2 = this.addFace(newEdge2, edgeBefore2);\n\n        // Remove old face\n        this.faces.delete(face);\n\n        return [face1.toPolygon(), face2.toPolygon()];\n    }\n\n    /**\n     * Return a result of cutting polygon with line\n     * @param {Line} line - cutting line\n     * @returns {Polygon} newPoly - resulted polygon\n     */\n    cutWithLine(line) {\n        let newPoly = this.clone();\n\n        let multiline = new Multiline([line]);\n\n        // smart intersections\n        let intersections = {\n            int_points1: [],\n            int_points2: [],\n            int_points1_sorted: [],\n            int_points2_sorted: []\n        };\n\n        // intersect line with each edge of the polygon\n        // and create smart intersections\n        for (let edge of newPoly.edges) {\n            let ip = intersectEdge2Line(edge, line);\n            // for each intersection point\n            for (let pt of ip) {\n                addToIntPoints(multiline.first, pt, intersections.int_points1);\n                addToIntPoints(edge, pt, intersections.int_points2);\n            }\n        }\n\n        // No intersections - return a copy of the original polygon\n        if (intersections.int_points1.length === 0)\n            return newPoly;\n\n        // sort smart intersections\n        intersections.int_points1_sorted = getSortedArrayOnLine(line, intersections.int_points1);\n        intersections.int_points2_sorted = getSortedArray(intersections.int_points2);\n\n        // split by intersection points\n        splitByIntersections(multiline, intersections.int_points1_sorted);\n        splitByIntersections(newPoly, intersections.int_points2_sorted);\n\n        // filter duplicated intersection points\n        filterDuplicatedIntersections(intersections);\n\n        // sort intersection points again after filtering\n        intersections.int_points1_sorted = getSortedArrayOnLine(line, intersections.int_points1);\n        intersections.int_points2_sorted = getSortedArray(intersections.int_points2);\n\n        // initialize inclusion flags for edges of multiline incident to intersections\n        initializeInclusionFlags(intersections.int_points1);\n\n        // calculate inclusion flag for edges of multiline incident to intersections\n        calculateInclusionFlags(intersections.int_points1, newPoly);\n\n        // filter intersections between two edges that got same inclusion flag\n        for (let int_point1 of intersections.int_points1_sorted) {\n            if (int_point1.edge_before.bv === int_point1.edge_after.bv) {\n                intersections.int_points2[int_point1.id] = -1;   // to be filtered out\n                int_point1.id = -1;                              // to be filtered out\n            }\n        }\n        intersections.int_points1 = intersections.int_points1.filter( int_point => int_point.id >= 0);\n        intersections.int_points2 = intersections.int_points2.filter( int_point => int_point.id >= 0);\n\n        // No intersections left after filtering - return a copy of the original polygon\n        if (intersections.int_points1.length === 0)\n            return newPoly;\n\n        // sort intersection points 3d time after filtering\n        intersections.int_points1_sorted = getSortedArrayOnLine(line, intersections.int_points1);\n        intersections.int_points2_sorted = getSortedArray(intersections.int_points2);\n\n        // Add 2 new inner edges between intersection points\n        let int_point1_prev = intersections.int_points1[0];\n        let new_edge;\n        for (let int_point1_curr of intersections.int_points1_sorted) {\n            if (int_point1_curr.edge_before.bv === INSIDE$2) {\n                new_edge = new Flatten.Edge(new Flatten.Segment(int_point1_prev.pt, int_point1_curr.pt));    // (int_point1_curr.edge_before.shape);\n                insertBetweenIntPoints(intersections.int_points2[int_point1_prev.id], intersections.int_points2[int_point1_curr.id], new_edge);\n                newPoly.edges.add(new_edge);\n\n                new_edge = new Flatten.Edge(new Flatten.Segment(int_point1_curr.pt, int_point1_prev.pt));    // (int_point1_curr.edge_before.shape.reverse());\n                insertBetweenIntPoints(intersections.int_points2[int_point1_curr.id], intersections.int_points2[int_point1_prev.id], new_edge);\n                newPoly.edges.add(new_edge);\n            }\n            int_point1_prev = int_point1_curr;\n        }\n\n        // Recreate faces\n        newPoly.recreateFaces();\n        return newPoly;\n    }\n\n    /**\n     * Returns the first found edge of polygon that contains given point\n     * If point is a vertex, return the edge where the point is an end vertex, not a start one\n     * @param {Point} pt\n     * @returns {Edge}\n     */\n    findEdgeByPoint(pt) {\n        let edge;\n        for (let face of this.faces) {\n            edge = face.findEdgeByPoint(pt);\n            if (edge !== undefined)\n                break;\n        }\n        return edge;\n    }\n\n    /**\n     * Split polygon into array of polygons, where each polygon is an island with all\n     * hole that it contains\n     * @returns {Flatten.Polygon[]}\n     */\n    splitToIslands() {\n        if (this.isEmpty()) return [];      // return empty array if polygon is empty\n        let polygons = this.toArray();      // split into array of one-loop polygons\n        /* Sort polygons by area in descending order */\n        polygons.sort((polygon1, polygon2) => polygon2.area() - polygon1.area());\n        /* define orientation of the island by orientation of the first polygon in array */\n        let orientation = [...polygons[0].faces][0].orientation();\n        /* Create output array from polygons with same orientation as a first polygon (array of islands) */\n        let newPolygons = polygons.filter(polygon => [...polygon.faces][0].orientation() === orientation);\n        for (let polygon of polygons) {\n            let face = [...polygon.faces][0];\n            if (face.orientation() === orientation) continue;  // skip same orientation\n            /* Proceed with opposite orientation */\n            /* Look if any of island polygons contains tested polygon as a hole */\n            for (let islandPolygon of newPolygons) {\n                if (face.shapes.every(shape => islandPolygon.contains(shape))) {\n                    islandPolygon.addFace(face.shapes);      // add polygon as a hole in islandPolygon\n                    break;\n                }\n            }\n        }\n        // TODO: assert if not all polygons added into output\n        return newPolygons;\n    }\n\n    /**\n     * Reverse orientation of all faces to opposite\n     * @returns {Polygon}\n     */\n    reverse() {\n        for (let face of this.faces) {\n            face.reverse();\n        }\n        return this;\n    }\n\n    /**\n     * Returns true if polygon contains shape: no point of shape lay outside of the polygon,\n     * false otherwise\n     * @param {Shape} shape - test shape\n     * @returns {boolean}\n     */\n    contains(shape) {\n        if (shape instanceof Flatten.Point) {\n            let rel = ray_shoot(this, shape);\n            return rel === INSIDE$2 || rel === BOUNDARY$1;\n        } else {\n            return cover(this, shape);\n        }\n    }\n\n    /**\n     * Return distance and shortest segment between polygon and other shape as array [distance, shortest_segment]\n     * @param {Shape} shape Shape of one of the types Point, Circle, Line, Segment, Arc or Polygon\n     * @returns {Number | Segment}\n     */\n    distanceTo(shape) {\n        // let {Distance} = Flatten;\n\n        if (shape instanceof Flatten.Point) {\n            let [dist, shortest_segment] = Flatten.Distance.point2polygon(shape, this);\n            shortest_segment = shortest_segment.reverse();\n            return [dist, shortest_segment];\n        }\n\n        if (shape instanceof Flatten.Circle ||\n            shape instanceof Flatten.Line ||\n            shape instanceof Flatten.Segment ||\n            shape instanceof Flatten.Arc) {\n            let [dist, shortest_segment] = Flatten.Distance.shape2polygon(shape, this);\n            shortest_segment = shortest_segment.reverse();\n            return [dist, shortest_segment];\n        }\n\n        /* this method is bit faster */\n        if (shape instanceof Flatten.Polygon) {\n            let min_dist_and_segment = [Number.POSITIVE_INFINITY, new Flatten.Segment()];\n            let dist, shortest_segment;\n\n            for (let edge of this.edges) {\n                // let [dist, shortest_segment] = Distance.shape2polygon(edge.shape, shape);\n                let min_stop = min_dist_and_segment[0];\n                [dist, shortest_segment] = Flatten.Distance.shape2planarSet(edge.shape, shape.edges, min_stop);\n                if (Flatten.Utils.LT(dist, min_stop)) {\n                    min_dist_and_segment = [dist, shortest_segment];\n                }\n            }\n            return min_dist_and_segment;\n        }\n    }\n\n    /**\n     * Return array of intersection points between polygon and other shape\n     * @param shape Shape of the one of supported types <br/>\n     * @returns {Point[]}\n     */\n    intersect(shape) {\n        if (shape instanceof Flatten.Point) {\n            return this.contains(shape) ? [shape] : [];\n        }\n\n        if (shape instanceof Flatten.Line) {\n            return intersectLine2Polygon(shape, this);\n        }\n\n        if (shape instanceof Flatten.Ray) {\n            return intersectRay2Polygon(shape, this);\n        }\n\n        if (shape instanceof Flatten.Circle) {\n            return intersectCircle2Polygon(shape, this);\n        }\n\n        if (shape instanceof Flatten.Segment) {\n            return intersectSegment2Polygon(shape, this);\n        }\n\n        if (shape instanceof Flatten.Arc) {\n            return intersectArc2Polygon(shape, this);\n        }\n\n        if (shape instanceof Flatten.Polygon) {\n            return intersectPolygon2Polygon(shape, this);\n        }\n    }\n\n    /**\n     * Returns new polygon translated by vector vec\n     * @param {Vector} vec\n     * @returns {Polygon}\n     */\n    translate(vec) {\n        let newPolygon = new Polygon();\n        for (let face of this.faces) {\n            newPolygon.addFace(face.shapes.map(shape => shape.translate(vec)));\n        }\n        return newPolygon;\n    }\n\n    /**\n     * Return new polygon rotated by given angle around given point\n     * If point omitted, rotate around origin (0,0)\n     * Positive value of angle defines rotation counterclockwise, negative - clockwise\n     * @param {number} angle - rotation angle in radians\n     * @param {Point} center - rotation center, default is (0,0)\n     * @returns {Polygon} - new rotated polygon\n     */\n    rotate(angle = 0, center = new Flatten.Point()) {\n        let newPolygon = new Polygon();\n        for (let face of this.faces) {\n            newPolygon.addFace(face.shapes.map(shape => shape.rotate(angle, center)));\n        }\n        return newPolygon;\n    }\n\n    /**\n     * Return new polygon with coordinates multiplied by scaling factor\n     * @param {number} sx - x-axis scaling factor\n     * @param {number} sy - y-axis scaling factor\n     * @returns {Polygon}\n     */\n    scale(sx, sy) {\n        let newPolygon = new Polygon();\n        for (let face of this.faces) {\n            newPolygon.addFace(face.shapes.map(shape => shape.scale(sx, sy)));\n        }\n        return newPolygon;\n    }\n\n    /**\n     * Return new polygon transformed using affine transformation matrix\n     * @param {Matrix} matrix - affine transformation matrix\n     * @returns {Polygon} - new polygon\n     */\n    transform(matrix = new Flatten.Matrix()) {\n        let newPolygon = new Polygon();\n        for (let face of this.faces) {\n            newPolygon.addFace(face.shapes.map(shape => shape.transform(matrix)));\n        }\n        return newPolygon;\n    }\n\n    /**\n     * This method returns an object that defines how data will be\n     * serialized when called JSON.stringify() method\n     * @returns {Object}\n     */\n    toJSON() {\n        return [...this.faces].map(face => face.toJSON());\n    }\n\n    /**\n     * Transform all faces into array of polygons\n     * @returns {Flatten.Polygon[]}\n     */\n    toArray() {\n        return [...this.faces].map(face => face.toPolygon());\n    }\n\n    /**\n     * Return string to draw polygon in svg\n     * @param attrs  - an object with attributes for svg path element\n     * @returns {string}\n     */\n    svg(attrs = {}) {\n        let svgStr = `\\n<path ${convertToString({fillRule: \"evenodd\", fill: \"lightcyan\", ...attrs})} d=\"`;\n        for (let face of this.faces) {\n            svgStr += face.svg();\n        }\n        svgStr += `\" >\\n</path>`;\n        return svgStr;\n    }\n}\n\nFlatten.Polygon = Polygon;\n\n/**\n * Shortcut method to create new polygon\n */\nconst polygon = (...args) => new Flatten.Polygon(...args);\nFlatten.polygon = polygon;\n\nconst {Circle, Line, Point, Vector, Utils} = Flatten;\n/**\n * Class Inversion represent operator of inversion in circle\n * Inversion is a transformation of the Euclidean plane that maps generalized circles\n * (where line is considered as a circle with infinite radius) into generalized circles\n * See also https://en.wikipedia.org/wiki/Inversive_geometry and\n * http://mathworld.wolfram.com/Inversion.html <br/>\n * @type {Inversion}\n */\nclass Inversion {\n    /**\n     * Inversion constructor\n     * @param {Circle} inversion_circle inversion circle\n     */\n    constructor(inversion_circle) {\n        this.circle = inversion_circle;\n    }\n\n\n    get inversion_circle() {\n        return this.circle;\n    }\n\n    static inversePoint(inversion_circle, point) {\n        const v = new Vector(inversion_circle.pc, point);\n        const k2 = inversion_circle.r * inversion_circle.r;\n        const len2 = v.dot(v);\n        const reflected_point = Utils.EQ_0(len2) ?\n            new Point(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY) :\n            inversion_circle.pc.translate(v.multiply(k2 / len2));\n        return reflected_point;\n    }\n\n    static inverseCircle(inversion_circle, circle) {\n        const dist = inversion_circle.pc.distanceTo(circle.pc)[0];\n        if (Utils.EQ(dist, circle.r)) {     // Circle passing through inversion center mapped into line\n            let d = (inversion_circle.r * inversion_circle.r) / (2 * circle.r);\n            let v = new Vector(inversion_circle.pc, circle.pc);\n            v = v.normalize();\n            let pt = inversion_circle.pc.translate(v.multiply(d));\n\n            return new Line(pt, v);\n        } else {                           // Circle not passing through inversion center - map into another circle */\n            /* Taken from http://mathworld.wolfram.com */\n            let v = new Vector(inversion_circle.pc, circle.pc);\n            let s = inversion_circle.r * inversion_circle.r / (v.dot(v) - circle.r * circle.r);\n            let pc = inversion_circle.pc.translate(v.multiply(s));\n            let r = Math.abs(s) * circle.r;\n\n            return new Circle(pc, r);\n        }\n    }\n\n    static inverseLine(inversion_circle, line) {\n        const [dist, shortest_segment] = inversion_circle.pc.distanceTo(line);\n        if (Utils.EQ_0(dist)) {            // Line passing through inversion center, is mapping to itself\n            return line.clone();\n        } else {                           // Line not passing through inversion center is mapping into circle\n            let r = inversion_circle.r * inversion_circle.r / (2 * dist);\n            let v = new Vector(inversion_circle.pc, shortest_segment.end);\n            v = v.multiply(r / dist);\n            return new Circle(inversion_circle.pc.translate(v), r);\n        }\n    }\n\n    inverse(shape) {\n        if (shape instanceof Point) {\n            return Inversion.inversePoint(this.circle, shape);\n        }\n        else if (shape instanceof Circle) {\n            return Inversion.inverseCircle(this.circle, shape);\n        }\n        else if (shape instanceof Line) {\n            return Inversion.inverseLine(this.circle, shape);\n        }\n    }\n}\nFlatten.Inversion = Inversion;\n\n/**\n * Shortcut to create inversion operator\n * @param circle\n * @returns {Inversion}\n */\nconst inversion = (circle) => new Flatten.Inversion(circle);\nFlatten.inversion = inversion;\n\nclass Distance {\n    /**\n     * Calculate distance and shortest segment between points\n     * @param pt1\n     * @param pt2\n     * @returns {Number | Segment} - distance and shortest segment\n     */\n    static point2point(pt1, pt2) {\n        return pt1.distanceTo(pt2);\n    }\n\n    /**\n     * Calculate distance and shortest segment between point and line\n     * @param pt\n     * @param line\n     * @returns {Number | Segment} - distance and shortest segment\n     */\n    static point2line(pt, line) {\n        let closest_point = pt.projectionOn(line);\n        let vec = new Flatten.Vector(pt, closest_point);\n        return [vec.length, new Flatten.Segment(pt, closest_point)];\n    }\n\n    /**\n     * Calculate distance and shortest segment between point and circle\n     * @param pt\n     * @param circle\n     * @returns {Number | Segment} - distance and shortest segment\n     */\n    static point2circle(pt, circle) {\n        let [dist2center, shortest_dist] = pt.distanceTo(circle.center);\n        if (Flatten.Utils.EQ_0(dist2center)) {\n            return [circle.r, new Flatten.Segment(pt, circle.toArc().start)];\n        } else {\n            let dist = Math.abs(dist2center - circle.r);\n            let v = new Flatten.Vector(circle.pc, pt).normalize().multiply(circle.r);\n            let closest_point = circle.pc.translate(v);\n            return [dist, new Flatten.Segment(pt, closest_point)];\n        }\n    }\n\n    /**\n     * Calculate distance and shortest segment between point and segment\n     * @param pt\n     * @param segment\n     * @returns {Number | Segment} - distance and shortest segment\n     */\n    static point2segment(pt, segment) {\n        /* Degenerated case of zero-length segment */\n        if (segment.start.equalTo(segment.end)) {\n            return Distance.point2point(pt, segment.start);\n        }\n\n        let v_seg = new Flatten.Vector(segment.start, segment.end);\n        let v_ps2pt = new Flatten.Vector(segment.start, pt);\n        let v_pe2pt = new Flatten.Vector(segment.end, pt);\n        let start_sp = v_seg.dot(v_ps2pt);\n        /* dot product v_seg * v_ps2pt */\n        let end_sp = -v_seg.dot(v_pe2pt);\n        /* minus dot product v_seg * v_pe2pt */\n\n        let dist;\n        let closest_point;\n        if (Flatten.Utils.GE(start_sp, 0) && Flatten.Utils.GE(end_sp, 0)) {    /* point inside segment scope */\n            let v_unit = segment.tangentInStart(); // new Flatten.Vector(v_seg.x / this.length, v_seg.y / this.length);\n            /* unit vector ||v_unit|| = 1 */\n            dist = Math.abs(v_unit.cross(v_ps2pt));\n            /* dist = abs(v_unit x v_ps2pt) */\n            closest_point = segment.start.translate(v_unit.multiply(v_unit.dot(v_ps2pt)));\n            return [dist, new Flatten.Segment(pt, closest_point)];\n        } else if (start_sp < 0) {                             /* point is out of scope closer to ps */\n            return pt.distanceTo(segment.start);\n        } else {                                               /* point is out of scope closer to pe */\n            return pt.distanceTo(segment.end);\n        }\n    };\n\n    /**\n     * Calculate distance and shortest segment between point and arc\n     * @param pt\n     * @param arc\n     * @returns {Number | Segment} - distance and shortest segment\n     */\n    static point2arc(pt, arc) {\n        let circle = new Flatten.Circle(arc.pc, arc.r);\n        let dist_and_segment = [];\n        let dist, shortest_segment;\n        [dist, shortest_segment] = Distance.point2circle(pt, circle);\n        if (shortest_segment.end.on(arc)) {\n            dist_and_segment.push(Distance.point2circle(pt, circle));\n        }\n        dist_and_segment.push(Distance.point2point(pt, arc.start));\n        dist_and_segment.push(Distance.point2point(pt, arc.end));\n\n        Distance.sort(dist_and_segment);\n\n        return dist_and_segment[0];\n    }\n\n    /**\n     * Calculate distance and shortest segment between segment and line\n     * @param seg\n     * @param line\n     * @returns {Number | Segment}\n     */\n    static segment2line(seg, line) {\n        let ip = seg.intersect(line);\n        if (ip.length > 0) {\n            return [0, new Flatten.Segment(ip[0], ip[0])];   // distance = 0, closest point is the first point\n        }\n        let dist_and_segment = [];\n        dist_and_segment.push(Distance.point2line(seg.start, line));\n        dist_and_segment.push(Distance.point2line(seg.end, line));\n\n        Distance.sort(dist_and_segment);\n        return dist_and_segment[0];\n\n    }\n\n    /**\n     * Calculate distance and shortest segment between two segments\n     * @param seg1\n     * @param seg2\n     * @returns {Number | Segment} - distance and shortest segment\n     */\n    static segment2segment(seg1, seg2) {\n        let ip = intersectSegment2Segment(seg1, seg2);\n        if (ip.length > 0) {\n            return [0, new Flatten.Segment(ip[0], ip[0])];   // distance = 0, closest point is the first point\n        }\n\n        // Seg1 and seg2 not intersected\n        let dist_and_segment = [];\n        let dist_tmp, shortest_segment_tmp;\n        [dist_tmp, shortest_segment_tmp] = Distance.point2segment(seg2.start, seg1);\n        dist_and_segment.push([dist_tmp, shortest_segment_tmp.reverse()]);\n        [dist_tmp, shortest_segment_tmp] = Distance.point2segment(seg2.end, seg1);\n        dist_and_segment.push([dist_tmp, shortest_segment_tmp.reverse()]);\n        dist_and_segment.push(Distance.point2segment(seg1.start, seg2));\n        dist_and_segment.push(Distance.point2segment(seg1.end, seg2));\n\n        Distance.sort(dist_and_segment);\n        return dist_and_segment[0];\n    }\n\n    /**\n     * Calculate distance and shortest segment between segment and circle\n     * @param seg\n     * @param circle\n     * @returns {Number | Segment} - distance and shortest segment\n     */\n    static segment2circle(seg, circle) {\n        /* Case 1 Segment and circle intersected. Return the first point and zero distance */\n        let ip = seg.intersect(circle);\n        if (ip.length > 0) {\n            return [0, new Flatten.Segment(ip[0], ip[0])];\n        }\n\n        // No intersection between segment and circle\n\n        /* Case 2. Distance to projection of center point to line bigger than radius\n         * And projection point belong to segment\n          * Then measure again distance from projection to circle and return it */\n        let line = new Flatten.Line(seg.ps, seg.pe);\n        let [dist, shortest_segment] = Distance.point2line(circle.center, line);\n        if (Flatten.Utils.GE(dist, circle.r) && shortest_segment.end.on(seg)) {\n            return Distance.point2circle(shortest_segment.end, circle);\n        }\n        /* Case 3. Otherwise closest point is one of the end points of the segment */\n        else {\n            let [dist_from_start, shortest_segment_from_start] = Distance.point2circle(seg.start, circle);\n            let [dist_from_end, shortest_segment_from_end] = Distance.point2circle(seg.end, circle);\n            return Flatten.Utils.LT(dist_from_start, dist_from_end) ?\n                [dist_from_start, shortest_segment_from_start] :\n                [dist_from_end, shortest_segment_from_end];\n        }\n    }\n\n    /**\n     * Calculate distance and shortest segment between segment and arc\n     * @param seg\n     * @param arc\n     * @returns {Number | Segment} - distance and shortest segment\n     */\n    static segment2arc(seg, arc) {\n        /* Case 1 Segment and arc intersected. Return the first point and zero distance */\n        let ip = seg.intersect(arc);\n        if (ip.length > 0) {\n            return [0, new Flatten.Segment(ip[0], ip[0])];\n        }\n\n        // No intersection between segment and arc\n        let line = new Flatten.Line(seg.ps, seg.pe);\n        let circle = new Flatten.Circle(arc.pc, arc.r);\n\n        /* Case 2. Distance to projection of center point to line bigger than radius AND\n         * projection point belongs to segment AND\n           * distance from projection point to circle belongs to arc  =>\n           * return this distance from projection to circle */\n        let [dist_from_center, shortest_segment_from_center] = Distance.point2line(circle.center, line);\n        if (Flatten.Utils.GE(dist_from_center, circle.r) && shortest_segment_from_center.end.on(seg)) {\n            let [dist_from_projection, shortest_segment_from_projection] =\n                Distance.point2circle(shortest_segment_from_center.end, circle);\n            if (shortest_segment_from_projection.end.on(arc)) {\n                return [dist_from_projection, shortest_segment_from_projection];\n            }\n        }\n        /* Case 3. Otherwise closest point is one of the end points of the segment */\n        let dist_and_segment = [];\n        dist_and_segment.push(Distance.point2arc(seg.start, arc));\n        dist_and_segment.push(Distance.point2arc(seg.end, arc));\n\n        let dist_tmp, segment_tmp;\n        [dist_tmp, segment_tmp] = Distance.point2segment(arc.start, seg);\n        dist_and_segment.push([dist_tmp, segment_tmp.reverse()]);\n\n        [dist_tmp, segment_tmp] = Distance.point2segment(arc.end, seg);\n        dist_and_segment.push([dist_tmp, segment_tmp.reverse()]);\n\n        Distance.sort(dist_and_segment);\n        return dist_and_segment[0];\n    }\n\n    /**\n     * Calculate distance and shortest segment between two circles\n     * @param circle1\n     * @param circle2\n     * @returns {Number | Segment} - distance and shortest segment\n     */\n    static circle2circle(circle1, circle2) {\n        let ip = circle1.intersect(circle2);\n        if (ip.length > 0) {\n            return [0, new Flatten.Segment(ip[0], ip[0])];\n        }\n\n        // Case 1. Concentric circles. Convert to arcs and take distance between two arc starts\n        if (circle1.center.equalTo(circle2.center)) {\n            let arc1 = circle1.toArc();\n            let arc2 = circle2.toArc();\n            return Distance.point2point(arc1.start, arc2.start);\n        } else {\n            // Case 2. Not concentric circles\n            let line = new Flatten.Line(circle1.center, circle2.center);\n            let ip1 = line.intersect(circle1);\n            let ip2 = line.intersect(circle2);\n\n            let dist_and_segment = [];\n\n            dist_and_segment.push(Distance.point2point(ip1[0], ip2[0]));\n            dist_and_segment.push(Distance.point2point(ip1[0], ip2[1]));\n            dist_and_segment.push(Distance.point2point(ip1[1], ip2[0]));\n            dist_and_segment.push(Distance.point2point(ip1[1], ip2[1]));\n\n            Distance.sort(dist_and_segment);\n            return dist_and_segment[0];\n        }\n    }\n\n    /**\n     * Calculate distance and shortest segment between two circles\n     * @param circle\n     * @param line\n     * @returns {Number | Segment} - distance and shortest segment\n     */\n    static circle2line(circle, line) {\n        let ip = circle.intersect(line);\n        if (ip.length > 0) {\n            return [0, new Flatten.Segment(ip[0], ip[0])];\n        }\n\n        let [dist_from_center, shortest_segment_from_center] = Distance.point2line(circle.center, line);\n        let [dist, shortest_segment] = Distance.point2circle(shortest_segment_from_center.end, circle);\n        shortest_segment = shortest_segment.reverse();\n        return [dist, shortest_segment];\n    }\n\n    /**\n     * Calculate distance and shortest segment between arc and line\n     * @param arc\n     * @param line\n     * @returns {Number | Segment} - distance and shortest segment\n     */\n    static arc2line(arc, line) {\n        /* Case 1 Line and arc intersected. Return the first point and zero distance */\n        let ip = line.intersect(arc);\n        if (ip.length > 0) {\n            return [0, new Flatten.Segment(ip[0], ip[0])];\n        }\n\n        let circle = new Flatten.Circle(arc.center, arc.r);\n\n        /* Case 2. Distance to projection of center point to line bigger than radius AND\n         * projection point belongs to segment AND\n           * distance from projection point to circle belongs to arc  =>\n           * return this distance from projection to circle */\n        let [dist_from_center, shortest_segment_from_center] = Distance.point2line(circle.center, line);\n        if (Flatten.Utils.GE(dist_from_center, circle.r)) {\n            let [dist_from_projection, shortest_segment_from_projection] =\n                Distance.point2circle(shortest_segment_from_center.end, circle);\n            if (shortest_segment_from_projection.end.on(arc)) {\n                return [dist_from_projection, shortest_segment_from_projection];\n            }\n        } else {\n            let dist_and_segment = [];\n            dist_and_segment.push(Distance.point2line(arc.start, line));\n            dist_and_segment.push(Distance.point2line(arc.end, line));\n\n            Distance.sort(dist_and_segment);\n            return dist_and_segment[0];\n        }\n    }\n\n    /**\n     * Calculate distance and shortest segment between arc and circle\n     * @param arc\n     * @param circle2\n     * @returns {Number | Segment} - distance and shortest segment\n     */\n    static arc2circle(arc, circle2) {\n        let ip = arc.intersect(circle2);\n        if (ip.length > 0) {\n            return [0, new Flatten.Segment(ip[0], ip[0])];\n        }\n\n        let circle1 = new Flatten.Circle(arc.center, arc.r);\n\n        let [dist, shortest_segment] = Distance.circle2circle(circle1, circle2);\n        if (shortest_segment.start.on(arc)) {\n            return [dist, shortest_segment];\n        } else {\n            let dist_and_segment = [];\n\n            dist_and_segment.push(Distance.point2circle(arc.start, circle2));\n            dist_and_segment.push(Distance.point2circle(arc.end, circle2));\n\n            Distance.sort(dist_and_segment);\n\n            return dist_and_segment[0];\n        }\n    }\n\n    /**\n     * Calculate distance and shortest segment between two arcs\n     * @param arc1\n     * @param arc2\n     * @returns {Number | Segment} - distance and shortest segment\n     */\n    static arc2arc(arc1, arc2) {\n        let ip = arc1.intersect(arc2);\n        if (ip.length > 0) {\n            return [0, new Flatten.Segment(ip[0], ip[0])];\n        }\n\n        let circle1 = new Flatten.Circle(arc1.center, arc1.r);\n        let circle2 = new Flatten.Circle(arc2.center, arc2.r);\n\n        let [dist, shortest_segment] = Distance.circle2circle(circle1, circle2);\n        if (shortest_segment.start.on(arc1) && shortest_segment.end.on(arc2)) {\n            return [dist, shortest_segment];\n        } else {\n            let dist_and_segment = [];\n\n            let dist_tmp, segment_tmp;\n\n            [dist_tmp, segment_tmp] = Distance.point2arc(arc1.start, arc2);\n            if (segment_tmp.end.on(arc2)) {\n                dist_and_segment.push([dist_tmp, segment_tmp]);\n            }\n\n            [dist_tmp, segment_tmp] = Distance.point2arc(arc1.end, arc2);\n            if (segment_tmp.end.on(arc2)) {\n                dist_and_segment.push([dist_tmp, segment_tmp]);\n            }\n\n            [dist_tmp, segment_tmp] = Distance.point2arc(arc2.start, arc1);\n            if (segment_tmp.end.on(arc1)) {\n                dist_and_segment.push([dist_tmp, segment_tmp.reverse()]);\n            }\n\n            [dist_tmp, segment_tmp] = Distance.point2arc(arc2.end, arc1);\n            if (segment_tmp.end.on(arc1)) {\n                dist_and_segment.push([dist_tmp, segment_tmp.reverse()]);\n            }\n\n            [dist_tmp, segment_tmp] = Distance.point2point(arc1.start, arc2.start);\n            dist_and_segment.push([dist_tmp, segment_tmp]);\n\n            [dist_tmp, segment_tmp] = Distance.point2point(arc1.start, arc2.end);\n            dist_and_segment.push([dist_tmp, segment_tmp]);\n\n            [dist_tmp, segment_tmp] = Distance.point2point(arc1.end, arc2.start);\n            dist_and_segment.push([dist_tmp, segment_tmp]);\n\n            [dist_tmp, segment_tmp] = Distance.point2point(arc1.end, arc2.end);\n            dist_and_segment.push([dist_tmp, segment_tmp]);\n\n            Distance.sort(dist_and_segment);\n\n            return dist_and_segment[0];\n        }\n    }\n\n    /**\n     * Calculate distance and shortest segment between point and polygon\n     * @param point\n     * @param polygon\n     * @returns {Number | Segment} - distance and shortest segment\n     */\n    static point2polygon(point, polygon) {\n        let min_dist_and_segment = [Number.POSITIVE_INFINITY, new Flatten.Segment()];\n        for (let edge of polygon.edges) {\n            let [dist, shortest_segment] = (edge.shape instanceof Flatten.Segment) ?\n                Distance.point2segment(point, edge.shape) : Distance.point2arc(point, edge.shape);\n            if (Flatten.Utils.LT(dist, min_dist_and_segment[0])) {\n                min_dist_and_segment = [dist, shortest_segment];\n            }\n        }\n        return min_dist_and_segment;\n    }\n\n    static shape2polygon(shape, polygon) {\n        let min_dist_and_segment = [Number.POSITIVE_INFINITY, new Flatten.Segment()];\n        for (let edge of polygon.edges) {\n            let [dist, shortest_segment] = shape.distanceTo(edge.shape);\n            if (Flatten.Utils.LT(dist, min_dist_and_segment[0])) {\n                min_dist_and_segment = [dist, shortest_segment];\n            }\n        }\n        return min_dist_and_segment;\n    }\n\n    /**\n     * Calculate distance and shortest segment between two polygons\n     * @param polygon1\n     * @param polygon2\n     * @returns {Number | Segment} - distance and shortest segment\n     */\n    static polygon2polygon(polygon1, polygon2) {\n        let min_dist_and_segment = [Number.POSITIVE_INFINITY, new Flatten.Segment()];\n        for (let edge1 of polygon1.edges) {\n            for (let edge2 of polygon2.edges) {\n                let [dist, shortest_segment] = edge1.shape.distanceTo(edge2.shape);\n                if (Flatten.Utils.LT(dist, min_dist_and_segment[0])) {\n                    min_dist_and_segment = [dist, shortest_segment];\n                }\n            }\n        }\n        return min_dist_and_segment;\n    }\n\n    /**\n     * Returns [mindist, maxdist] array of squared minimal and maximal distance between boxes\n     * Minimal distance by x is\n     *    (box2.xmin - box1.xmax), if box1 is left to box2\n     *    (box1.xmin - box2.xmax), if box2 is left to box1\n     *    0,                       if box1 and box2 are intersected by x\n     * Minimal distance by y is defined in the same way\n     *\n     * Maximal distance is estimated as a sum of squared dimensions of the merged box\n     *\n     * @param box1\n     * @param box2\n     * @returns {Number | Number} - minimal and maximal distance\n     */\n    static box2box_minmax(box1, box2) {\n        let mindist_x = Math.max(Math.max(box1.xmin - box2.xmax, 0), Math.max(box2.xmin - box1.xmax, 0));\n        let mindist_y = Math.max(Math.max(box1.ymin - box2.ymax, 0), Math.max(box2.ymin - box1.ymax, 0));\n        let mindist = mindist_x * mindist_x + mindist_y * mindist_y;\n\n        let box = box1.merge(box2);\n        let dx = box.xmax - box.xmin;\n        let dy = box.ymax - box.ymin;\n        let maxdist = dx * dx + dy * dy;\n\n        return [mindist, maxdist];\n    }\n\n    static minmax_tree_process_level(shape, level, min_stop, tree) {\n        // Calculate minmax distance to each shape in current level\n        // Insert result into the interval tree for further processing\n        // update min_stop with maxdist, it will be the new stop distance\n        let mindist, maxdist;\n        for (let node of level) {\n\n            // [mindist, maxdist] = Distance.box2box_minmax(shape.box, node.max);\n            // if (Flatten.Utils.GT(mindist, min_stop))\n            //     continue;\n\n            // Estimate min-max dist to the shape stored in the node.item, using node.item.key which is shape's box\n            [mindist, maxdist] = Distance.box2box_minmax(shape.box, node.item.key);\n            if (node.item.value instanceof Flatten.Edge) {\n                tree.insert([mindist, maxdist], node.item.value.shape);\n            } else {\n                tree.insert([mindist, maxdist], node.item.value);\n            }\n            if (Flatten.Utils.LT(maxdist, min_stop)) {\n                min_stop = maxdist;                       // this will be the new distance estimation\n            }\n        }\n\n        if (level.length === 0)\n            return min_stop;\n\n        // Calculate new level from left and right children of the current\n        let new_level_left = level.map(node => node.left.isNil() ? undefined : node.left).filter(node => node !== undefined);\n        let new_level_right = level.map(node => node.right.isNil() ? undefined : node.right).filter(node => node !== undefined);\n        // Merge left and right subtrees and leave only relevant subtrees\n        let new_level = [...new_level_left, ...new_level_right].filter(node => {\n            // Node subtree quick reject, node.max is a subtree box\n            let [mindist, maxdist] = Distance.box2box_minmax(shape.box, node.max);\n            return (Flatten.Utils.LE(mindist, min_stop));\n        });\n\n        min_stop = Distance.minmax_tree_process_level(shape, new_level, min_stop, tree);\n        return min_stop;\n    }\n\n    /**\n     * Calculates sorted tree of [mindist, maxdist] intervals between query shape\n     * and shapes of the planar set.\n     * @param shape\n     * @param set\n     */\n    static minmax_tree(shape, set, min_stop) {\n        let tree = new IntervalTree();\n        let level = [set.index.root];\n        let squared_min_stop = min_stop < Number.POSITIVE_INFINITY ? min_stop * min_stop : Number.POSITIVE_INFINITY;\n        squared_min_stop = Distance.minmax_tree_process_level(shape, level, squared_min_stop, tree);\n        return tree;\n    }\n\n    static minmax_tree_calc_distance(shape, node, min_dist_and_segment) {\n        let min_dist_and_segment_new, stop;\n        if (node != null && !node.isNil()) {\n            [min_dist_and_segment_new, stop] = Distance.minmax_tree_calc_distance(shape, node.left, min_dist_and_segment);\n\n            if (stop) {\n                return [min_dist_and_segment_new, stop];\n            }\n\n            if (Flatten.Utils.LT(min_dist_and_segment_new[0], Math.sqrt(node.item.key.low))) {\n                return [min_dist_and_segment_new, true];   // stop condition\n            }\n\n            let [dist, shortest_segment] = Distance.distance(shape, node.item.value);\n            // console.log(dist)\n            if (Flatten.Utils.LT(dist, min_dist_and_segment_new[0])) {\n                min_dist_and_segment_new = [dist, shortest_segment];\n            }\n\n            [min_dist_and_segment_new, stop] = Distance.minmax_tree_calc_distance(shape, node.right, min_dist_and_segment_new);\n\n            return [min_dist_and_segment_new, stop];\n        }\n\n        return [min_dist_and_segment, false];\n    }\n\n    /**\n     * Calculates distance between shape and Planar Set of shapes\n     * @param shape\n     * @param {PlanarSet} set\n     * @param {Number} min_stop\n     * @returns {*}\n     */\n    static shape2planarSet(shape, set, min_stop = Number.POSITIVE_INFINITY) {\n        let min_dist_and_segment = [min_stop, new Flatten.Segment()];\n        let stop = false;\n        if (set instanceof Flatten.PlanarSet) {\n            let tree = Distance.minmax_tree(shape, set, min_stop);\n            [min_dist_and_segment, stop] = Distance.minmax_tree_calc_distance(shape, tree.root, min_dist_and_segment);\n        }\n        return min_dist_and_segment;\n    }\n\n    static sort(dist_and_segment) {\n        dist_and_segment.sort((d1, d2) => {\n            if (Flatten.Utils.LT(d1[0], d2[0])) {\n                return -1;\n            }\n            if (Flatten.Utils.GT(d1[0], d2[0])) {\n                return 1;\n            }\n            return 0;\n        });\n    }\n\n    static distance(shape1, shape2) {\n        return shape1.distanceTo(shape2);\n    }\n}\n\nFlatten.Distance = Distance;\n\n/**\n * Created by Alex Bol on 2/18/2017.\n */\n\n\nFlatten.BooleanOperations = BooleanOperations;\nFlatten.Relations = Relations;\n\nexport { Arc, BOUNDARY$1 as BOUNDARY, BooleanOperations, Box, CCW, CW, Circle$1 as Circle, Distance, Edge, Errors, Face, INSIDE$2 as INSIDE, Inversion, Line$1 as Line, Matrix, Multiline, ORIENTATION, OUTSIDE$1 as OUTSIDE, PlanarSet, Point$1 as Point, Polygon, Ray, Relations, Segment, smart_intersections as SmartIntersections, Utils$1 as Utils, Vector$1 as Vector, arc, box, circle, Flatten as default, inversion, line, matrix, multiline, point, polygon, ray, ray_shoot, segment, vector$1 as vector };\n","import type {LatLngExpression} from 'leaflet';\nimport L, {Bounds, LatLng, LatLngBounds, Path, Point, Util} from 'leaflet';\nimport Flatten from '@flatten-js/core';\nimport Matrix = Flatten.Matrix;\nimport type {Points, Shape, ShapeSet, Units} from './types';\nimport type {ShapeOptions, TrackSymbolOptions} from './options';\n\nconst DEFAULT_SIZE = 24;\nconst DEFAULT_LEADER_TIME = 60;\n\n/**\n * Track symbol.\n */\nexport class TrackSymbol\n    extends Path {\n\n    /** Default 'withHeading' shape points. */\n    public static DEFAULT_HEADING_SHAPE_POINTS: Points = [[0.75, 0], [-0.25, 0.3], [-0.25, -0.3]];\n\n    /** Default 'withoutHeading' shape points. */\n    public static DEFAULT_NOHEADING_SHAPE_POINTS: Points = [[0.3, 0], [0, 0.3], [-0.3, 0], [0, -0.3]];\n\n    /** Default shape set. */\n    private static DEFAULT_SHAPE_SET: ShapeSet = {\n        withHeading: {\n            points: TrackSymbol.DEFAULT_HEADING_SHAPE_POINTS,\n            length: DEFAULT_SIZE,\n            breadth: DEFAULT_SIZE,\n            units: \"pixels\",\n        },\n        withoutHeading: {\n            points: TrackSymbol.DEFAULT_NOHEADING_SHAPE_POINTS,\n            length: DEFAULT_SIZE,\n            breadth: DEFAULT_SIZE,\n            units: \"pixels\",\n        },\n    };\n\n    /** Location. */\n    private _latLng: LatLng;\n    /** Heading (radians, from north, clockwise. */\n    private _heading?: number;\n    /** Course (radians, from north, clockwise. */\n    private _course?: number;\n    /** Speed (m/s). */\n    private _speed?: number;\n     /** Shape options. */\n    private _shapeOptions: ShapeOptions;\n\n    /** Current shape points. */\n    private _currentShapePoints: Point[] | undefined;\n    /** Current leader points. */\n    private _currentLeaderPoints: Point[] | undefined;\n    /** Current bounds. */\n    private _currentBounds: Bounds | undefined;\n    /** Current lat/lng bounds. */\n    private _currentLatLngBounds: LatLngBounds | undefined;\n\n    /**\n     * TrackSymbol constructor.\n     *\n     * @param latLng - Initial location.\n     * @param options - Options.\n     */\n    constructor(latLng: LatLngExpression, options?: TrackSymbolOptions) {\n        super();\n\n        Util.setOptions(this, options);\n        if (latLng == undefined) {\n            throw Error(\"latLng required\");\n        }\n        options = options || {};\n        this._latLng = L.latLng(latLng);\n        this._heading = options.heading;\n        this._course = options.course;\n        this._speed = options.speed;\n        this._setShapeOptions(options.shapeOptions);\n    }\n\n    // ---- Leaflet\n\n    /**\n     * Project to layer.\n     *\n     * [Leaflet internal]\n     */\n    protected _project() {\n        this._currentShapePoints = this._getProjectedShapePoints();\n        this._currentLeaderPoints = this._getLeaderShapePoints();\n\n        const bounds = new Bounds();\n        for (let i = 0; i < this._currentShapePoints.length; i++) {\n            const point = this._currentShapePoints[i];\n            bounds.extend(point);\n        }\n        if (this._currentLeaderPoints !== undefined) {\n            for (let i = 0; i < this._currentLeaderPoints.length; i++) {\n                const point = this._currentShapePoints[i];\n                bounds.extend(point);\n            }\n        }\n        this._currentBounds = bounds;\n        this._currentLatLngBounds = new LatLngBounds(\n            this._map.layerPointToLatLng(bounds.getBottomLeft()),\n            this._map.layerPointToLatLng(bounds.getTopRight())\n        );\n    }\n\n    /**\n     * Update element.\n     *\n     * [Leaflet internal]\n     */\n    protected _update() {\n        if (!this._map) {\n            return;\n        }\n        let viewPath = TrackSymbol._toSVGPath(this._currentShapePoints, true);\n        if (this._currentLeaderPoints !== undefined) {\n            viewPath += ' ' + TrackSymbol._toSVGPath(this._currentLeaderPoints, false);\n        }\n        this.getElement().setAttribute('d', viewPath);\n    }\n\n    // ----\n\n    /**\n     * Set shape options.\n     *\n     * @param shapeOptions - Shape options.\n     */\n    private _setShapeOptions(shapeOptions: ShapeOptions | undefined) {\n        this._shapeOptions = shapeOptions || {\n            leaderTime: DEFAULT_LEADER_TIME,\n            defaultShapeSet: TrackSymbol.DEFAULT_SHAPE_SET,\n        };\n        if (this._shapeOptions.leaderTime === undefined) {\n            this._shapeOptions.leaderTime = DEFAULT_LEADER_TIME;\n        }\n        if (this._shapeOptions.defaultShapeSet === undefined) {\n            this._shapeOptions.defaultShapeSet = TrackSymbol.DEFAULT_SHAPE_SET;\n        }\n        if (this._shapeOptions.shapeSetEntries !== undefined) {\n            this._shapeOptions.shapeSetEntries\n                .sort((a, b) => b.minZoomLevel - a.minZoomLevel);\n        }\n    }\n\n    // ---\n\n    /**\n     * Sets the location.\n     *\n     * @param latLng - Location.\n     * @returns this\n     */\n    public setLatLng(latLng: LatLngExpression): this {\n        const oldLatLng = this._latLng;\n        this._latLng = L.latLng(latLng);\n        this.fire('move', {\n            oldLatLng: oldLatLng,\n            latlng: this._latLng,\n        });\n        return this.redraw();\n    }\n\n    /**\n     * Sets the heading.\n     *\n     * @param heading - Heading (unit: radians, from north, clockwise).\n     * @returns this\n     */\n    public setHeading(heading: number | undefined): this {\n        this._heading = heading;\n        return this.redraw();\n    }\n\n    /**\n     * Sets the course over ground.\n     *\n     * @param course - Course over ground (unit: radians, from north, clockwise).\n     * @returns this\n     */\n    public setCourse(course: number | undefined): this {\n        this._course = course;\n        return this.redraw();\n    }\n\n    /**\n     * Sets the speed.\n     *\n     * @param speed - Speed (unit: m/s).\n     * @returns this\n     */\n    public setSpeed(speed: number | undefined): this {\n        this._speed = speed;\n        return this.redraw();\n    }\n\n    /**\n     * Sets the shape options.\n     *\n     * @param shapeOptions - Shape options.\n     * @returns this\n     */\n    public setShapeOptions(shapeOptions: ShapeOptions): this {\n        this._setShapeOptions(shapeOptions);\n        return this.redraw();\n    }\n\n    /**\n     * Returns the bounding box.\n     *\n     * @returns The bounding box.\n     */\n    public getBounds(): LatLngBounds {\n        return this._currentLatLngBounds;\n    }\n\n    /**\n     * Returns the location.\n     *\n     * @returns The location.\n     */\n    public getLatLng(): LatLng {\n        return this._latLng;\n    }\n\n    /**\n     * Returns the speed.\n     *\n     * @returns The speed (m/s).\n     */\n    public getSpeed(): number | undefined {\n        return this._speed;\n    }\n\n    /**\n     * Returns the heading.\n     *\n     * @returns The heading (radians, from north, clockwise).\n     */\n    public getHeading(): number | undefined {\n        return this._heading;\n    }\n\n    /**\n     * Returns the course.\n     *\n     * @returns The course (radians, from north, clockwise).\n     */\n    public getCourse(): number | undefined {\n        return this._course;\n    }\n\n    /**\n     * Creates a shape.\n     *\n     * @param points - Points.\n     * @param size - Size (units: pixels).\n     * @returns The new shape.\n     */\n    public static createShape(points: Points, size: number): Shape {\n        return {\n            points: points,\n            length: size,\n            breadth: size,\n            units: \"pixels\",\n        };\n    }\n\n    /**\n     * Creates a shape set.\n     *\n     * @param size - Size (units: pixels).\n     * @returns The new shape set.\n     */\n    public static createShapeSet(size: number): ShapeSet {\n        return {\n            withHeading: TrackSymbol.createShape(TrackSymbol.DEFAULT_HEADING_SHAPE_POINTS, size),\n            withoutHeading: TrackSymbol.createShape(TrackSymbol.DEFAULT_NOHEADING_SHAPE_POINTS, size),\n        };\n    }\n\n    /**\n     * Get latitude size of y-distance.\n     *\n     * @param value - Y distance (m).\n     * @returns dLat\n     */\n    private _getLatSizeOf(value): number {\n        return (value / 40075017) * 360;\n    }\n\n    /**\n     * Get longitude size of x-distance.\n     *\n     * @param value - X distance (m).\n     * @returns dLng\n     */\n    private _getLngSizeOf(value): number {\n        return ((value / 40075017) * 360) / Math.cos((Math.PI / 180) * this._latLng.lat);\n    }\n\n    /**\n     * Get view angle from model.\n     *\n     * @param modelAngle - Model angle (radians).\n     * @returns View angle from model (radians).\n     */\n    private _getViewAngleFromModel(modelAngle: number): number {\n        return modelAngle - Math.PI / 2.0;\n    }\n\n    /**\n     * Get leader shape points.\n     *\n     * @returns Points.\n     */\n    private _getLeaderShapePoints(): Point[] | undefined {\n        if ((this._course === undefined) || (this._speed === undefined)) {\n            return undefined;\n        }\n        const angle = this._getViewAngleFromModel(this._course);\n        const leaderLength = this._speed * this._shapeOptions.leaderTime;\n        const leaderEndLatLng = this._calcRelativeLatLng(this._latLng, leaderLength, angle);\n        return this._latLngsToLayerPoints(this._latLng, leaderEndLatLng);\n    }\n\n    /**\n     * Calculate relative lat/lng.\n     *\n     * @param latLng - LatLng.\n     * @param distance - Distance (meters).\n     * @param angle - Angle (radians).\n     * @returns Calculated LatLng.\n     */\n    private _calcRelativeLatLng(latLng: LatLng, distance: number, angle: number): LatLng {\n        return new LatLng(\n            latLng.lat - this._getLatSizeOf(distance * Math.sin(angle)),\n            latLng.lng + this._getLngSizeOf(distance * Math.cos(angle))\n        );\n    }\n\n    /**\n     * Convert LatLngs to map layer points.\n     *\n     * @param latLngs - LatLngs.\n     * @returns Points.\n     */\n    private _latLngsToLayerPoints(...latLngs: LatLng[]): Point[] {\n        return latLngs.map(latLng => this._map.latLngToLayerPoint(latLng));\n    }\n\n    /**\n     * Gets the shape set.\n     *\n     * @returns The shape set.\n     */\n    private _getShapeSet(): ShapeSet {\n        if ((this._shapeOptions.shapeSetEntries === undefined)\n            || (this._shapeOptions.shapeSetEntries.length == 0)) {\n            return this._shapeOptions.defaultShapeSet;\n        }\n        const zoomLevel = this._map.getZoom();\n        const shapeSetEntriesFiltered = this._shapeOptions.shapeSetEntries\n            .sort((a, b) => b.minZoomLevel - a.minZoomLevel)\n            .filter(shapeSetEntry => zoomLevel >= shapeSetEntry.minZoomLevel);\n        if (shapeSetEntriesFiltered.length > 0) {\n            return shapeSetEntriesFiltered[0].shapeSet;\n        } else {\n            return this._shapeOptions.defaultShapeSet;\n        }\n    }\n\n    /**\n     * Gets the shape.\n     *\n     * @returns The shape.\n     */\n    private _getShape(): Shape {\n        const shapeSet = this._getShapeSet();\n        return (this._heading !== undefined) ? shapeSet.withHeading : shapeSet.withoutHeading;\n    }\n\n    /**\n     * Get transformed shape points.\n     *\n     * @returns Transformed points and units.\n     */\n    private _getTransformedShapePoints(): [Points, Units] {\n        const shape = this._getShape();\n        let m = new Matrix();\n        if (this._heading !== undefined) {\n            const headingAngle = this._getViewAngleFromModel(this._heading);\n            m = m.rotate(headingAngle);\n        }\n        if (shape.center !== undefined) {\n            m = m.translate(-shape.center[0], -shape.center[1]);\n        }\n        m = m.scale(shape.length, shape.breadth);\n        const points = shape.points.map(point => m.transform(point));\n        return [points, shape.units];\n    }\n\n    /**\n     * Get projected shape points.\n     *\n     * @returns Points projected to map layer.\n     */\n    private _getProjectedShapePoints(): Point[] {\n        const [points, units] = this._getTransformedShapePoints();\n        switch (units) {\n            case \"pixels\": {\n                const p = this._map.latLngToLayerPoint(this._latLng);\n                const m = new Matrix().translate(p.x, p.y);\n                return points.map(point => {\n                    const p1 = m.transform(point);\n                    return new Point(p1[0], p1[1]);\n                });\n            }\n            case \"meters\": {\n                return points.map(point => this._map.latLngToLayerPoint(\n                    new LatLng(\n                        this._latLng.lat - this._getLatSizeOf(point[1]),\n                        this._latLng.lng + this._getLngSizeOf(point[0])\n                    )\n                ));\n            }\n            default:\n                break;\n        }\n    }\n\n    /**\n     * Converts points to an SVG path string.\n     *\n     * @param points - Points.\n     * @param close - Close path.\n     * @returns SVG path string.\n     */\n    private static _toSVGPath(points: Point[], close: boolean): string {\n        let result = '';\n        for (let i = 0; i < points.length; i++) {\n            const point = points[i];\n            if (result === '') {\n                result = `M ${point.x} ${point.y} `;\n            } else {\n                result += `L ${point.x} ${point.y} `;\n            }\n        }\n        if (close) {\n            result += 'Z';\n        }\n        return result;\n    }\n}\n","import {TrackSymbol} from '../trackSymbol';\nimport type {ShapeOptions} from '../options';\nimport type {Points, ShapeSet} from '../types';\nimport type {AISTrackSymbolOptions} from './options';\nimport type {Dimension, ETA, PositionReport, ShipStaticData} from './types';\nimport {DomUtil, Util} from 'leaflet';\n\nconst DEFAULT_SIZE = 24;\nconst DEFAULT_MIN_ZOOM_LEVEL = 14;\nconst DEFAULT_LEADER_TIME = 60;\nconst KNOTS_PER_METER_PER_SECOND = 1.944;\nconst MAX_SOG_EXCLUSIVE = 102.3;\nconst MAX_COG_EXCLUSIVE = 360;\nconst MAX_HEADING_EXCLUSIVE = 360;\n\ninterface ShipType {\n    name: string;\n    color: string;\n    fillColor: string;\n}\n\nconst RESERVED_COLOR = \"#000000\";\nconst RESERVED_FILL_COLOR = \"#d3d3d3\";\nconst WIG_COLOR = \"#000000\";\nconst WIG_FILL_COLOR = \"#d3d3d3\";\nconst TYPE_3X_COLOR = \"#8b008b\";\nconst TYPE_3X_FILL_COLOR = \"#ff00ff\";\nconst HSC_COLOR = \"#00008b\";\nconst HSC_FILL_COLOR = \"#ffff00\";\nconst TYPE_5X_COLOR = \"#008b8b\";\nconst TYPE_5X_FILL_COLOR = \"#00ffff\";\nconst PASSENGER_COLOR = \"#00008b\";\nconst PASSENGER_FILL_COLOR = \"#0000ff\";\nconst CARGO_COLOR = \"#006400\";\nconst CARGO_FILL_COLOR = \"#90ee90\";\nconst TANKER_COLOR = \"#8b0000\";\nconst TANKER_FILL_COLOR = \"#ff0000\";\nconst OTHER_COLOR = \"#008b8b\";\nconst OTHER_FILL_COLOR = \"#00ffff\";\n\nconst TYPES: { [key: number]: ShipType } = {\n    0: newShipType('Not available', WIG_COLOR, WIG_FILL_COLOR),\n    20: newShipType('Wing in ground (WIG), all ships of this type', WIG_COLOR, WIG_FILL_COLOR),\n    21: newShipType('Wing in ground (WIG), Hazardous category A', WIG_COLOR, WIG_FILL_COLOR),\n    22: newShipType('Wing in ground (WIG), Hazardous category B', WIG_COLOR, WIG_FILL_COLOR),\n    23: newShipType('Wing in ground (WIG), Hazardous category C', WIG_COLOR, WIG_FILL_COLOR),\n    24: newShipType('Wing in ground (WIG), Hazardous category D', WIG_COLOR, WIG_FILL_COLOR),\n    25: newShipType('Wing in ground (WIG), Reserved for future use', WIG_COLOR, WIG_FILL_COLOR),\n    26: newShipType('Wing in ground (WIG), Reserved for future use', WIG_COLOR, WIG_FILL_COLOR),\n    27: newShipType('Wing in ground (WIG), Reserved for future use', WIG_COLOR, WIG_FILL_COLOR),\n    28: newShipType('Wing in ground (WIG), Reserved for future use', WIG_COLOR, WIG_FILL_COLOR),\n    29: newShipType('Wing in ground (WIG), Reserved for future use', WIG_COLOR, WIG_FILL_COLOR),\n    30: newShipType('Fishing', TYPE_3X_COLOR, TYPE_3X_FILL_COLOR),\n    31: newShipType('Towing', TYPE_3X_COLOR, TYPE_3X_FILL_COLOR),\n    32: newShipType('Towing: length exceeds 200m or breadth exceeds 25m', TYPE_3X_COLOR, TYPE_3X_FILL_COLOR),\n    33: newShipType('Dredging or underwater ops', TYPE_3X_COLOR, TYPE_3X_FILL_COLOR),\n    34: newShipType('Diving ops', TYPE_3X_COLOR, TYPE_3X_FILL_COLOR),\n    35: newShipType('Military ops', TYPE_3X_COLOR, TYPE_3X_FILL_COLOR),\n    36: newShipType('Sailing', TYPE_3X_COLOR, TYPE_3X_FILL_COLOR),\n    37: newShipType('Pleasure Craft', TYPE_3X_COLOR, TYPE_3X_FILL_COLOR),\n    40: newShipType('High speed craft (HSC), all ships of this type', HSC_COLOR, HSC_FILL_COLOR),\n    41: newShipType('High speed craft (HSC), Hazardous category A', HSC_COLOR, HSC_FILL_COLOR),\n    42: newShipType('High speed craft (HSC), Hazardous category B', HSC_COLOR, HSC_FILL_COLOR),\n    43: newShipType('High speed craft (HSC), Hazardous category C', HSC_COLOR, HSC_FILL_COLOR),\n    44: newShipType('High speed craft (HSC), Hazardous category D', HSC_COLOR, HSC_FILL_COLOR),\n    45: newShipType('High speed craft (HSC), Reserved for future use', HSC_COLOR, HSC_FILL_COLOR),\n    46: newShipType('High speed craft (HSC), Reserved for future use', HSC_COLOR, HSC_FILL_COLOR),\n    47: newShipType('High speed craft (HSC), Reserved for future use', HSC_COLOR, HSC_FILL_COLOR),\n    48: newShipType('High speed craft (HSC), Reserved for future use', HSC_COLOR, HSC_FILL_COLOR),\n    49: newShipType('High speed craft (HSC), No additional information', HSC_COLOR, HSC_FILL_COLOR),\n    50: newShipType('Pilot Vessel', TYPE_5X_COLOR, TYPE_5X_FILL_COLOR),\n    51: newShipType('Search and Rescue vessel', TYPE_5X_COLOR, TYPE_5X_FILL_COLOR),\n    52: newShipType('Tug', TYPE_5X_COLOR, TYPE_5X_FILL_COLOR),\n    53: newShipType('Port Tender', TYPE_5X_COLOR, TYPE_5X_FILL_COLOR),\n    54: newShipType('Anti-pollution equipment', TYPE_5X_COLOR, TYPE_5X_FILL_COLOR),\n    55: newShipType('Law Enforcement', TYPE_5X_COLOR, TYPE_5X_FILL_COLOR),\n    56: newShipType('Spare - Local Vessel', TYPE_5X_COLOR, TYPE_5X_FILL_COLOR),\n    57: newShipType('Spare - Local Vessel', TYPE_5X_COLOR, TYPE_5X_FILL_COLOR),\n    58: newShipType('Medical Transport', TYPE_5X_COLOR, TYPE_5X_FILL_COLOR),\n    59: newShipType('Noncombatant ship according to RR Resolution No. 18', '', ''),\n    60: newShipType('Passenger, all ships of this type', PASSENGER_COLOR, PASSENGER_FILL_COLOR),\n    61: newShipType('Passenger, Hazardous category A', PASSENGER_COLOR, PASSENGER_FILL_COLOR),\n    62: newShipType('Passenger, Hazardous category B', PASSENGER_COLOR, PASSENGER_FILL_COLOR),\n    63: newShipType('Passenger, Hazardous category C', PASSENGER_COLOR, PASSENGER_FILL_COLOR),\n    64: newShipType('Passenger, Hazardous category D', PASSENGER_COLOR, PASSENGER_FILL_COLOR),\n    65: newShipType('Passenger, Reserved for future use', PASSENGER_COLOR, PASSENGER_FILL_COLOR),\n    66: newShipType('Passenger, Reserved for future use', PASSENGER_COLOR, PASSENGER_FILL_COLOR),\n    67: newShipType('Passenger, Reserved for future use', PASSENGER_COLOR, PASSENGER_FILL_COLOR),\n    68: newShipType('Passenger, Reserved for future use', PASSENGER_COLOR, PASSENGER_FILL_COLOR),\n    69: newShipType('Passenger, No additional information', PASSENGER_COLOR, PASSENGER_FILL_COLOR),\n    70: newShipType('Cargo, all ships of this type', CARGO_COLOR, CARGO_FILL_COLOR),\n    71: newShipType('Cargo, Hazardous category A', CARGO_COLOR, CARGO_FILL_COLOR),\n    72: newShipType('Cargo, Hazardous category B', CARGO_COLOR, CARGO_FILL_COLOR),\n    73: newShipType('Cargo, Hazardous category C', CARGO_COLOR, CARGO_FILL_COLOR),\n    74: newShipType('Cargo, Hazardous category D', CARGO_COLOR, CARGO_FILL_COLOR),\n    75: newShipType('Cargo, Reserved for future use', CARGO_COLOR, CARGO_FILL_COLOR),\n    76: newShipType('Cargo, Reserved for future use', CARGO_COLOR, CARGO_FILL_COLOR),\n    77: newShipType('Cargo, Reserved for future use', CARGO_COLOR, CARGO_FILL_COLOR),\n    78: newShipType('Cargo, Reserved for future use', CARGO_COLOR, CARGO_FILL_COLOR),\n    79: newShipType('Cargo, No additional information', CARGO_COLOR, CARGO_FILL_COLOR),\n    80: newShipType('Tanker, all ships of this type', TANKER_COLOR, TANKER_FILL_COLOR),\n    81: newShipType('Tanker, Hazardous category A', TANKER_COLOR, TANKER_FILL_COLOR),\n    82: newShipType('Tanker, Hazardous category B', TANKER_COLOR, TANKER_FILL_COLOR),\n    83: newShipType('Tanker, Hazardous category C', TANKER_COLOR, TANKER_FILL_COLOR),\n    84: newShipType('Tanker, Hazardous category D', TANKER_COLOR, TANKER_FILL_COLOR),\n    85: newShipType('Tanker, Reserved for future use', TANKER_COLOR, TANKER_FILL_COLOR),\n    86: newShipType('Tanker, Reserved for future use', TANKER_COLOR, TANKER_FILL_COLOR),\n    87: newShipType('Tanker, Reserved for future use', TANKER_COLOR, TANKER_FILL_COLOR),\n    88: newShipType('Tanker, Reserved for future use', TANKER_COLOR, TANKER_FILL_COLOR),\n    89: newShipType('Tanker, No additional information', TANKER_COLOR, TANKER_FILL_COLOR),\n    90: newShipType('Other Type, all ships of this type', OTHER_COLOR, OTHER_FILL_COLOR),\n    91: newShipType('Other Type, Hazardous category A', OTHER_COLOR, OTHER_FILL_COLOR),\n    92: newShipType('Other Type, Hazardous category B', OTHER_COLOR, OTHER_FILL_COLOR),\n    93: newShipType('Other Type, Hazardous category C', OTHER_COLOR, OTHER_FILL_COLOR),\n    94: newShipType('Other Type, Hazardous category D', OTHER_COLOR, OTHER_FILL_COLOR),\n    95: newShipType('Other Type, Reserved for future use', OTHER_COLOR, OTHER_FILL_COLOR),\n    96: newShipType('Other Type, Reserved for future use', OTHER_COLOR, OTHER_FILL_COLOR),\n    97: newShipType('Other Type, Reserved for future use', OTHER_COLOR, OTHER_FILL_COLOR),\n    98: newShipType('Other Type, Reserved for future use', OTHER_COLOR, OTHER_FILL_COLOR),\n    99: newShipType('Other Type, no additional information', OTHER_COLOR, OTHER_FILL_COLOR),\n};\nconst RESERVED_TYPE = newShipType('Reserved', RESERVED_COLOR, RESERVED_FILL_COLOR);\nconst UNKNOWN_TYPE = newShipType('Unknown', RESERVED_COLOR, RESERVED_FILL_COLOR);\n\nexport class AISTrackSymbol\n    extends TrackSymbol {\n\n    /** Default silhouette shape points. */\n    public static DEFAULT_SILHOUETTE_SHAPE_POINTS: Points = [[1, 0.5], [0.75, 1], [0, 1], [0, 0], [0.75, 0]];\n\n    private readonly _leaderTime: number;\n    private readonly _minZoomLevel: number;\n    private readonly _size: number;\n    private _positionReport: PositionReport;\n    private _shipStaticData?: ShipStaticData;\n\n    /**\n     * AISTrackSymbol constructor.\n     *\n     * @param positionReport - Position report.\n     * @param options - Options.\n     */\n    constructor(positionReport: PositionReport, options?: AISTrackSymbolOptions) {\n        super([positionReport.latitude, positionReport.longitude], options);\n\n        Util.setOptions(this, options);\n        options = options || {};\n        this._leaderTime = options.leaderTime || DEFAULT_LEADER_TIME;\n        this._minZoomLevel = options.minZoomLevel || DEFAULT_MIN_ZOOM_LEVEL;\n        this._size = options.size || DEFAULT_SIZE;\n        this.setPositionReport(positionReport);\n        this.setShipStaticData(options.shipStaticData);\n    }\n\n    /**\n     * Sets the position report.\n     *\n     * @param positionReport - Position report.\n     * @returns this\n     */\n    public setPositionReport(positionReport: PositionReport): this {\n        this._positionReport = positionReport;\n        this.setLatLng([positionReport.latitude, positionReport.longitude]);\n        if (!isNullOrUndefined(positionReport.trueHeading) && (positionReport.trueHeading < MAX_HEADING_EXCLUSIVE)) {\n            this.setHeading(toRadians(positionReport.trueHeading));\n        } else {\n            this.setHeading(undefined);\n        }\n        if (!isNullOrUndefined(positionReport.cog) && (positionReport.cog < MAX_COG_EXCLUSIVE)) {\n            this.setCourse(toRadians(positionReport.cog));\n        } else {\n            this.setCourse(undefined);\n        }\n        if (!isNullOrUndefined(positionReport.sog) && (positionReport.sog < MAX_SOG_EXCLUSIVE)) {\n            this.setSpeed(positionReport.sog / KNOTS_PER_METER_PER_SECOND);\n        } else {\n            this.setSpeed(undefined);\n        }\n        this.bindPopup(this._getPopupContent(this._positionReport, this._shipStaticData));\n        return this.redraw();\n    }\n\n    /**\n     * Sets the ship static data.\n     *\n     * @param shipStaticData - Ship static data.\n     * @returns this\n     */\n    public setShipStaticData(shipStaticData?: ShipStaticData): this {\n        this._shipStaticData = shipStaticData;\n        const shipType = !isNullOrUndefined(shipStaticData) && !isNullOrUndefined(shipStaticData.type)\n            ? getShipType(shipStaticData.type) : TYPES[0];\n        this.setStyle({\n            color: shipType.color,\n            fill: true,\n            fillOpacity: 1.0,\n            fillColor: shipType.fillColor,\n        });\n        this.bindPopup(this._getPopupContent(this._positionReport, this._shipStaticData));\n        return this.setShapeOptions(AISTrackSymbol._getShapeOptions(this._leaderTime, this._minZoomLevel, this._size,\n            shipStaticData));\n    }\n\n    private static _getShapeOptions(leaderTime: number, minZoomLevel: number, size: number,\n                                    shipStaticData?: ShipStaticData): ShapeOptions {\n        const shapeOptions: ShapeOptions = {\n            leaderTime: leaderTime,\n            defaultShapeSet: TrackSymbol.createShapeSet(size),\n        };\n        const shapeSet = AISTrackSymbol._getShapeSet(size, shipStaticData);\n        if (shapeSet !== null) {\n            shapeOptions.shapeSetEntries = [{\n                shapeSet: shapeSet,\n                minZoomLevel: minZoomLevel,\n            }];\n        }\n        return shapeOptions;\n    }\n\n    private static _getShapeSet(size: number, shipStaticData?: ShipStaticData): ShapeSet | null {\n        if (isNullOrUndefined(shipStaticData) || isNullOrUndefined(shipStaticData.dimension)\n            || !isDimensionValid(shipStaticData.dimension)) {\n            return null;\n        }\n        return {\n            withHeading: {\n                points: AISTrackSymbol.DEFAULT_SILHOUETTE_SHAPE_POINTS,\n                center: [shipStaticData.dimension.B, shipStaticData.dimension.D],\n                length: shipStaticData.dimension.A + shipStaticData.dimension.B,\n                breadth: shipStaticData.dimension.C + shipStaticData.dimension.D,\n                units: \"meters\",\n            },\n            withoutHeading: TrackSymbol.createShape(TrackSymbol.DEFAULT_NOHEADING_SHAPE_POINTS, size),\n        };\n    }\n\n    private _getPopupContent(positionReport?: PositionReport, shipStaticData?: ShipStaticData): HTMLElement {\n        let content = \"<table>\";\n        if (!isNullOrUndefined(shipStaticData)) {\n            content += createTableRow(\"User ID\", shipStaticData.userId);\n            content += createTableRow(\"IMO Number\", shipStaticData.imoNumber);\n            content += createTableRow(\"Call sign\", shipStaticData.callSign);\n            content += createTableRow(\"Name\", shipStaticData.name);\n        }\n        if (!isNullOrUndefined(positionReport)) {\n            content += createTableRow(\"Location\", `${positionReport.latitude.toFixed(5)}, ${positionReport.longitude.toFixed(5)}`);\n            content += createTableRow(\"SOG\",\n                !isNullOrUndefined(positionReport.sog) && (positionReport.sog < MAX_SOG_EXCLUSIVE)\n                    ? positionReport.sog.toFixed(2) : undefined, \"knots\");\n            content += createTableRow(\"COG\",\n                !isNullOrUndefined(positionReport.cog) && (positionReport.cog < MAX_COG_EXCLUSIVE)\n                    ? positionReport.cog.toFixed(1) : undefined, \"°\");\n            content += createTableRow(\"Heading\",\n                !isNullOrUndefined(positionReport.trueHeading) && (positionReport.trueHeading < MAX_HEADING_EXCLUSIVE)\n                    ? positionReport.trueHeading.toFixed(1) : undefined, \"°\");\n            content += createTableRow(\"Navigation status\",\n                toNavigationStatusString(positionReport.navigationalStatus));\n        }\n        if (!isNullOrUndefined(shipStaticData)) {\n            content += createTableRow(\"Type\", toTypeString(shipStaticData.type));\n            if (!isNullOrUndefined(shipStaticData.dimension) && isDimensionValid(shipStaticData.dimension)) {\n                content += createTableRow(\"Ship length\",\n                    shipStaticData.dimension.A + shipStaticData.dimension.B, \"m\");\n                content += createTableRow(\"Ship width\",\n                    shipStaticData.dimension.C + shipStaticData.dimension.D, \"m\");\n            }\n            content += createTableRow(\"Fix type\", toFixTypeString(shipStaticData.fixType));\n            content += createTableRow(\"ETA\", toETAString(shipStaticData.eta));\n            content += createTableRow(\"Maximum static draught\",\n                !isNullOrUndefined(shipStaticData.maximumStaticDraught)\n                    ? shipStaticData.maximumStaticDraught.toFixed(1) : undefined, \"m\");\n            content += createTableRow(\"Destination\", shipStaticData.destination);\n            content += createTableRow(\"DTE\", shipStaticData.dte);\n        }\n        content += \"</table>\";\n        const popupContent = DomUtil.create(\"div\");\n        popupContent.innerHTML = content;\n        return popupContent;\n    }\n}\n\nfunction toTypeString(type: number): string | undefined {\n    if (isNullOrUndefined(type)) {\n        return undefined;\n    }\n    const shipType = getShipType(type);\n    return shipType.name;\n}\n\nfunction toFixTypeString(fixType: number): string | undefined {\n    if (isNullOrUndefined(fixType)) {\n        return undefined;\n    }\n    switch (fixType) {\n        case 0:\n            return undefined;\n        case 1:\n            return 'GPS';\n        case 2:\n            return 'GLONASS';\n        case 3:\n            return 'combined GPS/GLONASS';\n        case 4:\n            return 'Loran-C';\n        case 5:\n            return 'Chayka';\n        case 6:\n            return 'integrated navigation system';\n        case 7:\n            return 'surveyed';\n        case 8:\n            return 'Galileo';\n        case 9:\n        case 10:\n        case 11:\n        case 12:\n        case 13:\n        case 14:\n            return `not used (${fixType})`;\n        case 15:\n            return \"internal GNSS\";\n        default:\n            return `unknown (${fixType})`;\n    }\n}\n\nfunction toNavigationStatusString(navigationStatus: number): string | undefined {\n    if (isNullOrUndefined(navigationStatus)) {\n        return undefined;\n    }\n    switch (navigationStatus) {\n        case 0:\n            return 'Under way using engine';\n        case 1:\n            return 'At anchor';\n        case 2:\n            return 'Not under command';\n        case 3:\n            return 'Restricted manoeuverability';\n        case 4:\n            return 'Constrained by her draught';\n        case 5:\n            return 'Moored';\n        case 6:\n            return 'Aground';\n        case 7:\n            return 'Engaged in Fishing';\n        case 8:\n            return 'Under way sailing';\n        case 9:\n            return 'Reserved for future amendment of Navigational Status for HSC';\n        case 10:\n            return 'Reserved for future amendment of Navigational Status for WIG';\n        case 11:\n            return 'Reserved for future use';\n        case 12:\n            return 'Reserved for future use';\n        case 13:\n            return 'Reserved for future use';\n        case 14:\n            return 'AIS-SART is active';\n        case 15:\n            return 'Not defined (default)';\n        default:\n            return `unknown (${navigationStatus})`;\n    }\n}\n\nfunction toETAString(eta: ETA): string | undefined {\n    if (isNullOrUndefined(eta)) {\n        return undefined;\n    }\n    return `${eta.month.toString().padStart(2, '0')}/${eta.day.toString().padStart(2, '0')} ${eta.hour.toString().padStart(2, '0')}:${eta.minute.toString().padStart(2, '0')} UTC`;\n}\n\nfunction toRadians(degs: number | null | undefined): number | undefined {\n    if ((degs === null) || (degs === undefined)) {\n        return undefined;\n    }\n    return degs * Math.PI / 180;\n}\n\nfunction isNullOrUndefined(v): boolean {\n    return (v === null) || (v === undefined);\n}\n\nfunction isDimensionValid(dimension?: Dimension): boolean {\n    return !isNullOrUndefined(dimension)\n        && (dimension.A > 0) && (dimension.B > 0) && (dimension.C > 0) && (dimension.D > 0);\n}\n\nfunction createTableRow(name: string, value, unit?: string): string {\n    if (isNullOrUndefined(value)) {\n        return '';\n    }\n    const sValue = String(value);\n    return `<tr><td>${name}</td><td>${sValue} ${isNullOrUndefined(unit) ? \"\" : unit}</td></tr>`;\n}\n\nfunction newShipType(name: string, color: string, fillColor: string): ShipType {\n    return {\n        name: name,\n        color: color,\n        fillColor: fillColor,\n    };\n}\n\nfunction getShipType(type: number): ShipType {\n    if ((type < 0) || (type > 99)) {\n        return UNKNOWN_TYPE;\n    }\n    const shipType = TYPES[type];\n    if (!isNullOrUndefined(shipType)) {\n        return shipType;\n    }\n    return RESERVED_TYPE;\n}\n","import L from 'leaflet';\nimport type {LatLngExpression} from 'leaflet';\nimport {TrackSymbol} from './trackSymbol';\nimport type {ShapeSetEntry, ShapeOptions, TrackSymbolOptions} from './options';\nimport type {Points, Shape, ShapeSet, Units} from './types';\nimport {AISTrackSymbol} from './ais/aisTrackSymbol';\nimport type {AISTrackSymbolOptions} from './ais/options';\nimport type {AISMessage, Dimension, ETA, PositionReport, ShipStaticData} from './ais/types';\n\nexport {\n    Points,\n    Shape,\n    ShapeOptions,\n    ShapeSet,\n    ShapeSetEntry,\n    TrackSymbol,\n    TrackSymbolOptions,\n    Units,\n};\n\nexport {\n    AISMessage,\n    AISTrackSymbol,\n    AISTrackSymbolOptions,\n    Dimension,\n    ETA,\n    PositionReport,\n    ShipStaticData,\n};\n\nL['trackSymbol'] = function(latLng: LatLngExpression, options?: TrackSymbolOptions): TrackSymbol {\n    return new TrackSymbol(latLng, options);\n}\nL['TrackSymbol'] = TrackSymbol;\n\nL['aisTrackSymbol'] = function(positionReport: PositionReport, options?: AISTrackSymbolOptions): AISTrackSymbol {\n    return new AISTrackSymbol(positionReport, options);\n}\nL['AISTrackSymbol'] = AISTrackSymbol;\n\nexport default TrackSymbol;\n"],"names":["CCW","CW","ORIENTATION","PIx2","INSIDE$2","OUTSIDE$1","BOUNDARY$1","CONTAINS","INTERLACE","OVERLAP_SAME$1","OVERLAP_OPPOSITE$1","NOT_VERTEX$1","START_VERTEX$1","END_VERTEX$1","Constants","DP_TOL","setTolerance","tolerance","getTolerance","DECIMALS","EQ_0","x","EQ","y","GT","GE","LT","LE","Utils$1","Flatten","c","value","Errors","LinkedList","first","last","counter","edge","start","end","elements","from","to","element","newElement","elementBefore","elementAfter","controlEdge","addToIntPoints","pt","int_points","id","shapes","len","is_vertex","arc_length","sortIntersections","intersections","getSortedArray","faceMap","ip","compareFn","ip1","ip2","getSortedArrayOnLine","line","int_point1","int_point2","filterDuplicatedIntersections","do_squeeze","int_point_ref1","int_point_ref2","int_point_cur1","int_point_cur2","i","j","int_point","index","initializeInclusionFlags","calculateInclusionFlags","polygon","setOverlappingFlags","cur_face","first_int_point_in_face_id","next_int_point1","num_int_points","cur_int_point1","int_points_cur_pool_start","int_points_cur_pool_num","intPointsPoolCount","next_int_point_id","int_points_next_pool_num","next_int_point1_tmp","edge_from1","edge_to1","cur_int_point2","next_int_point2","edge_from2","edge_to2","cur_int_point_num","int_point_current","int_point_next","int_points_pool_num","splitByIntersections","newEdge","insertBetweenIntPoints","new_edge","edge_before","edge_after","INSIDE$1","OUTSIDE","BOUNDARY","OVERLAP_SAME","OVERLAP_OPPOSITE","NOT_VERTEX","START_VERTEX","END_VERTEX","BOOLEAN_UNION","BOOLEAN_INTERSECT","BOOLEAN_SUBTRACT","unify","polygon1","polygon2","res_poly","wrk_poly","booleanOpBinary","subtract","polygon2_reversed","intersect$1","innerClip","clip_shapes1","face","clip_shapes2","outerClip","calculateIntersections","getIntersections","ip_sorted1","ip_sorted2","filterNotRelevantEdges","op","notIntersectedFacesRes","getNotIntersectedFaces","notIntersectedFacesWrk","calcInclusionForNotIntersectedFaces","fixBoundaryConflicts","removeNotRelevantChains","removeNotRelevantNotIntersectedFaces","swapLinksAndRestore","copyWrkToRes","swapLinks","removeOldFaces","restoreFaces","restore","edge1","resp","edge2","poly","notIntersected","notIntersectedFaces","poly2","poly1","int_points1","int_points1_sorted","int_points2","iterate_more","edge_tmp","new_bv","dist","segment","newEdge1","int_point2_edge_after","newEdge2","is_res_polygon","first_int_point_in_face_num","int_points_from_pull_start","int_points_from_pull_num","next_int_point_num","int_points_to_pull_start","int_points_to_pull_num","edge_from","edge_to","k","res_polygon","wrk_polygon","other_int_points","int_point_tmp","rel","BooleanOperations","EQUAL","INTERSECT","TOUCH","INSIDE","COVERED","DE9IM","geom","e","intersectLine2Line","line1","line2","A1","B1","C1","A2","B2","C2","det","detX","detY","intersectLine2Circle","circle","prj","delta","v_trans","intersectLine2Box","box","ips","seg","ips_tmp","intersectSegment2Line","ptInIntPoints","intersectLine2Arc","arc","ip_tmp","intersectSegment2Segment","seg1","seg2","new_ip","isPointInSegmentBox","point","intersectSegment2Circle","_","intersectSegment2Arc","intersectSegment2Box","intersectCircle2Circle","circle1","circle2","vec","r1","r2","a","mid_pt","h","intersectCircle2Box","intersectArc2Arc","arc1","arc2","intersectArc2Circle","intersectArc2Box","intersectEdge2Segment","intersectEdge2Arc","intersectEdge2Line","intersectEdge2Circle","intersectSegment2Polygon","intersectArc2Polygon","intersectLine2Polygon","intersectCircle2Polygon","intersectEdge2Edge","shape1","shape2","intersectEdge2Polygon","resp_edges","resp_edge","intersectPolygon2Polygon","intersectShape2Polygon","shape","new_pt","createLineFromRay","ray","intersectRay2Segment","intersectRay2Arc","intersectRay2Circle","intersectRay2Box","intersectRay2Line","intersectRay2Ray","ray1","ray2","intersectRay2Polygon","defaultAttributes","SVGAttributes","args","property","acc","key","SVGKey","str","convertToString","attrs","Multiline","v","edgeBefore","edgeFound","angle","center","matrix","svgStr","multiline","ray_shoot","contains","searchBox","i1","i2","intersection","prev_edge","prev_tangent","prev_point","cur_tangent","cur_point","prev_on_the_left","cur_on_the_left","next_edge","next_tangent","next_point","next_on_the_left","equal","relate","intersect","touch","disjoint","inside","covered","contain","cover","relateLine2Line","relateLine2Circle","relateLine2Box","relateLine2Polygon","relateShape2Polygon","relatePolygon2Polygon","denim","ip_sorted","splitShapes","boolean_intersection","boolean_difference1","boolean_difference2","inner_clip_shapes1","inner_clip_shapes2","outer_clip_shapes1","outer_clip_shapes2","Relations","Matrix$1","Matrix","b","d","tx","ty","vector","other_matrix","centerX","centerY","cos","sin","sx","sy","Interval","low","high","other_interval","interval1","interval2","val1","val2","RB_TREE_COLOR_RED","RB_TREE_COLOR_BLACK","Node","left","right","parent","color","other_node","comparable_max","search_node","comparable_less_than","IntervalTree","count","res","node","insert_node","delete_node","interval","outputMapperFn","resp_nodes","visitor","callback","tree","node_current","current_node","parent_node","uncle_node","cut_node","fix_node","brother_node","found","node_min","node_max","node_successor","action","height","heightLeft","heightRight","PlanarSet","size","deleted","Shape","Point$1","Point","arr","m","proj_vec","dx","dy","r","Vector$1","a1","a2","scalar","norm1","norm2","n","vector$1","Segment","coords","ps","pe","shortest_segment","length","factor","rest","ymin","dy1","dy2","pts","Line$1","Line","norm","A","B","C","other_line","distance","sorted_points","pt1","pt2","Circle$1","pc","counterclockwise","Arc","startAngle","endAngle","counterClockwise","sweep","test_arc","func_arcs_array","angles","test_arcs","prev_arc","new_arc","newStart","newEnd","newCenter","newDirection","onLeftSide","areaTrapez","areaCircularSegment","slope1","slope2","largeArcFlag","sweepFlag","Box","xmin","xmax","ymax","other_box","box1","box2","new_box","width","Edge","bvMiddle","flag","sign","halfArc1","halfArc2","CircularLinkedList","done","Face","segments","points","flattenShapes","flattenShape","edges","sArea","area","exitOnFirst","Ray","slope","Polygon","argsArray","loop","el","loop1","valid","signedArea","unassignedEdgeFound","edgeFrom","edgeTo","edge_next","cutPolygons","cut_edge_start","cut_edge_end","newCutPolygons","cutPoly1","cutPoly2","edgeBefore1","edgeBefore2","face1","face2","newPoly","int_point1_prev","int_point1_curr","polygons","orientation","newPolygons","islandPolygon","min_dist_and_segment","min_stop","newPolygon","Circle","Vector","Utils","Inversion","inversion_circle","k2","len2","s","inversion","Distance","closest_point","dist2center","shortest_dist","v_seg","v_ps2pt","v_pe2pt","start_sp","end_sp","v_unit","dist_and_segment","dist_tmp","shortest_segment_tmp","dist_from_start","shortest_segment_from_start","dist_from_end","shortest_segment_from_end","dist_from_center","shortest_segment_from_center","dist_from_projection","shortest_segment_from_projection","segment_tmp","mindist_x","mindist_y","mindist","maxdist","level","new_level_left","new_level_right","new_level","set","squared_min_stop","min_dist_and_segment_new","stop","d1","d2","DEFAULT_SIZE","DEFAULT_LEADER_TIME","_TrackSymbol","Path","latLng","options","Util","L","bounds","Bounds","LatLngBounds","viewPath","shapeOptions","oldLatLng","heading","course","speed","modelAngle","leaderLength","leaderEndLatLng","LatLng","latLngs","zoomLevel","shapeSetEntriesFiltered","shapeSetEntry","shapeSet","headingAngle","units","p","p1","close","result","TrackSymbol","DEFAULT_MIN_ZOOM_LEVEL","KNOTS_PER_METER_PER_SECOND","MAX_SOG_EXCLUSIVE","MAX_COG_EXCLUSIVE","MAX_HEADING_EXCLUSIVE","RESERVED_COLOR","RESERVED_FILL_COLOR","WIG_COLOR","WIG_FILL_COLOR","TYPE_3X_COLOR","TYPE_3X_FILL_COLOR","HSC_COLOR","HSC_FILL_COLOR","TYPE_5X_COLOR","TYPE_5X_FILL_COLOR","PASSENGER_COLOR","PASSENGER_FILL_COLOR","CARGO_COLOR","CARGO_FILL_COLOR","TANKER_COLOR","TANKER_FILL_COLOR","OTHER_COLOR","OTHER_FILL_COLOR","TYPES","newShipType","RESERVED_TYPE","UNKNOWN_TYPE","_AISTrackSymbol","positionReport","isNullOrUndefined","toRadians","shipStaticData","shipType","getShipType","leaderTime","minZoomLevel","isDimensionValid","content","createTableRow","toNavigationStatusString","toTypeString","toFixTypeString","toETAString","popupContent","DomUtil","AISTrackSymbol","type","fixType","navigationStatus","eta","degs","dimension","name","unit","sValue","fillColor"],"mappings":"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","x_google_ignoreList":[0]}